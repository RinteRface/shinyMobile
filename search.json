[{"path":[]},{"path":"/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement [INSERT CONTACT METHOD]. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/ code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https:// www.contributor-covenant.org/translations.","code":""},{"path":"/articles/pwa.html","id":"progressive-web-app-pwa","dir":"Articles","previous_headings":"","what":"Progressive Web App (PWA)","title":"Progressive web app support","text":"following book provides depth review PWA support.","code":""},{"path":"/articles/pwa.html","id":"configuration","dir":"Articles","previous_headings":"Progressive Web App (PWA)","what":"Configuration","title":"Progressive web app support","text":"shinyMobile PWA capable, meaning can displayed full screen many mobile devices. feature automatically handled f7Page() allowPWA TRUE (leverages Google PWA compatibility script). setup necessary assets PWA, may run: APP_PATH app location. works app inside package like {golem}. Alternatively, may copy www folder gallery app, provides: valid service worker. valid offline.html fallback. valid web manifest. Don’t forget change start_url property path app. instance, following app hosted https://dgranjon.shinyapps.io/rstudio-global-2021-calendar/, /rstudio-global-2021-calendar/ path. valid set icons. tools appsco app-manifest, create custom icons splash screens, need . really easier {charpente}, reason strongly recommend develop app inside package.","code":"remotes::install_github(\"RinteRface/charpente\") library(charpente) set_pwa(APP_PATH, ...)"},{"path":"/articles/pwa.html","id":"add-the-pwa-to-your-desktop-apps","dir":"Articles","previous_headings":"Progressive Web App (PWA)","what":"Add the PWA to your desktop Apps","title":"Progressive web app support","text":"Copy url app mobile web browser (iOS: Safari Andoid: Chrome). example : https://dgranjon.shinyapps.io/miniUI2Demo/. opens like classic web app, top bottom ugly navigation bars. Select share button located bottom bar Iphone/Ipad. Android, may something similar. Importantly, Chrome iOS support feature, ’s recommend using Safari. Click “Add Home Screen” Choose relevant name click OK. app added IOS/Android Apps. case want custom icons, replace content www folder .","code":""},{"path":"/articles/pwa.html","id":"limitations","dir":"Articles","previous_headings":"Progressive Web App (PWA)","what":"Limitations","title":"Progressive web app support","text":"actually quite complex guarantee mobile platforms supported. PWA compatibility script work case. , please open issue , help improving !","code":""},{"path":"/articles/shinyMobile-tools.html","id":"mobile-preview","dir":"Articles","previous_headings":"","what":"Mobile preview","title":"shinyMobile Tools","text":"Since V0.2.0, shinyMobile function preview app large range mobile devices: iphone X, iphone 8+, iphone8, iphone 5s, iphone 4s, ipad, Samsung galaxy S5, Samsung galaxy Note 8, … either locally online: local preview 4 steps process: run preview_mobile appPath Copy returned code R -e \"shiny::runApp('appPath', port = 3838)\" terminal launch app Press enter run wrapper app fun! preview_mobile options color landscape (preview landscape mode).","code":"library(shiny) library(shinyMobile) preview_mobile(appPath = system.file(\"examples/gallery/app.R\", package = \"shinyMobile\"), device = \"iphoneX\") preview_mobile(url = \"https://dgranjon.shinyapps.io/miniUI2DemoMd\", device = \"ipadMini\")"},{"path":"/articles/shinyMobile-tools.html","id":"pull-to-refresh","dir":"Articles","previous_headings":"","what":"Pull to Refresh","title":"shinyMobile Tools","text":"shinyMobile introduces pull refresh feature. may used refresh page content pulling top bottom. feature disabled default passing pullToRefresh = TRUE f7Page options activate . server side, input, namely input$ptr TRUE ptr refreshed becomes NULL end animation (may run app full screen mode hold left click mouse top bottom):","code":"library(shiny) library(shinyMobile)  shinyApp(   ui = f7Page(     title = \"My app\",     options = list(pullToRefresh = TRUE),     f7SingleLayout(       navbar = f7Navbar(         title = \"Single Layout\",         hairline = FALSE,         shadow = TRUE       ),       toolbar = f7Toolbar(         position = \"bottom\",         f7Link(label = \"Link 1\", href = \"https://www.google.com\"),         f7Link(label = \"Link 2\", href = \"https://www.google.com\")       ),       # main content       f7List(         lapply(1:3, function(j) {           f7ListItem(             letters[j],             media = f7Icon(\"alarm_fill\"),             right = \"Right Text\",             header = \"Header\",             footer = \"Footer\"           )         })       )     )   ),   server = function(input, output, session) {     observe(print(input$ptr))      observeEvent(input$ptr, {       ptrStatus <- if (input$ptr) \"on\"       f7Dialog(         text = paste('ptr is', ptrStatus),         type = \"alert\"       )     })   } )"},{"path":"/articles/shinyMobile-tools.html","id":"predefined-input-values","dir":"Articles","previous_headings":"","what":"Predefined input values","title":"shinyMobile Tools","text":"shinyMobile contains set useful functions help setting layout best possible.","code":""},{"path":[]},{"path":"/articles/shinyMobile-tools.html","id":"description","dir":"Articles","previous_headings":"Predefined input values > Informations about your current device","what":"Description","title":"shinyMobile Tools","text":"shinyMobile predefined input, namely input$deviceInfo. following fields returned: input$deviceInfo$os, returns string containing OS input$deviceInfo$desktop, TRUE FALSE (running app laptop desktop) input$deviceInfo$standalone, TRUE FALSE (standalone, namely whether access app like native app) input$deviceInfo$webview, TRUE FALSE (webview) input$deviceInfo$electron, TRUE FALSE (electron) fields, less inportance: input$deviceInfo$ios, TRUE FALSE (running iOS) input$deviceInfo$android, TRUE FALSE (running android) input$deviceInfo$androidChrome, TRUE FALSE (running android Chrome) input$deviceInfo$iphone, TRUE FALSE (iphone) input$deviceInfo$ipod, TRUE FALSE (ipod) input$deviceInfo$ipad, TRUE FALSE (ipad) input$deviceInfo$edge, TRUE FALSE (using edge) input$deviceInfo$ie, TRUE FALSE (using Internet Explorer) input$deviceInfo$firefox, TRUE FALSE (using Firefox) input$deviceInfo$macos, TRUE FALSE (macOS) input$deviceInfo$windows, TRUE FALSE (Windows) input$deviceInfo$cordova, TRUE FALSE (cordova) input$deviceInfo$phonegap, TRUE FALSE (phonegap)","code":"library(shiny) library(shinyMobile)  shinyApp(   ui = f7Page(     options = list(dark = FALSE),     title = \"My app\",     f7SingleLayout(       navbar = f7Navbar(         title = \"Access device info\",         hairline = FALSE,         shadow = TRUE       ),       # main content       verbatimTextOutput(\"info\")     )   ),   server = function(input, output) {     output$info <- renderPrint({       input$deviceInfo     })   } )"},{"path":"/articles/shinyMobile-tools.html","id":"usecase","dir":"Articles","previous_headings":"Predefined input values > Informations about your current device","what":"Usecase","title":"shinyMobile Tools","text":"example displays card app desktop.","code":"library(shiny) library(shinyMobile)  shinyApp(   ui = f7Page(     options = list(dark = FALSE),     title = \"My app\",     f7SingleLayout(       navbar = f7Navbar(         title = \"Access device info\",         hairline = FALSE,         shadow = TRUE       ),       # main content       uiOutput(\"card\"),       textOutput(\"userAgent\"),     )   ),   server = function(input, output) {          output$userAgent <- renderText(input$deviceInfo$desktop)          # generate a card only for desktop     output$card <- renderUI({       req(input$deviceInfo$desktop)       f7Card(         \"This is a simple card with plain text,         but cards can also contain their own header,         footer, list view, image, or any other element.\"       )     })   } )"},{"path":"/articles/shinyMobile-tools.html","id":"informations-about-shiny-inputs","dir":"Articles","previous_headings":"Predefined input values","what":"Informations about Shiny inputs","title":"shinyMobile Tools","text":"shinyMobile input$lastInputChanged returns name, value type last changed input, see . convenient since usually, shortcut get last changed value needs done server side shiny. Soon way compare initial input values (frozen) current input values get diff.","code":"library(shiny) library(shinyMobile)  shinyApp(   ui = f7Page(     options = list(dark = FALSE),     title = \"My app\",     f7SingleLayout(       navbar = f7Navbar(         title = \"Single Layout\",         hairline = FALSE,         shadow = TRUE       ),       toolbar = f7Toolbar(         position = \"bottom\",         f7Link(label = \"Link 1\", href = \"https://www.google.com\"),         f7Link(label = \"Link 2\", href = \"https://www.google.com\")       ),       # main content       f7Card(verbatimTextOutput(\"infos\")),       f7Card(         f7Text(inputId = \"text\", label = \"Text\"),         f7Slider(inputId = \"range1\", label = \"Range\", min = 0, max = 2, value = 1, step = 0.1),         f7Stepper(inputId = \"stepper1\", label = \"Stepper\", min = 0, max = 10, value = 5),         verbatimTextOutput(\"lastChanged\")       )     )   ),   server = function(input, output) {     output$infos <- renderPrint(input$shinyInfo)     output$lastChanged <- renderPrint(input$lastInputChanged)   } )"},{"path":"/articles/shinyMobile-tools.html","id":"other-information","dir":"Articles","previous_headings":"Predefined input values","what":"Other information","title":"shinyMobile Tools","text":"input$shinyInfo gives current workerId (shinyapps.io, shiny server pro, Posit Connect), unique sessionId (equal session$token server side).","code":""},{"path":"/articles/shinyMobile.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting Started","text":"shinyMobile built top framework7 template (V5.7.14) different purposes: Develop mobile-ready shinyapps. Develop progressive web shinyapps (PWA, similar native apps). Develop desktop shinyapps.","code":""},{"path":"/articles/shinyMobile.html","id":"custom-skins","dir":"Articles","previous_headings":"Introduction","what":"Custom skins","title":"Getting Started","text":"shinyMobile offers 3 skins: aurora desktop apps. ios md mobile apps. automatically detects app running android iOS accordingly adapts layout. course possible apply iOS skin android device inversely, although recommended. shinyMobile also provides 2 themes, namely light dark.","code":""},{"path":"/articles/shinyMobile.html","id":"layouts","dir":"Articles","previous_headings":"Introduction","what":"Layouts","title":"Getting Started","text":"shinyMobile brings 3 box layouts: f7SingleLayout(): develop simple apps (best choice iOS/android Apps). f7TabLayout(): develop complex multi-tabbed apps (best choice iOS/android Apps). f7SplitLayout(): tablets desktop sidebar, navbar main panel","code":""},{"path":[]},{"path":"/articles/shinyMobile.html","id":"inputs-brief-comparison-side-by-side-with-shiny","dir":"Articles","previous_headings":"Introduction > UI elements","what":"Inputs: brief comparison side by side with {shiny}","title":"Getting Started","text":"shinyMobile custom input widgets unique design skin (iOS/android/aurora). summarise known shiny inputs equivalent shinyMobile.","code":""},{"path":[]},{"path":[]},{"path":"/articles/shinyMobile.html","id":"page","dir":"Articles","previous_headings":"Create your first App","what":"Page","title":"Getting Started","text":"main template skeleton. options sets app look feel (See dedicated section ). f7Page() accepts shinyMobile layout (See ).","code":"f7Page(   ...,    options = list(...),   title = NULL,   allowPWA = FALSE )"},{"path":"/articles/shinyMobile.html","id":"navbar","dir":"Articles","previous_headings":"Create your first App > Page","what":"Navbar","title":"Getting Started","text":"navbar mandatory element shinyMobile layout. contains title, subtitle triggers right left panels (f7Panel()). complex apps, can even add sub-navbar f7SubNavbar(...), may contain element like f7Button() text. f7Navbar() exposes styling parameters shadow hairline.","code":"f7Navbar(   ...,    subNavbar = NULL,    title = NULL,    subtitle = NULL,   hairline = TRUE,    shadow = TRUE,    bigger = FALSE,   transparent = FALSE,   leftPanel = FALSE,    rightPanel = FALSE )"},{"path":"/articles/shinyMobile.html","id":"the-toolbar","dir":"Articles","previous_headings":"Create your first App > Page","what":"The Toolbar","title":"Getting Started","text":"option decide embed f7SubNavbar(). toolbar right place add f7Button(), f7Link(), f7Badge()… location controlled position parameter (either top bottom). hood, f7Tabs() custom f7Toolbar().","code":"f7Toolbar(   ...,    position = c(\"top\", \"bottom\"),    hairline = TRUE,   shadow = TRUE,    icons = FALSE,    scrollable = FALSE )"},{"path":"/articles/shinyMobile.html","id":"panels","dir":"Articles","previous_headings":"Create your first App > Page","what":"Panels","title":"Getting Started","text":"Panels also called sidebars, f7Panel() corresponding function. f7Panel() theme option, regardless main app theme. instance, entirely possible create dark f7Panel() page theme light, conversely. behavior controlled via effect argument: reveal makes body content move resize. cover covers body content. resizable argument allows dynamically resize panel. Note moment, option control width panel. stated previously f7SplitLayout(), f7Panel() may also considered sidebar. case, may include f7PanelMenu(). Finally forget set f7Navbar() panels allowed!","code":"f7Panel(   ...,    id = NULL,   title = NULL,    side = c(\"left\", \"right\"),   theme = c(\"dark\", \"light\"),    effect = c(\"reveal\", \"cover\"),   resizable = FALSE )"},{"path":"/articles/shinyMobile.html","id":"the-appbar","dir":"Articles","previous_headings":"Create your first App > Page","what":"The appbar","title":"Getting Started","text":"f7Appbar() displayed top f7Navbar(). best choice embed f7Searchbar(). f7Appbar() may also trigger f7Panel().","code":"f7Appbar(   ...,    leftPanel = FALSE,    rightPanel = FALSE,   maximizable = FALSE )"},{"path":"/articles/shinyMobile.html","id":"select-a-template","dir":"Articles","previous_headings":"Create your first App","what":"Select a template","title":"Getting Started","text":"choice crucial developing App. depends complexity visualizations content. plan develop simple graph table, go f7SingleLayout() option. complex design, best f7TabLayout(). f7SplitLayout() specific tablets desktop apps.","code":""},{"path":"/articles/shinyMobile.html","id":"simple-layout","dir":"Articles","previous_headings":"Create your first App > Select a template","what":"Simple Layout","title":"Getting Started","text":"f7SingleLayout() dedicated build simple, one-page apps gadgets. navbar mandatory, components toolbar optional f7SingleLayout(). app runs specific options: Code","code":"f7SingleLayout(   ...,    navbar,    toolbar = NULL,    panels = NULL,   appbar = NULL ) f7Page(   options = list(dark = FALSE, filled = FALSE, theme = \"md\"),   ... ) library(shiny) library(shinyMobile) library(apexcharter) library(dplyr) library(ggplot2)  data(\"economics_long\") economics_long <- economics_long %>%   group_by(variable) %>%   slice((n()-100):n())   shinyApp(   ui = f7Page(     title = \"My app\",     options = list(dark = FALSE, filled = FALSE, theme = \"md\"),     f7SingleLayout(       navbar = f7Navbar(         title = \"Single Layout\",         hairline = TRUE,         shadow = TRUE       ),       toolbar = f7Toolbar(         position = \"bottom\",         f7Link(label = \"Link 1\", href = \"https://www.google.com\"),         f7Link(label = \"Link 2\", href = \"https://www.google.com\")       ),       # main content       f7Shadow(         intensity = 16,         hover = TRUE,         f7Card(           title = \"Card header\",           apexchartOutput(\"areaChart\")         )       )     )   ),   server = function(input, output) {     output$areaChart <- renderApexchart({       apex(         data = economics_long,         type = \"area\",         mapping = aes(           x = date,           y = value01,           fill = variable         )       ) %>%         ax_yaxis(decimalsInFloat = 2) %>% # number of decimals to keep         ax_chart(stacked = TRUE) %>%         ax_yaxis(max = 4, tickAmount = 4)     })   } )"},{"path":"/articles/shinyMobile.html","id":"tabs-layout","dir":"Articles","previous_headings":"Create your first App > Select a template","what":"Tabs Layout","title":"Getting Started","text":"Choose layout develop complex multi-tabbed apps (best choice iOS/android Apps). … argument requires f7Tabs(..., id = NULL, swipeable = FALSE, animated = TRUE). id argument mandatory want exploit updateF7Tabs() function. f7Tabs() expect f7Tab(..., tabName, icon = NULL, active = FALSE) passed inside. app runs specific options: Code","code":"f7TabLayout(   ...,    navbar,   messagebar = NULL,   panels = NULL,    appbar = NULL ) f7Page(   options = list(dark = FALSE, filled = FALSE, theme = \"md\"),   ... ) library(shiny) library(shinyMobile) library(apexcharter)  poll <- data.frame(   answer = c(\"Yes\", \"No\"),   n = c(254, 238) )  shinyApp(   ui = f7Page(     options = list(dark = FALSE, filled = FALSE, theme = \"md\"),     title = \"My app\",     f7TabLayout(       panels = tagList(         f7Panel(title = \"Left Panel\", side = \"left\", theme = \"light\", \"Blabla\", effect = \"cover\"),         f7Panel(title = \"Right Panel\", side = \"right\", theme = \"dark\", \"Blabla\", effect = \"cover\")       ),       navbar = f7Navbar(         title = \"Tabs\",         hairline = TRUE,         shadow = TRUE,         leftPanel = TRUE,         rightPanel = TRUE       ),       f7Tabs(         animated = TRUE,         #swipeable = TRUE,         f7Tab(           title = \"Tab 1\",           tabName = \"Tab1\",           icon = f7Icon(\"folder\"),           active = TRUE,            f7Shadow(             intensity = 10,             hover = TRUE,             f7Card(               title = \"Card header\",               apexchartOutput(\"pie\")             )           )         ),         f7Tab(           title = \"Tab 2\",           tabName = \"Tab2\",           icon = f7Icon(\"keyboard\"),           active = FALSE,           f7Shadow(             intensity = 10,             hover = TRUE,             f7Card(               title = \"Card header\",               apexchartOutput(\"scatter\")             )           )         ),         f7Tab(           title = \"Tab 3\",           tabName = \"Tab3\",           icon = f7Icon(\"layers_alt\"),           active = FALSE,           f7Shadow(             intensity = 10,             hover = TRUE,             f7Card(               title = \"Card header\",               f7SmartSelect(                 \"variable\",                 \"Variables to show:\",                 c(\"Cylinders\" = \"cyl\",                   \"Transmission\" = \"am\",                   \"Gears\" = \"gear\"),                 openIn = \"sheet\",                 multiple = TRUE               ),               tableOutput(\"data\")             )           )         )       )     )   ),   server = function(input, output, session) {      # river plot     dates <- reactive(seq.Date(Sys.Date() - 30, Sys.Date(), by = input$by))      output$pie <- renderApexchart({       apex(         data = poll,         type = \"pie\",         mapping = aes(x = answer, y = n)       )     })      output$scatter <- renderApexchart({       apex(         data = mtcars,         type = \"scatter\",         mapping = aes(           x = wt,           y = mpg,           fill = cyl         )       )     })      # datatable     output$data <- renderTable({       mtcars[, c(\"mpg\", input$variable), drop = FALSE]     }, rownames = TRUE)   } )"},{"path":"/articles/shinyMobile.html","id":"split-layout","dir":"Articles","previous_headings":"Create your first App > Select a template","what":"Split Layout","title":"Getting Started","text":"f7SplitLayout() third layout introduced shinyMobile, similar sidebarLayout {shiny}. template focused tablet/desktop use. composed sidebar, main panel. main content goes … parameter. Navigation items gathered sidebar slot. sidebar expect f7Panel(). Importantly, side parameter must set left style reveal. navigation menu organized follows: id argument important want get currently selected item update select tab. f7PanelItem() mandatory tabName. associated input input$menu example, tab1 value since first tab set active state. adequately link body sidebar, must wrap body content f7Items() containing many f7Item() sidebar items. tabName must correspond. Code","code":"f7SplitLayout(   ...,    navbar,    sidebar,    toolbar = NULL,    panels = NULL,   appbar = NULL ) f7PanelMenu(   id = \"menu\",   f7PanelItem(     tabName = \"tab1\",      title = \"Tab 1\",      icon = f7Icon(\"email\"),      active = TRUE   ),   f7PanelItem(     tabName = \"tab2\",      title = \"Tab 2\",      icon = f7Icon(\"home\")   ) ) library(shiny) library(ggplot2) library(shinyMobile) library(apexcharter) library(thematic)  fruits <- data.frame(   name = c('Apples', 'Oranges', 'Bananas', 'Berries'),   value = c(44, 55, 67, 83) )  thematic_shiny(font = \"auto\")  new_mtcars <- reshape(   data = head(mtcars),   idvar = \"model\",   varying = list(c(\"drat\", \"wt\")),   times = c(\"drat\", \"wt\"),   direction = \"long\",   v.names = \"value\",   drop = c(\"mpg\", \"cyl\", \"hp\", \"dist\", \"qsec\", \"vs\", \"am\", \"gear\", \"carb\") )  shinyApp(   ui = f7Page(     title = \"My app\",     options = list(       theme = \"aurora\",       dark = TRUE,       filled = FALSE,       color = \"#007aff\",       touch = list(         tapHold = TRUE,         tapHoldDelay = 750,         iosTouchRipple = FALSE       ),       iosTranslucentBars = FALSE,       navbar = list(         iosCenterTitle = TRUE,         hideNavOnPageScroll = TRUE       ),       toolbar = list(         hideNavOnPageScroll = FALSE       ),       pullToRefresh = FALSE     ),     f7SplitLayout(       sidebar = f7Panel(         title = \"Sidebar\",         side = \"left\",         theme = \"light\",         f7PanelMenu(           id = \"menu\",           f7PanelItem(             tabName = \"tab1\",             title = \"Tab 1\",             icon = f7Icon(\"equal_circle\"),             active = TRUE           ),           f7PanelItem(             tabName = \"tab2\",             title = \"Tab 2\",             icon = f7Icon(\"equal_circle\")           ),           f7PanelItem(             tabName = \"tab3\",             title = \"Tab 3\",             icon = f7Icon(\"equal_circle\")           )         ),         uiOutput(\"selected_tab\"),         effect = \"reveal\"       ),       navbar = f7Navbar(         title = \"Split Layout\",         hairline = FALSE,         shadow = TRUE       ),       toolbar = f7Toolbar(         position = \"bottom\",         f7Link(label = \"Link 1\", href = \"https://www.google.com\"),         f7Link(label = \"Link 2\", href = \"https://www.google.com\")       ),       # main content       f7Items(         f7Item(           tabName = \"tab1\",           f7Button(\"toggleSheet\", \"Plot parameters\"),           f7Sheet(             id = \"sheet1\",             label = \"Plot Parameters\",             orientation = \"bottom\",             swipeToClose = TRUE,             backdrop = TRUE,             f7Slider(               \"obs\",               \"Number of observations:\",               min = 0, max = 1000,               value = 500             )           ),           br(),           plotOutput(\"distPlot\")         ),         f7Item(           tabName = \"tab2\",           apexchartOutput(\"radar\")         ),         f7Item(           tabName = \"tab3\",           f7Toggle(             inputId = \"plot_show\",             label = \"Show Plot?\",             checked = TRUE           ),           apexchartOutput(\"multi_radial\")         )       )     )   ),   server = function(input, output, session) {      observeEvent(input$toggleSheet, {       updateF7Sheet(id = \"sheet1\")     })      observeEvent(input$obs, {       if (input$obs < 500) {         f7Notif(           text = paste0(\"The slider value is only \", input$obs, \". Please                         increase it\"),           icon = f7Icon(\"bolt_fill\"),           title = \"Alert\",           titleRightText = Sys.Date()         )       }     })      output$radar <- renderApexchart({       apex(         data = new_mtcars,         type = \"radar\",         mapping = aes(           x = model,           y = value,           group = time)       )     })      output$selected_tab <- renderUI({       HTML(paste0(\"Access the currently selected tab: \", strong(input$menu)))     })      output$distPlot <- renderPlot({       dist <- rnorm(input$obs)       hist(dist)     })      output$multi_radial <- renderApexchart({       if (input$plot_show) {         apex(data = fruits, type = \"radialBar\", mapping = aes(x = name, y = value))       }     })    } )"},{"path":"/articles/shinyMobile.html","id":"app-options","dir":"Articles","previous_headings":"Create your first App","what":"App options","title":"Getting Started","text":"can customize global app behavior: stated , may choose 3 skins 2 color themes. third option called filled allows fill navbar toolbar enabled. color options simply changes color elements buttons, panel triggers, tabs triggers, … shinyMobile brings lot different colors. hideOnPageScroll allows hide/show navbar toolbar useful focus content. tapHold parameter ensure “long-press” feature activated. preloader useful case want display loading screen. Framework7 many options can passed options parameter.","code":"options = list(     theme = c(\"ios\", \"md\", \"auto\", \"aurora\"),     dark = TRUE,     filled = FALSE,     color = \"#007aff\",     touch = list(       tapHold = TRUE,       tapHoldDelay = 750,       iosTouchRipple = FALSE     ),     iosTranslucentBars = FALSE,     navbar = list(       iosCenterTitle = TRUE,       hideOnPageScroll = TRUE     ),     toolbar = list(       hideOnPageScroll = FALSE     ),     pullToRefresh = FALSE   )"},{"path":"/articles/shinyMobile.html","id":"gadgets","dir":"Articles","previous_headings":"","what":"Gadgets","title":"Getting Started","text":"shinyMobile particularly well suited build shiny gagdets. convert existing app gadget, wrap shiny::runGadget() function.","code":"library(shiny) library(shinyMobile) runGadget(shinyAppDir(system.file(\"examples/tab_layout\", package = \"shinyMobile\")))"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"David Granjon. Author, maintainer. Victor Perrier. Author. John Coene. Contributor. Isabelle Rudolf. Author. Dieter Menne. Contributor. Marvelapp. Contributor, copyright holder.            device.css wrappers Vladimir Kharlampidi. Contributor, copyright holder.            Framework7 HTML template","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Granjon D, Perrier V, Rudolf (2024). shinyMobile: Mobile Ready 'shiny' Apps Standalone Capabilities. R package version 1.0.1, https://rinterface.github.io/shinyMobile/, https://github.com/RinteRface/shinyMobile.","code":"@Manual{,   title = {shinyMobile: Mobile Ready 'shiny' Apps with Standalone Capabilities},   author = {David Granjon and Victor Perrier and Isabelle Rudolf},   year = {2024},   note = {R package version 1.0.1, https://rinterface.github.io/shinyMobile/},   url = {https://github.com/RinteRface/shinyMobile}, }"},{"path":"/index.html","id":"shinymobile-","dir":"","previous_headings":"","what":"Mobile Ready shiny Apps with Standalone Capabilities","title":"Mobile Ready shiny Apps with Standalone Capabilities","text":"Develop outstanding {shiny} apps iOS, Android, desktop well beautiful {shiny} gadgets. {shinyMobile} built top latest Framework7 template.","code":""},{"path":"/index.html","id":"sandbox","dir":"","previous_headings":"","what":"Sandbox","title":"Mobile Ready shiny Apps with Standalone Capabilities","text":"can play sandbox.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Mobile Ready shiny Apps with Standalone Capabilities","text":"","code":"# from CRAN install.packages(\"shinyMobile\") # for the latest version devtools::install_github(\"RinteRface/shinyMobile\")"},{"path":"/index.html","id":"demo","dir":"","previous_headings":"","what":"Demo","title":"Mobile Ready shiny Apps with Standalone Capabilities","text":"Android demo: iOS demo:","code":""},{"path":"/index.html","id":"acknowledgement","dir":"","previous_headings":"","what":"Acknowledgement","title":"Mobile Ready shiny Apps with Standalone Capabilities","text":"special thanks Vladimir Kharlampidi creating amazing framework7 HTML template.","code":""},{"path":"/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Mobile Ready shiny Apps with Standalone Capabilities","text":"Please note shinyMobile project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"/reference/accordion.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 accordion container — f7Accordion","title":"Framework7 accordion container — f7Accordion","text":"f7Accordion creates interactive accordion container. f7AccordionItem inserted f7Accordion. updateF7Accordion toggles f7Accordion client.","code":""},{"path":"/reference/accordion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 accordion container — f7Accordion","text":"","code":"f7Accordion(..., id = NULL, multiCollapse = FALSE)  f7AccordionItem(..., title = NULL, open = FALSE)  updateF7Accordion(   id,   selected = NULL,   session = shiny::getDefaultReactiveDomain() )"},{"path":"/reference/accordion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 accordion container — f7Accordion","text":"... Item content f7Block f7 element. id Accordion instance. multiCollapse Whether open multiple items time. FALSE default. title Item title. open Whether item open start. FALSE default. selected Index item select. session Shiny session object","code":""},{"path":"/reference/accordion.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Framework7 accordion container — f7Accordion","text":"David Granjon, dgranjon@ymail.com","code":""},{"path":"/reference/accordion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 accordion container — f7Accordion","text":"","code":"# Accordion if(interactive()){  library(shiny)  library(shinyMobile)   shinyApp(   ui = f7Page(     title = \"Accordions\",     f7SingleLayout(      navbar = f7Navbar(\"Accordions\"),      f7Accordion(       id = \"myaccordion1\",       f7AccordionItem(        title = \"Item 1\",        f7Block(\"Item 1 content\"),        open = TRUE       ),       f7AccordionItem(        title = \"Item 2\",        f7Block(\"Item 2 content\")       )      ),      f7Accordion(       multiCollapse = TRUE,       inputId = \"myaccordion2\",       f7AccordionItem(        title = \"Item 1\",        f7Block(\"Item 1 content\")       ),       f7AccordionItem(        title = \"Item 2\",        f7Block(\"Item 2 content\")       )      )     )   ),   server = function(input, output, session) {    observe({     print(      list(       accordion1 = input$myaccordion1,       accordion2 = input$myaccordion2      )     )    })   }  ) }  # Update accordion if (interactive()) {  library(shiny)  library(shinyMobile)   shinyApp(    ui = f7Page(      title = \"Accordions\",      f7SingleLayout(        navbar = f7Navbar(\"Accordions\"),        f7Button(inputId = \"go\", \"Go\"),        f7Accordion(          id = \"myaccordion1\",          f7AccordionItem(            title = \"Item 1\",            f7Block(\"Item 1 content\"),            open = TRUE          ),          f7AccordionItem(            title = \"Item 2\",            f7Block(\"Item 2 content\")          )        )      )    ),    server = function(input, output, session) {       observeEvent(input$go, {        updateF7Accordion(id = \"myaccordion1\", selected = 2)      })       observe({        print(          list(            accordion1_state = input$myaccordion1$state,            accordion1_values = unlist(input$myaccordion1$value)          )        )      })    }  ) }"},{"path":"/reference/actionsheet.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 action sheet — f7ActionSheet","title":"Framework7 action sheet — f7ActionSheet","text":"f7ActionSheet creates action sheet may contain multiple buttons. triggers action server side. may updated later updateF7ActionSheet. updateF7ActionSheet updates f7ActionSheet server.","code":""},{"path":"/reference/actionsheet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 action sheet — f7ActionSheet","text":"","code":"f7ActionSheet(   id,   buttons,   grid = FALSE,   ...,   session = shiny::getDefaultReactiveDomain() )  updateF7ActionSheet(id, options, session = shiny::getDefaultReactiveDomain())"},{"path":"/reference/actionsheet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 action sheet — f7ActionSheet","text":"id Unique id. gives state action sheet. input$id TRUE opened inversely. Importantly, action sheet never opened, input$id NULL. buttons list buttons currently selected button may accessed via input$<sheet_id>_button. value numeric. action sheet closed, input$<sheet_id>_button NULL. useful want trigger events specific button click. grid Whether display buttons grid. Default FALSE. ... options. See https://v5.framework7.io/docs/action-sheet.html#action-sheet-parameters. session Shiny session object. options options. See https://v5.framework7.io/docs/action-sheet.html#action-sheet-parameters.","code":"buttons <- list(   list(     text = \"Notification\",     icon = f7Icon(\"info\"),     color = NULL   ),   list(     text = \"Dialog\",     icon = f7Icon(\"lightbulb_fill\"),     color = NULL   )  )"},{"path":"/reference/actionsheet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 action sheet — f7ActionSheet","text":"","code":"if (interactive()) {  library(shiny)  library(shinyMobile)   shinyApp(    ui = f7Page(      title = \"Action sheet\",      f7SingleLayout(        navbar = f7Navbar(\"Action sheet\"),        br(),        f7Button(inputId = \"go\", label = \"Show action sheet\", color = \"red\")      )    ),    server = function(input, output, session) {       observe({        print(list(          sheetOpen = input$action1,          button = input$action1_button        ))      })       observeEvent(input$action1_button, {        if (input$action1_button == 1) {          f7Notif(            text = \"You clicked on the first button\",            icon = f7Icon(\"bolt_fill\"),            title = \"Notification\",            titleRightText = \"now\"          )        } else if (input$action1_button == 2) {          f7Dialog(            id = \"test\",            title = \"Click me to launch a Toast!\",            type = \"confirm\",            text = \"You clicked on the second button\"          )        }      })       observeEvent(input$test, {        f7Toast(text = paste(\"Alert input is:\", input$test))      })       observeEvent(input$go, {        f7ActionSheet(          grid = TRUE,          id = \"action1\",          buttons = list(           list(             text = \"Notification\",             icon = f7Icon(\"info\"),             color = NULL           ),           list(             text = \"Dialog\",             icon = f7Icon(\"lightbulb_fill\"),             color = NULL           )          )        )      })    }  )   ### in shiny module  library(shiny)  library(shinyMobile)   sheetModuleUI <- function(id) {    ns <- NS(id)    f7Button(inputId = ns(\"go\"), label = \"Show action sheet\", color = \"red\")  }   sheetModule <- function(input, output, session) {     ns <- session$ns     observe({      print(list(        sheetOpen = input$action1,        button = input$action1_button      ))    })     observeEvent(input$action1_button, {      if (input$action1_button == 1) {        f7Notif(          text = \"You clicked on the first button\",          icon = f7Icon(\"bolt_fill\"),          title = \"Notification\",          titleRightText = \"now\"        )      } else if (input$action1_button == 2) {        f7Dialog(          id = ns(\"test\"),          title = \"Click me to launch a Toast!\",          type = \"confirm\",          text = \"You clicked on the second button\",        )      }    })     observeEvent(input$test, {      f7Toast(text = paste(\"Alert input is:\", input$test))    })     observeEvent(input$go, {      f7ActionSheet(        grid = TRUE,        id = ns(\"action1\"),        buttons = list(          list(            text = \"Notification\",            icon = f7Icon(\"info\"),            color = NULL          ),          list(            text = \"Dialog\",            icon = f7Icon(\"lightbulb_fill\"),            color = NULL          )        )      )    })  }   shinyApp(    ui = f7Page(      title = \"Action sheet\",      f7SingleLayout(        navbar = f7Navbar(\"Action sheet\"),        br(),        sheetModuleUI(id = \"sheet1\")      )    ),    server = function(input, output, session) {      callModule(sheetModule, \"sheet1\")    }  ) } if (interactive()) {  library(shiny)  library(shinyMobile)   shinyApp(    ui = f7Page(      title = \"Update Action sheet\",      f7SingleLayout(        navbar = f7Navbar(\"Update Action sheet\"),        br(),        f7Segment(          f7Button(inputId = \"go\", label = \"Show action sheet\", color = \"green\"),          f7Button(inputId = \"update\", label = \"Update action sheet\", color = \"red\")        )      )    ),    server = function(input, output, session) {       observe({        print(list(          sheetOpen = input$action1,          button = input$action1_button        ))      })       observeEvent(input$go, {        f7ActionSheet(          grid = TRUE,          id = \"action1\",          buttons = list(            list(              text = \"Notification\",              icon = f7Icon(\"info\"),              color = NULL            ),            list(              text = \"Dialog\",              icon = f7Icon(\"lightbulb_fill\"),              color = NULL            )          )        )      })       observeEvent(input$update, {        updateF7ActionSheet(          id = \"action1\",          options = list(            grid = TRUE,            buttons = list(              list(                text = \"Plop\",                icon = f7Icon(\"info\"),                color = \"orange\"              )            )          )        )      })    }  ) }"},{"path":"/reference/add_dependencies.html","id":null,"dir":"Reference","previous_headings":"","what":"Attach all created dependencies in the ./R directory to the provided tag — add_dependencies","title":"Attach all created dependencies in the ./R directory to the provided tag — add_dependencies","text":"function works existing dependencies. Otherwise, error raised.","code":""},{"path":"/reference/add_dependencies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Attach all created dependencies in the ./R directory to the provided tag — add_dependencies","text":"","code":"add_dependencies(tag, deps = NULL)"},{"path":"/reference/add_dependencies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Attach all created dependencies in the ./R directory to the provided tag — add_dependencies","text":"tag Tag attach dependencies. deps Dependencies add. Expect vector names. NULL, dependencies added.","code":""},{"path":"/reference/add_f7icons_deps.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 icon dependencies — add_f7icons_deps","title":"Framework7 icon dependencies — add_f7icons_deps","text":"function attaches icon dependencies given tag.","code":""},{"path":"/reference/add_f7icons_deps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 icon dependencies — add_f7icons_deps","text":"","code":"add_f7icons_deps(tag)"},{"path":"/reference/add_f7icons_deps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 icon dependencies — add_f7icons_deps","text":"tag Element attach dependencies.","code":""},{"path":"/reference/add_framework7_deps.html","id":null,"dir":"Reference","previous_headings":"","what":"framework7 dependencies utils — add_framework7_deps","title":"framework7 dependencies utils — add_framework7_deps","text":"function attaches framework7. dependencies given tag","code":""},{"path":"/reference/add_framework7_deps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"framework7 dependencies utils — add_framework7_deps","text":"","code":"add_framework7_deps(tag)"},{"path":"/reference/add_framework7_deps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"framework7 dependencies utils — add_framework7_deps","text":"tag Element attach dependencies.","code":""},{"path":"/reference/add_pwa_deps.html","id":null,"dir":"Reference","previous_headings":"","what":"PWA dependencies utils — add_pwa_deps","title":"PWA dependencies utils — add_pwa_deps","text":"function attaches PWA manifest icons given tag","code":""},{"path":"/reference/add_pwa_deps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PWA dependencies utils — add_pwa_deps","text":"","code":"add_pwa_deps(tag)"},{"path":"/reference/add_pwa_deps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PWA dependencies utils — add_pwa_deps","text":"tag Element attach dependencies.","code":""},{"path":"/reference/add_pwacompat_deps.html","id":null,"dir":"Reference","previous_headings":"","what":"pwacompat dependencies utils — add_pwacompat_deps","title":"pwacompat dependencies utils — add_pwacompat_deps","text":"function attaches pwacompat. dependencies given tag","code":""},{"path":"/reference/add_pwacompat_deps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"pwacompat dependencies utils — add_pwacompat_deps","text":"","code":"add_pwacompat_deps(tag)"},{"path":"/reference/add_pwacompat_deps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"pwacompat dependencies utils — add_pwacompat_deps","text":"tag Element attach dependencies.","code":""},{"path":"/reference/add_shinyMobile_deps.html","id":null,"dir":"Reference","previous_headings":"","what":"shinyMobile dependencies utils — add_shinyMobile_deps","title":"shinyMobile dependencies utils — add_shinyMobile_deps","text":"function attaches shinyMobile dependencies given tag","code":""},{"path":"/reference/add_shinyMobile_deps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"shinyMobile dependencies utils — add_shinyMobile_deps","text":"","code":"add_shinyMobile_deps(tag)"},{"path":"/reference/add_shinyMobile_deps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"shinyMobile dependencies utils — add_shinyMobile_deps","text":"tag Element attach dependencies.","code":""},{"path":"/reference/app_container.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an iframe container for app demo — app_container","title":"Create an iframe container for app demo — app_container","text":"Create iframe container app demo","code":""},{"path":"/reference/app_container.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an iframe container for app demo — app_container","text":"","code":"app_container(url, deps = FALSE, skin, color = NULL, landscape = FALSE)"},{"path":"/reference/app_container.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an iframe container for app demo — app_container","text":"url app URL. httr GET test run . failed, function returns NULL. deps Whether include marvel device assets. Default FALSE. first occurence must set deps TRUE CSS loaded page. skin Wrapper devices. color Wrapper color. iphone8 (black, silver, gold), iphone8+ (black, silver, gold), iphone5s (black, silver, gold), iphone5c (white,red , yellow, green, blue), iphone4s (black, silver), ipadMini (black, silver) galaxyS5 (black, white). landscape Whether put device wrapper landscape mode. Default FALSE.","code":""},{"path":"/reference/appbar.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 appbar — f7Appbar","title":"Framework7 appbar — f7Appbar","text":"f7Appbar displayed top f7Navbar. f7Appbar can also trigger f7Panel. f7Back button go back f7Tabs. f7Next button go next f7Tabs.","code":""},{"path":"/reference/appbar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 appbar — f7Appbar","text":"","code":"f7Appbar(..., leftPanel = FALSE, rightPanel = FALSE)  f7Back(targetId)  f7Next(targetId)"},{"path":"/reference/appbar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 appbar — f7Appbar","text":"... UI content f7Searchbar, f7Next f7Back. best practice wrap f7Next f7Back f7Flex. leftPanel Whether enable left panel. FALSE default. rightPanel Whether enable right panel. FALSE default. targetId f7Tabs id.","code":""},{"path":"/reference/appbar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 appbar — f7Appbar","text":"","code":"if (interactive()) {  library(shiny)  library(shinyMobile)   cities <- names(precip)   shinyApp(    ui = f7Page(      title = \"My app\",      f7Appbar(        f7Flex(f7Back(targetId = \"tabset\"), f7Next(targetId = \"tabset\")),        f7Searchbar(id = \"search1\", inline = TRUE)      ),      f7TabLayout(        navbar = f7Navbar(          title = \"f7Appbar\",          hairline = FALSE,          shadow = TRUE        ),        f7Tabs(          animated = FALSE,          swipeable = TRUE,          id = \"tabset\",          f7Tab(            tabName = \"Tab 1\",            icon = f7Icon(\"envelope\"),            active = TRUE,            \"Text 1\"          ),          f7Tab(            tabName = \"Tab 2\",            icon = f7Icon(\"today\"),            active = FALSE,            \"Text 2\"          ),          f7Tab(            tabName = \"Tab 3\",            icon = f7Icon(\"cloud_upload\"),            active = FALSE,            \"Text 3\"          )        )      )    ),    server = function(input, output) {}  ) }"},{"path":"/reference/authentication.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 login screen — f7Login","title":"Framework7 login screen — f7Login","text":"Provide template authentication f7LoginServer useful server elements fine tune f7Login page. updateF7Login toggles login page.","code":""},{"path":"/reference/authentication.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 login screen — f7Login","text":"","code":"f7Login(..., id, title, label = \"Sign In\", footer = NULL, startOpen = TRUE)  f7LoginServer(input, output, session, ignoreInit = FALSE, trigger = NULL)  updateF7Login(   id,   user = NULL,   password = NULL,   session = shiny::getDefaultReactiveDomain() )"},{"path":"/reference/authentication.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 login screen — f7Login","text":"... Slot inputs like password, text, ... id f7Login unique id. title Login page title. label Login confirm button label. footer Optional footer. startOpen Whether open login page start. Default TRUE. cases interesting set FALSE, instance want authentication specific tab app (See example 2). input Shiny input object. output Shiny output object. session Shiny session object. ignoreInit TRUE, , observeEvent first created/initialized, ignore handlerExpr (second argument), whether otherwise supposed run . default FALSE. trigger Reactive trigger toggle login page state. Useful, one wants set local authentication (specific section). See example 2. user Value user input. password Value password input.","code":""},{"path":"/reference/authentication.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Framework7 login screen — f7Login","text":"function provide backend features. need store credentials database instance.","code":""},{"path":"/reference/authentication.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Framework7 login screen — f7Login","text":"input associated login status, namely input$login. linked action button, 0 application starts. soon button pressed, value incremented might fire observeEvent listening (See example ). Importantly, login page closed text password inputs filled. f7LoginServer contains piece server logic work .","code":""},{"path":"/reference/authentication.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 login screen — f7Login","text":"","code":"if (interactive()) {  # global authentication  library(shiny)  library(shinyMobile)  shinyApp(    ui = f7Page(      title = \"Login module\",      f7SingleLayout(        navbar = f7Navbar(          title = \"Login Example\",          hairline = FALSE,          shadow = TRUE        ),        toolbar = f7Toolbar(          position = \"bottom\",          f7Link(label = \"Link 1\", href = \"https://www.google.com\"),          f7Link(label = \"Link 2\", href = \"https://www.google.com\")        ),        f7Login(id = \"loginPage\", title = \"Welcome\"),        # main content        f7BlockTitle(          title = HTML(paste(\"Welcome\", textOutput(\"user\"))),          size = \"large\"        ) %>% f7Align(\"center\")      )    ),    server = function(input, output, session) {       loginData <- callModule(f7LoginServer, id = \"loginPage\")       output$user <- renderText({       req(loginData$user)       loginData$user()      })    }  )   # section specific authentication  library(shiny)  library(shinyMobile)  shinyApp(    ui = f7Page(      title = \"Local access restriction\",      f7TabLayout(        navbar = f7Navbar(          title = \"Login Example for Specific Section\",          hairline = FALSE,          shadow = TRUE        ),        f7Tabs(          id = \"tabs\",          f7Tab(            tabName = \"Tab 1\",            \"Without authentication\"          ),          f7Tab(            tabName = \"Restricted\",            # main content            f7BlockTitle(              title = HTML(paste(\"Welcome\", textOutput(\"user\"))),              size = \"large\"            ) %>% f7Align(\"center\")          )        ),        f7Login(id = \"loginPage\", title = \"Welcome\", startOpen = FALSE)      )    ),    server = function(input, output, session) {       # trigger      trigger <- reactive({       req(input$tabs)      })       # do not run first since the login page is not yet visible      loginData <- callModule(       f7LoginServer,       id = \"loginPage\",       ignoreInit = TRUE,       trigger = trigger      )       output$user <- renderText({       req(loginData$user)       loginData$user()      })     }  )   # with 2 different protected sections  library(shiny)  library(shinyMobile)  shinyApp(    ui = f7Page(      title = \"Multiple restricted areas\",      f7TabLayout(        navbar = f7Navbar(          title = \"Login Example for 2 Specific Section\",          hairline = FALSE,          shadow = TRUE        ),        f7Tabs(          id = \"tabs\",          f7Tab(            tabName = \"Tab 1\",            \"Without authentication\"          ),          f7Tab(            tabName = \"Restricted\",            # main content            f7BlockTitle(              title = \"1st restricted area\",              size = \"large\"            ) %>% f7Align(\"center\")          ),          f7Tab(            tabName = \"Restricted 2\",            # main content            f7BlockTitle(              title = \"2nd restricted area\",              size = \"large\"            ) %>% f7Align(\"center\")          )        ),        f7Login(id = \"loginPage\", title = \"Welcome\", startOpen = FALSE),        f7Login(id = \"loginPage2\", title = \"Welcome\", startOpen = FALSE)      )    ),    server = function(input, output, session) {       trigger1 <- reactive({        req(input$tabs == \"Restricted\")      })       trigger2 <- reactive({        req(input$tabs == \"Restricted 2\")      })       # do not run first since the login page is not yet visible      callModule(        f7LoginServer,        id = \"loginPage\",        ignoreInit = TRUE,        trigger = trigger1      )       callModule(        f7LoginServer,        id = \"loginPage2\",        ignoreInit = TRUE,        trigger = trigger2      )     }  ) }"},{"path":"/reference/autocomplete.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 autocomplete input — f7AutoComplete","title":"Framework7 autocomplete input — f7AutoComplete","text":"f7AutoComplete generates Framework7 autocomplete input. updateF7AutoComplete changes value autocomplete input client.","code":""},{"path":"/reference/autocomplete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 autocomplete input — f7AutoComplete","text":"","code":"f7AutoComplete(   inputId,   label,   placeholder = NULL,   value = choices[1],   choices,   openIn = c(\"popup\", \"page\", \"dropdown\"),   typeahead = TRUE,   expandInput = TRUE,   closeOnSelect = FALSE,   dropdownPlaceholderText = NULL,   multiple = FALSE,   limit = NULL )  updateF7AutoComplete(   inputId,   value = NULL,   choices = NULL,   session = shiny::getDefaultReactiveDomain() )"},{"path":"/reference/autocomplete.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 autocomplete input — f7AutoComplete","text":"inputId id input object. label Autocomplete label. placeholder Text write container. value New value. choices New set choices. openIn Defines open Autocomplete, can page popup (Standalone) dropdown. typeahead Enables type ahead, prefill input value first item match. openIn \"dropdown\". expandInput TRUE input used item-input List View expanded full screen wide dropdown visible. openIn \"dropdown\". closeOnSelect Set true autocomplete closed user picks value. available multiple enabled. works openIn 'popup' 'page'. dropdownPlaceholderText Specify dropdown placeholder text. openIn \"dropdown\". multiple Whether allow multiple value selection. works openIn 'popup' 'page'. limit Limit number maximum displayed items autocomplete per query session Shiny session object.","code":""},{"path":"/reference/autocomplete.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Framework7 autocomplete input — f7AutoComplete","text":"update choices yet.","code":""},{"path":"/reference/autocomplete.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Framework7 autocomplete input — f7AutoComplete","text":"David Granjon, dgranjon@ymail.com","code":""},{"path":"/reference/autocomplete.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 autocomplete input — f7AutoComplete","text":"","code":"# Autocomplete input if(interactive()){  library(shiny)  library(shinyMobile)   shinyApp(    ui = f7Page(     title = \"My app\",     f7SingleLayout(      navbar = f7Navbar(title = \"f7AutoComplete\"),      f7AutoComplete(       inputId = \"myautocomplete1\",       placeholder = \"Some text here!\",       dropdownPlaceholderText = \"Try to type Apple\",       label = \"Type a fruit name\",       openIn = \"dropdown\",       choices = c('Apple', 'Apricot', 'Avocado', 'Banana', 'Melon',        'Orange', 'Peach', 'Pear', 'Pineapple')      ),      textOutput(\"autocompleteval1\"),      f7AutoComplete(       inputId = \"myautocomplete2\",       placeholder = \"Some text here!\",       openIn = \"popup\",       multiple = TRUE,       label = \"Type a fruit name\",       choices = c('Apple', 'Apricot', 'Avocado', 'Banana', 'Melon',                   'Orange', 'Peach', 'Pear', 'Pineapple')      ),      verbatimTextOutput(\"autocompleteval2\")     )    ),    server = function(input, output) {     observe({      print(input$myautocomplete1)      print(input$myautocomplete2)     })     output$autocompleteval1 <- renderText(input$myautocomplete1)     output$autocompleteval2 <- renderPrint(input$myautocomplete2)    }  ) }  # Update autocomplete if (interactive()) {  library(shiny)  library(shinyMobile)  shinyApp(   ui = f7Page(     title = \"My app\",     f7SingleLayout(       navbar = f7Navbar(title = \"Update autocomplete\"),       f7Card(         f7Button(inputId = \"update\", label = \"Update autocomplete\"),         f7AutoComplete(          inputId = \"myautocomplete\",          placeholder = \"Some text here!\",          openIn = \"dropdown\",          label = \"Type a fruit name\",          choices = c('Apple', 'Apricot', 'Avocado', 'Banana', 'Melon',                      'Orange', 'Peach', 'Pear', 'Pineapple')         ),         verbatimTextOutput(\"autocompleteval\")       )     )   ),   server = function(input, output, session) {      observe({      print(input$myautocomplete)     })      output$autocompleteval <- renderText(input$myautocomplete)      observeEvent(input$update, {       updateF7AutoComplete(         inputId = \"myautocomplete\",         value = \"plip\",         choices = c(\"plip\", \"plap\", \"ploup\")       )     })   }  ) }"},{"path":"/reference/block.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 block — f7Block","title":"Framework7 block — f7Block","text":"f7Block creates block container. f7BlockHeader creates header content f7Block.","code":""},{"path":"/reference/block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 block — f7Block","text":"","code":"f7Block(..., hairlines = TRUE, strong = FALSE, inset = FALSE, tablet = FALSE)  f7BlockHeader(text = NULL)"},{"path":"/reference/block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 block — f7Block","text":"... Block content. Also f7BlockHeader f7BlockFooter. hairlines Whether allow hairlines. TRUE default. strong Whether put text bold. FALSE default. inset Whether set block inset. FALSE default. Works strong TRUE. tablet Whether make block inset large screens. FALSE default. text text.","code":""},{"path":"/reference/block.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Framework7 block — f7Block","text":"David Granjon, dgranjon@ymail.com","code":""},{"path":"/reference/block.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 block — f7Block","text":"","code":"if(interactive()){  library(shiny)  library(shinyMobile)   shinyApp(   ui = f7Page(     title = \"Blocks\",     f7SingleLayout(      navbar = f7Navbar(title = \"f7Block\"),      f7BlockTitle(title = \"A large title\", size = \"large\"),     f7Block(      f7BlockHeader(text = \"Header\"),      \"Here comes paragraph within content block.      Donec et nulla auctor massa pharetra      adipiscing ut sit amet sem. Suspendisse      molestie velit vitae mattis tincidunt.      Ut sit amet quam mollis, vulputate      turpis vel, sagittis felis.\",      f7BlockFooter(text = \"Footer\")     ),      f7BlockTitle(title = \"A medium title\", size = \"medium\"),     f7Block(      strong = TRUE,      f7BlockHeader(text = \"Header\"),      \"Here comes paragraph within content block.      Donec et nulla auctor massa pharetra      adipiscing ut sit amet sem. Suspendisse      molestie velit vitae mattis tincidunt.      Ut sit amet quam mollis, vulputate      turpis vel, sagittis felis.\",      f7BlockFooter(text = \"Footer\")     ),      f7BlockTitle(title = \"A normal title\", size = NULL),     f7Block(      inset = TRUE,      strong = TRUE,      f7BlockHeader(text = \"Header\"),      \"Here comes paragraph within content block.      Donec et nulla auctor massa pharetra      adipiscing ut sit amet sem. Suspendisse      molestie velit vitae mattis tincidunt.      Ut sit amet quam mollis, vulputate      turpis vel, sagittis felis.\",      f7BlockFooter(text = \"Footer\")     ),     f7Block(      tablet = TRUE,      strong = TRUE,      f7BlockHeader(text = \"Header\"),      \"Here comes paragraph within content block.      Donec et nulla auctor massa pharetra      adipiscing ut sit amet sem. Suspendisse      molestie velit vitae mattis tincidunt.      Ut sit amet quam mollis, vulputate      turpis vel, sagittis felis.\",      f7BlockFooter(text = \"Footer\")     ),     f7Block(      inset = TRUE,      strong = TRUE,      hairlines = FALSE,      f7BlockHeader(text = \"Header\"),      \"Here comes paragraph within content block.      Donec et nulla auctor massa pharetra      adipiscing ut sit amet sem. Suspendisse      molestie velit vitae mattis tincidunt.      Ut sit amet quam mollis, vulputate      turpis vel, sagittis felis.\",      f7BlockFooter(text = \"Footer\")     )     )   ),   server = function(input, output) {}  ) }"},{"path":"/reference/button.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 action button — f7Button","title":"Framework7 action button — f7Button","text":"f7Button generates Framework7 action button. updateF7Button updates f7Button.","code":""},{"path":"/reference/button.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 action button — f7Button","text":"","code":"f7Button(   inputId = NULL,   label = NULL,   href = NULL,   color = NULL,   fill = TRUE,   outline = FALSE,   shadow = FALSE,   rounded = FALSE,   size = NULL,   active = FALSE )  updateF7Button(   inputId,   label = NULL,   color = NULL,   fill = NULL,   outline = NULL,   shadow = NULL,   rounded = NULL,   size = NULL,   session = shiny::getDefaultReactiveDomain() )"},{"path":"/reference/button.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 action button — f7Button","text":"inputId input slot used access value. label contents button link–usually text label, also use HTML, like image f7Icon. href Button link. color Button color. compatible outline. See valid colors https://framework7.io/docs/badge.html. fill Fill style. TRUE default. compatible outline outline Outline style. FALSE default. compatible fill. shadow Button shadow. FALSE default. material design. rounded Round style. FALSE default. size Button size. NULL default also \"large\" \"small\". active Button active state. Default FALSE. useful used f7Segment strong parameter set TRUE. session Shiny session object, usually default value suffice.","code":""},{"path":"/reference/button.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Framework7 action button — f7Button","text":"David Granjon, dgranjon@ymail.com","code":""},{"path":"/reference/button.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 action button — f7Button","text":"","code":"if (interactive()) {  library(shiny)  library(shinyMobile)   shiny::shinyApp(   ui = f7Page(     title = \"Update f7Button\",     f7SingleLayout(       navbar = f7Navbar(title = \"Update f7Button\"),       f7Button(         \"test\",         \"Test\",         color = \"orange\",         outline = FALSE,         fill = TRUE,         shadow = FALSE,         rounded = FALSE,         size = NULL),       f7Toggle(\"prout\", \"Update Button\")     )   ),   server = function(input, output, session) {     observe(print(input$test))     observeEvent(input$prout, {       if (input$prout) {         updateF7Button(           inputId = \"test\",           label = \"Updated\",           color = \"purple\",           shadow = TRUE,           rounded = TRUE,           size = \"large\"         )       }     })   }  ) }"},{"path":"/reference/card.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 card — f7Card","title":"Framework7 card — f7Card","text":"f7Card creates simple card container. f7SocialCard special card social content. f7ExpandableCard card can expand. Ideal gallery. updateF7Card maximizes f7ExpandableCard client.","code":""},{"path":"/reference/card.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 card — f7Card","text":"","code":"f7Card(   ...,   image = NULL,   title = NULL,   footer = NULL,   outline = FALSE,   height = NULL )  f7SocialCard(..., image = NULL, author = NULL, date = NULL, footer = NULL)  f7ExpandableCard(   ...,   id = NULL,   title = NULL,   subtitle = NULL,   color = NULL,   image = NULL,   fullBackground = FALSE )  updateF7Card(id, session = shiny::getDefaultReactiveDomain())"},{"path":"/reference/card.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 card — f7Card","text":"... Card content. image Card background image url. Tje JPG format prefered. compatible color argument. title Card title. footer Footer content, . Must wrapped tagList. outline Outline style. FALSE default. height Card height. NULL default. author Author. date Date. id Card id. subtitle Card subtitle. color Card background color. See https://framework7.io/docs/cards.html. compatible img argument. fullBackground Whether image cover entire card. session Shiny session object.","code":""},{"path":"/reference/card.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Framework7 card — f7Card","text":"f7ExpandableCard, image color compatible. Choose one .","code":""},{"path":"/reference/card.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Framework7 card — f7Card","text":"David Granjon, dgranjon@ymail.com","code":""},{"path":"/reference/card.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 card — f7Card","text":"","code":"# Simple card if(interactive()){  library(shiny)  library(shinyMobile)   shinyApp(   ui = f7Page(     title = \"Cards\",     f7SingleLayout(      navbar = f7Navbar(title = \"f7Card\"),      f7Card(\"This is a simple card with plain text,     but cards can also contain their own header,     footer, list view, image, or any other element.\"),     f7Card(      title = \"Card header\",      \"This is a simple card with plain text,      but cards can also contain their own header,      footer, list view, image, or any other element.\",      footer = tagList(       f7Button(color = \"blue\", label = \"My button\"),       f7Badge(\"Badge\", color = \"green\")      )     ),     f7Card(      title = \"Card header\",      image = \"https://loremflickr.com/320/240\",      \"This is a simple card with plain text,      but cards can also contain their own header,      footer, list view, image, or any other element.\",      footer = tagList(       f7Button(color = \"blue\", label = \"My button\"),       f7Badge(\"Badge\", color = \"green\")      )     )     )   ),   server = function(input, output) {}  ) }  # Social card if(interactive()){  library(shiny)  library(shinyMobile)   shinyApp(   ui = f7Page(     title = \"Social Card\",     f7SingleLayout(      navbar = f7Navbar(title = \"f7SocialCard\"),      f7SocialCard(      image = \"https://loremflickr.com/g/320/240/paris\",      author = \"John Doe\",      date = \"Monday at 3:47 PM\",      \"What a nice photo i took yesterday!\",      img(src = \"https://loremflickr.com/g/320/240/paris\", width = \"100%\"),      footer = tagList(       f7Badge(\"1\", color = \"yellow\"),       f7Badge(\"2\", color = \"green\"),       f7Badge(\"3\", color = \"blue\")      )     )     )   ),   server = function(input, output) {}  ) }  # Expandable card if(interactive()){  library(shiny)  library(shinyMobile)   shinyApp(   ui = f7Page(     title = \"Expandable Cards\",     f7SingleLayout(       navbar = f7Navbar(        title = \"Expandable Cards\",        hairline = FALSE,        shadow = TRUE       ),       f7ExpandableCard(        id = \"card1\",        title = \"Expandable Card 1\",        color = \"blue\",        subtitle = \"Click on me pleaaaaase\",        \"Framework7 - is a free and open source HTML mobile framework        to develop hybrid mobile apps or web apps with iOS or Android        native look and feel. It is also an indispensable prototyping apps tool        to show working app prototype as soon as possible in case you need to.\"       ),       f7ExpandableCard(        id = \"card2\",        title = \"Expandable Card 2\",        color = \"green\",        \"Framework7 - is a free and open source HTML mobile framework        to develop hybrid mobile apps or web apps with iOS or Android        native look and feel. It is also an indispensable prototyping apps tool        to show working app prototype as soon as possible in case you need to.\"       ),       f7ExpandableCard(        id = \"card3\",        title = \"Expandable Card 3\",        image = \"https://i.pinimg.com/originals/73/38/6e/73386e0513d4c02a4fbb814cadfba655.jpg\",        \"Framework7 - is a free and open source HTML mobile framework         to develop hybrid mobile apps or web apps with iOS or Android         native look and feel. It is also an indispensable prototyping apps tool         to show working app prototype as soon as possible in case you need to.\"       ),       f7ExpandableCard(        id = \"card4\",        title = \"Expandable Card 4\",        fullBackground = TRUE,        image = \"https://i.ytimg.com/vi/8q_kmxwK5Rg/maxresdefault.jpg\",        \"Framework7 - is a free and open source HTML mobile framework               to develop hybrid mobile apps or web apps with iOS or Android               native look and feel. It is also an indispensable prototyping apps tool               to show working app prototype as soon as possible in case you need to.\"       )     )   ),   server = function(input, output) {}  ) }  # Update expandable card if (interactive()) {  library(shiny)  library(shinyMobile)   shinyApp(    ui = f7Page(      title = \"Expandable Cards\",      f7SingleLayout(        navbar = f7Navbar(          title = \"Expandable Cards\",          hairline = FALSE,          shadow = TRUE        ),        f7ExpandableCard(          id = \"card1\",          title = \"Expandable Card 1\",          image = \"https://i.pinimg.com/originals/73/38/6e/73386e0513d4c02a4fbb814cadfba655.jpg\",          \"Framework7 - is a free and open source HTML mobile framework          to develop hybrid mobile apps or web apps with iOS or Android          native look and feel. It is also an indispensable prototyping apps tool          to show working app prototype as soon as possible in case you need to.\"        ),         hr(),        f7BlockTitle(title = \"Click below to expand the card!\") %>% f7Align(side = \"center\"),        f7Button(inputId = \"go\", label = \"Go\"),        br(),        f7ExpandableCard(          id = \"card2\",          title = \"Expandable Card 2\",          fullBackground = TRUE,          image = \"https://cdn.pixabay.com/photo/2017/10/03/18/55/mountain-2813667_960_720.png\",          \"Framework7 - is a free and open source HTML mobile framework                to develop hybrid mobile apps or web apps with iOS or Android                native look and feel. It is also an indispensable prototyping apps tool                to show working app prototype as soon as possible in case you need to.\"        )      )    ),    server = function(input, output, session) {       observeEvent(input$go, {        updateF7Card(id = \"card2\")      })       observe({        list(          print(input$card1),          print(input$card2)        )      })    }  ) }"},{"path":"/reference/checkbox.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 checkbox — f7Checkbox","title":"Framework7 checkbox — f7Checkbox","text":"f7Checkbox creates checkbox input. updateF7Checkbox changes value checkbox input client.","code":""},{"path":"/reference/checkbox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 checkbox — f7Checkbox","text":"","code":"f7Checkbox(inputId, label, value = FALSE)  updateF7Checkbox(   inputId,   label = NULL,   value = NULL,   session = shiny::getDefaultReactiveDomain() )"},{"path":"/reference/checkbox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 checkbox — f7Checkbox","text":"inputId id input object. label label set input object. value value set input object. session Shiny session object.","code":""},{"path":"/reference/checkbox.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 checkbox — f7Checkbox","text":"","code":"if(interactive()){  library(shiny)  library(shinyMobile)   shinyApp(    ui = f7Page(     title = \"My app\",     f7SingleLayout(      navbar = f7Navbar(title = \"f7Checkbox\"),      f7Card(       f7Checkbox(        inputId = \"check\",        label = \"Checkbox\",        value = FALSE       ),       verbatimTextOutput(\"test\")      )     )    ),    server = function(input, output) {     output$test <- renderPrint({input$check})    }  ) } if (interactive()) {  library(shiny)  library(shinyMobile)   ui <- f7Page(    f7SingleLayout(     navbar = f7Navbar(title = \"updateF7CheckBox\"),     f7Slider(      inputId = \"controller\",      label = \"Number of observations\",      max = 10,      min = 0,      value = 1,      step = 1,      scale = TRUE     ),     f7checkBox(      inputId = \"check\",      label = \"Checkbox\"     )    )  )   server <- function(input, output, session) {    observe({      # TRUE if input$controller is odd, FALSE if even.      x_even <- input$controller %% 2 == 1       if (x_even) {       showNotification(        id = \"notif\",        paste(\"The slider is \", input$controller, \"and the checkbox is\", input$check),        duration = NULL,        type = \"warning\"       )      } else {       removeNotification(\"notif\")      }       updateF7Checkbox(\"check\", value = x_even)    })  }  shinyApp(ui, server) }"},{"path":"/reference/checkboxgroup.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 checkbox group — f7CheckboxGroup","title":"Framework7 checkbox group — f7CheckboxGroup","text":"f7CheckboxGroup creates checkbox group input","code":""},{"path":"/reference/checkboxgroup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 checkbox group — f7CheckboxGroup","text":"","code":"f7CheckboxGroup(inputId, label, choices = NULL, selected = NULL)"},{"path":"/reference/checkboxgroup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 checkbox group — f7CheckboxGroup","text":"inputId Checkbox group input. label Checkbox group label. choices Checkbox group choices. selected Checkbox group selected value.","code":""},{"path":"/reference/checkboxgroup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 checkbox group — f7CheckboxGroup","text":"","code":"if(interactive()){   library(shiny)   library(shinyMobile)    shiny::shinyApp(     ui = f7Page(      title = \"My app\",      f7SingleLayout(       navbar = f7Navbar(title = \"f7CheckboxGroup\"),       f7CheckboxGroup(        inputId = \"variable\",        label = \"Choose a variable:\",        choices = colnames(mtcars)[-1],        selected = NULL       ),       tableOutput(\"data\")      )     ),     server = function(input, output) {      output$data <- renderTable({       mtcars[, c(\"mpg\", input$variable), drop = FALSE]       }, rownames = TRUE)     }   )  }"},{"path":"/reference/class2f7.html","id":null,"dir":"Reference","previous_headings":"","what":"Get CSS class based on cell class — class2f7","title":"Get CSS class based on cell class — class2f7","text":"Get CSS class based cell class","code":""},{"path":"/reference/class2f7.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get CSS class based on cell class — class2f7","text":"","code":"class2f7(x)"},{"path":"/reference/class2f7.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get CSS class based on cell class — class2f7","text":"x Value.","code":""},{"path":"/reference/createRadioOptions.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates a list of option for f7Radio — createRadioOptions","title":"Generates a list of option for f7Radio — createRadioOptions","text":"Generates list option f7Radio","code":""},{"path":"/reference/createRadioOptions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates a list of option for f7Radio — createRadioOptions","text":"","code":"createRadioOptions(choices, selected, inputId)"},{"path":"/reference/createRadioOptions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates a list of option for f7Radio — createRadioOptions","text":"choices List choices. selected Selected value inputId Radio input id.","code":""},{"path":"/reference/createSelectOptions.html","id":null,"dir":"Reference","previous_headings":"","what":"Create option html tag based on choice input — createSelectOptions","title":"Create option html tag based on choice input — createSelectOptions","text":"Used f7SmartSelect f7Select","code":""},{"path":"/reference/createSelectOptions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create option html tag based on choice input — createSelectOptions","text":"","code":"createSelectOptions(choices, selected)"},{"path":"/reference/createSelectOptions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create option html tag based on choice input — createSelectOptions","text":"choices Vector possibilities. selected Default selected value.","code":""},{"path":"/reference/create_app_link.html","id":null,"dir":"Reference","previous_headings":"","what":"Create shinylive iframe — create_app_link","title":"Create shinylive iframe — create_app_link","text":"Create shinylive iframe","code":""},{"path":"/reference/create_app_link.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create shinylive iframe — create_app_link","text":"","code":"create_app_link(app_code, mode = c(\"app\", \"editor\"), header = TRUE)"},{"path":"/reference/create_app_link.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create shinylive iframe — create_app_link","text":"app_code base64 app code. can create https://shinylive.io/r writing code click share copy link. code located end url. mode display shinylive app. Default app mode. header Whether display shinylive header. Default TRUE.","code":""},{"path":"/reference/create_app_ui.html","id":null,"dir":"Reference","previous_headings":"","what":"Create the app UI — create_app_ui","title":"Create the app UI — create_app_ui","text":"Create app UI","code":""},{"path":"/reference/create_app_ui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create the app UI — create_app_ui","text":"","code":"create_app_ui(iframe, device, color, landscape)"},{"path":"/reference/create_app_ui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create the app UI — create_app_ui","text":"iframe iframe tag designed preview_mobile. device See preview_mobile input. color See preview_mobile input. landscape See preview_mobile input.","code":""},{"path":"/reference/datepicker.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 date picker — f7DatePicker","title":"Framework7 date picker — f7DatePicker","text":"f7DatePicker creates Framework7 date picker input. updateF7DatePicker changes value date picker input client.","code":""},{"path":"/reference/datepicker.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 date picker — f7DatePicker","text":"","code":"f7DatePicker(   inputId,   label,   value = NULL,   multiple = FALSE,   direction = c(\"horizontal\", \"vertical\"),   minDate = NULL,   maxDate = NULL,   dateFormat = \"yyyy-mm-dd\",   openIn = c(\"auto\", \"popover\", \"sheet\", \"customModal\"),   scrollToInput = FALSE,   closeByOutsideClick = TRUE,   toolbar = TRUE,   toolbarCloseText = \"Done\",   header = FALSE,   headerPlaceholder = \"Select date\" )  updateF7DatePicker(   inputId,   value = NULL,   ...,   session = shiny::getDefaultReactiveDomain() )"},{"path":"/reference/datepicker.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 date picker — f7DatePicker","text":"inputId id input object. label Input label. value new value input. multiple TRUE allow select multiple dates. direction Months layout direction, 'horizontal' 'vertical'. minDate Minimum allowed date. maxDate Maximum allowed date. dateFormat Date format: \"yyyy-mm-dd\", instance. openIn Can auto, popover (open calendar popover), sheet (open sheet modal) customModal (open custom Calendar modal overlay). case auto open sheet modal small screens popover large screens. scrollToInput Scroll viewport (page-content) input calendar opened. closeByOutsideClick enabled, picker closed clicking outside picker related input element. toolbar Enables calendar toolbar. toolbarCloseText Text Done/Close toolbar button. header Enables calendar header. headerPlaceholder Default calendar header placeholder text. ... Parameters used update date picker, use arguments f7DatePicker. session Shiny session object, usually default value suffice.","code":""},{"path":"/reference/datepicker.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Framework7 date picker — f7DatePicker","text":"Date vector.","code":""},{"path":"/reference/datepicker.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 date picker — f7DatePicker","text":"","code":"# Date picker if (interactive()) {   library(shiny)   library(shinyMobile)    shinyApp(     ui = f7Page(       title = \"My app\",       f7SingleLayout(         navbar = f7Navbar(title = \"f7DatePicker\"),         f7DatePicker(           inputId = \"date\",           label = \"Choose a date\",           value = \"2019-08-24\"         ),         \"The selected date is\",         verbatimTextOutput(\"selectDate\"),         f7DatePicker(           inputId = \"multipleDates\",           label = \"Choose multiple dates\",           value = Sys.Date() + 0:3,           multiple = TRUE         ),         \"The selected date is\",         verbatimTextOutput(\"selectMultipleDates\"),         f7DatePicker(           inputId = \"default\",           label = \"Choose a date\",           value = NULL         ),         \"The selected date is\",         verbatimTextOutput(\"selectDefault\")       )     ),     server = function(input, output, session) {        output$selectDate <- renderPrint(input$date)       output$selectMultipleDates <- renderPrint(input$multipleDates)       output$selectDefault <- renderPrint(input$default)      }   ) } # Update date picker if (interactive()) {   library(shiny)   library(shinyMobile)    shinyApp(     ui = f7Page(       title = \"My app\",       f7SingleLayout(         navbar = f7Navbar(title = \"Update date picker\"),         f7Card(           f7Button(inputId = \"selectToday\", label = \"Select today\"),           f7Button(inputId = \"rmToolbar\", label = \"Remove toolbar\"),           f7Button(inputId = \"addToolbar\", label = \"Add toolbar\"),           f7DatePicker(             inputId = \"mypicker\",             label = \"Choose a date\",             value = Sys.Date() - 7,             openIn = \"auto\",             direction = \"horizontal\"           ),           verbatimTextOutput(\"pickerval\")         )       )     ),     server = function(input, output, session) {        output$pickerval <- renderPrint(input$mypicker)        observeEvent(input$selectToday, {         updateF7DatePicker(           inputId = \"mypicker\",           value = Sys.Date()         )       })        observeEvent(input$rmToolbar, {         updateF7DatePicker(           inputId = \"mypicker\",           toolbar = FALSE,           dateFormat = \"yyyy-mm-dd\" # preserve date format         )       })        observeEvent(input$addToolbar, {         updateF7DatePicker(           inputId = \"mypicker\",           toolbar = TRUE,           dateFormat = \"yyyy-mm-dd\" # preserve date format         )       })      }   ) }"},{"path":"/reference/f7-deprecated.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated functions — f7checkBox","title":"Deprecated functions — f7checkBox","text":"f7checkBox creates checkbox input. Use f7Checkbox instead. f7checkBoxGroup creates checkbox group input. Use f7CheckboxGroup instead removeF7Tab removes f7Tab f7Tabs. Use removeF7Tab instead f7ValidateInput validates given shinyMobile input. Use validateF7Input instead f7AddMessages adds messages f7Messages container. Use updateF7Messages instead f7HideNavbar hides f7Navbar component server. Use updateF7Navbar instead. f7ShowNavbar shows f7Navbar component server. Use updateF7Navbar instead. f7Popover deprecated. used oberve observeEvent context. works input elements! f7PopoverTarget deprecated. must used combination f7Popover. works input elements! f7ShowPreloader shows preloader. Use showF7Preloader instead hideF7Preloader hides preloader. Use f7HidePreloader instead create_manifest creates manifest shiny App. Please use workflow instead: https://unleash-shiny.rinterface.com/mobile-pwa.html#charpente--pwa-tools.","code":""},{"path":"/reference/f7-deprecated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated functions — f7checkBox","text":"","code":"f7checkBox(inputId, label, value = FALSE)  f7checkBoxGroup(inputId, label, choices = NULL, selected = NULL)  f7InsertTab(   id,   tab,   target,   position = c(\"before\", \"after\"),   select = FALSE,   session = shiny::getDefaultReactiveDomain() )  f7RemoveTab(id, target, session = shiny::getDefaultReactiveDomain())  f7ValidateInput(   inputId,   info = NULL,   pattern = NULL,   error = NULL,   session = shiny::getDefaultReactiveDomain() )  f7AddMessages(   id,   messages,   showTyping = FALSE,   session = shiny::getDefaultReactiveDomain() )  f7HideNavbar(   animate = TRUE,   hideStatusbar = FALSE,   session = shiny::getDefaultReactiveDomain() )  f7ShowNavbar(animate = TRUE, session = shiny::getDefaultReactiveDomain())  f7Popover(targetId, content, session = shiny::getDefaultReactiveDomain())  f7PopoverTarget(tag, targetId)  f7ShowPreloader(   target = NULL,   color = NULL,   session = shiny::getDefaultReactiveDomain() )  hideF7Preloader(target = NULL, session = shiny::getDefaultReactiveDomain())  create_manifest(   path,   name = \"My App\",   shortName = \"My App\",   description = \"What it does!\",   lang = \"en-US\",   startUrl,   display = c(\"minimal-ui\", \"standalone\", \"fullscreen\", \"browser\"),   background_color = \"#000000\",   theme_color = \"#0000ffff\",   icon )"},{"path":"/reference/f7-deprecated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deprecated functions — f7checkBox","text":"inputId Input validate. id f7Tabs id. tab f7Tab insert. target f7Tab new tab inserted. position Insert : c(\"\", \"\"). select Whether select newly inserted tab. FALSE default. session shiny session. info Additional text display input field. pattern Pattern validation. Regex. error Error text. messages List f7Messages. showTyping Show typing new message comes. Default FALSE. work yet... animate Whether hidden animation . default TRUE. hideStatusbar FALSE (default) hides navbar partially keeping space required cover statusbar area. Otherwise, navbar fully hidden. targetId Popover id. Must correspond f7Popover targetId. content Popover content. tag Tag targeted. Must f7Input element. color Preloader color. path package path. name App name. shortName App short name. description App description lang App language (en-US default). startUrl Page open start. display Display mode. Choose among c(\"minimal-ui\", \"standalone\", \"fullscreen\", \"browser\"). practice, want standalone mode app looks like native app. background_color background_color property used splash screen application first launched. theme_color theme_color sets color tool bar, may reflected app's preview task switchers. icon Dataframe containing icon specs. src gives icon path (www folder instance), sizes gives size types type.","code":""},{"path":"/reference/f7-deprecated.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deprecated functions — f7checkBox","text":"function creates www folder shiny app. Must specify path. creates 1 folders contain icons manifest.json file.","code":""},{"path":"/reference/f7-deprecated.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Deprecated functions — f7checkBox","text":"See https://developer.mozilla.org/en-US/docs/Web/Manifest informations.","code":""},{"path":"/reference/f7-deprecated.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Deprecated functions — f7checkBox","text":"","code":"if (interactive()) {  library(shiny)  library(shinyMobile)   shinyApp(     ui = f7Page(        title = \"Hide navbar\",        f7SingleLayout(           navbar = f7Navbar(\"Hide/Show navbar\"),           f7Segment(              f7Button(inputId = \"hide\", \"Hide navbar\", color = \"red\"),              f7Button(inputId = \"show\", \"Show navbar\", color = \"green\"),           )        )     ),     server = function(input, output, session) {         observeEvent(input$hide, {           f7HideNavbar()        })         observeEvent(input$show, {           f7ShowNavbar()        })     }  ) } if (interactive()) {  library(shiny)  library(shinyMobile)  shinyApp(    ui = f7Page(      title = \"f7Popover\",      f7SingleLayout(        navbar = f7Navbar(title = \"f7Popover\"),        f7PopoverTarget(          f7Button(            inputId = \"goButton\",            \"Go!\"          ),          targetId = \"test\"        ),        br(),        br(),        f7PopoverTarget(          f7Slider(            inputId = \"slider\",            label = \"Value\",            value = 10,            min = 0,            max = 20          ),          targetId = \"test2\"        )      )    ),    server = function(input, output, session) {      observe({        f7Popover(          targetId = \"test\",          content = \"This is a f7Button\"        )      })       observe({        f7Popover(          targetId = \"test2\",          content = \"This is a f7Slider\"        )      })    }  ) } create_manifest(   path = tempdir(),   name = \"My App\",   shortName = \"My App\",   description = \"What it does!\",   lang = \"en-US\",   startUrl = \"https://www.google.com/\",   display = \"standalone\",   background_color = \"#3367D6\",   theme_color = \"#3367D6\",   icon = data.frame(     src = \"icons/128x128.png\",     sizes = \"128x128\", 10,     types = \"image/png\"   ) ) #> Warning: create_manifest will be removed in future release. Please use #>     the workflow described at https://unleash-shiny.rinterface.com/mobile-pwa.html#charpente-and-pwa-tools instead. #> { #>   \"name\": \"My App\", #>   \"short_name\": \"My App\", #>   \"description\": \"What it does!\", #>   \"lang\": \"en-US\", #>   \"start_url\": \"https://www.google.com/\", #>   \"display\": \"standalone\", #>   \"background_color\": \"#3367D6\", #>   \"theme_color\": \"#3367D6\", #>   \"icon\": [ #>     { #>       \"src\": \"icons/128x128.png\", #>       \"sizes\": \"128x128\", #>       \"X10\": 10, #>       \"types\": \"image/png\" #>     } #>   ] #> }"},{"path":"/reference/f7Align.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 align utility — f7Align","title":"Framework7 align utility — f7Align","text":"f7Align alignment utility items.","code":""},{"path":"/reference/f7Align.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 align utility — f7Align","text":"","code":"f7Align(tag, side = c(\"left\", \"center\", \"right\", \"justify\"))"},{"path":"/reference/f7Align.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 align utility — f7Align","text":"tag Tag align. side Side align: \"left\", \"center\", \"right\" \"justify\".","code":""},{"path":"/reference/f7Align.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Framework7 align utility — f7Align","text":"David Granjon, dgranjon@ymail.com","code":""},{"path":"/reference/f7Align.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 align utility — f7Align","text":"","code":"if(interactive()){  library(shiny)  library(shinyMobile)   shinyApp(    ui = f7Page(     title = \"Align\",     f7SingleLayout(      navbar = f7Navbar(title = \"f7Align\"),      f7Row(       f7Align(h1(\"Left\"), side = \"left\"),       f7Align(h1(\"Center\"), side = \"center\"),       f7Align(h1(\"Right\"), side = \"right\")      )     )    ),    server = function(input, output) {}  ) }"},{"path":"/reference/f7Badge.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 badge — f7Badge","title":"Framework7 badge — f7Badge","text":"Container highlight important information color.","code":""},{"path":"/reference/f7Badge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 badge — f7Badge","text":"","code":"f7Badge(..., color = NULL)"},{"path":"/reference/f7Badge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 badge — f7Badge","text":"... Badge content. Avoid long text. color Badge color: see valid colors https://framework7.io/docs/badge.html.","code":""},{"path":"/reference/f7Badge.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Framework7 badge — f7Badge","text":"David Granjon, dgranjon@ymail.com","code":""},{"path":"/reference/f7Badge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 badge — f7Badge","text":"","code":"if(interactive()){  library(shiny)  library(shinyMobile)   colors <- getF7Colors()   shinyApp(    ui = f7Page(      title = \"Badges\",      f7SingleLayout(        navbar = f7Navbar(title = \"f7Badge\"),        f7Block(          strong = TRUE,          lapply(seq_along(colors), function(i) {            f7Badge(colors[[i]], color = colors[[i]])          })        )      )    ),    server = function(input, output) {}  ) }"},{"path":"/reference/f7BlockFooter.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 block footer — f7BlockFooter","title":"Framework7 block footer — f7BlockFooter","text":"f7BlockFooter creates footer content f7Block.","code":""},{"path":"/reference/f7BlockFooter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 block footer — f7BlockFooter","text":"","code":"f7BlockFooter(text = NULL)"},{"path":"/reference/f7BlockFooter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 block footer — f7BlockFooter","text":"text text.","code":""},{"path":"/reference/f7BlockFooter.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Framework7 block footer — f7BlockFooter","text":"David Granjon, dgranjon@ymail.com","code":""},{"path":"/reference/f7BlockTitle.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 block title — f7BlockTitle","title":"Framework7 block title — f7BlockTitle","text":"f7BlockTitle creates title f7Block.","code":""},{"path":"/reference/f7BlockTitle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 block title — f7BlockTitle","text":"","code":"f7BlockTitle(title = NULL, size = NULL)"},{"path":"/reference/f7BlockTitle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 block title — f7BlockTitle","text":"title Block title. size Block title size. NULL default \"medium\", \"large\".","code":""},{"path":"/reference/f7BlockTitle.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Framework7 block title — f7BlockTitle","text":"David Granjon, dgranjon@ymail.com","code":""},{"path":"/reference/f7Chip.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 chips — f7Chip","title":"Framework7 chips — f7Chip","text":"f7Chip improved badge container.","code":""},{"path":"/reference/f7Chip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 chips — f7Chip","text":"","code":"f7Chip(   label = NULL,   image = NULL,   icon = NULL,   outline = FALSE,   status = NULL,   iconStatus = NULL,   closable = FALSE )"},{"path":"/reference/f7Chip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 chips — f7Chip","text":"label Chip label. image Chip image, . icon Icon, . IOS Material icons available. outline Whether outline chip. FALSE default. status Chip color: see valid colors https://framework7.io/docs/chips.html. iconStatus Chip icon color: see valid colors https://framework7.io/docs/chips.html. closable Whether close chip. FALSE default.","code":""},{"path":"/reference/f7Chip.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Framework7 chips — f7Chip","text":"David Granjon, dgranjon@ymail.com","code":""},{"path":"/reference/f7Chip.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 chips — f7Chip","text":"","code":"if(interactive()){  library(shiny)  library(shinyMobile)   shinyApp(   ui = f7Page(     title = \"Chips\",     f7SingleLayout(       navbar = f7Navbar(title = \"f7Chip\"),       f7Block(         strong = TRUE,         f7Chip(label = \"simple Chip\"),         f7Chip(label = \"outline Chip\", outline = TRUE),         f7Chip(label = \"icon Chip\", icon = f7Icon(\"plus_circle_fill\"), iconStatus = \"pink\"),         f7Chip(label = \"image Chip\", image = \"https://loremflickr.com/g/320/240/london\"),         f7Chip(label = \"closable Chip\", closable = TRUE),         f7Chip(label = \"colored Chip\", status = \"green\"),         f7Chip(label = \"colored outline Chip\", status = \"green\", outline = TRUE)       )     )   ),   server = function(input, output) {}  ) }"},{"path":"/reference/f7Col.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 column container — f7Col","title":"Framework7 column container — f7Col","text":"Build Framework7 column container","code":""},{"path":"/reference/f7Col.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 column container — f7Col","text":"","code":"f7Col(...)"},{"path":"/reference/f7Col.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 column container — f7Col","text":"... Column content. width automatically handled depending number columns.","code":""},{"path":"/reference/f7Col.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Framework7 column container — f7Col","text":"dark theme work items embedded column. Use f7Flex instead.","code":""},{"path":"/reference/f7Col.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Framework7 column container — f7Col","text":"David Granjon, dgranjon@ymail.com","code":""},{"path":"/reference/f7ColorPicker.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Framework7 color picker input — f7ColorPicker","title":"Create a Framework7 color picker input — f7ColorPicker","text":"Create Framework7 color picker input","code":""},{"path":"/reference/f7ColorPicker.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Framework7 color picker input — f7ColorPicker","text":"","code":"f7ColorPicker(   inputId,   label,   value = \"#ff0000\",   placeholder = NULL,   modules = f7ColorPickerModules,   palettes = f7ColorPickerPalettes,   sliderValue = TRUE,   sliderValueEditable = TRUE,   sliderLabel = TRUE,   hexLabel = TRUE,   hexValueEditable = TRUE,   groupedModules = TRUE )"},{"path":"/reference/f7ColorPicker.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Framework7 color picker input — f7ColorPicker","text":"inputId Color picker input. label Color picker label. value Color picker value. hex, rgb, hsl, hsb, alpha, hue, rgba, hsla supported. placeholder Color picker placeholder. modules Picker color modules. Choose least one. palettes Picker color predefined palettes. Must list color vectors, value specified HEX string. sliderValue enabled, display sliders values. sliderValueEditable enabled, display sliders values <input> elements edit directly. sliderLabel enabled, display sliders labels text. hexLabel enabled, display HEX module label text, e.g. HEX. hexValueEditable enabled, display HEX module value <input> element edit directly. groupedModules enabled add exposure sliders modules make look separated.","code":""},{"path":"/reference/f7ColorPicker.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Framework7 color picker input — f7ColorPicker","text":"","code":"if (interactive()) {  library(shiny)  library(shinyMobile)   shinyApp(    ui = f7Page(      title = \"My app\",      f7SingleLayout(        navbar = f7Navbar(title = \"f7ColorPicker\"),        f7ColorPicker(          inputId = \"mycolorpicker\",          placeholder = \"Some text here!\",          label = \"Select a color\"        ),        \"The picker value is:\",        textOutput(\"colorPickerVal\")      )    ),    server = function(input, output) {      output$colorPickerVal <- renderText(input$mycolorpicker)    }  ) }"},{"path":"/reference/f7Dialog.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 dialog window — f7Dialog","title":"Framework7 dialog window — f7Dialog","text":"f7Dialog generates modal window.","code":""},{"path":"/reference/f7Dialog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 dialog window — f7Dialog","text":"","code":"f7Dialog(   id = NULL,   title = NULL,   text,   type = c(\"alert\", \"confirm\", \"prompt\", \"login\"),   session = shiny::getDefaultReactiveDomain() )"},{"path":"/reference/f7Dialog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 dialog window — f7Dialog","text":"id Input associated alert. Works type one \"confirm\", \"prompt\" \"login\". title Dialog title text Dialog text. type Dialog type: c(\"alert\", \"confirm\", \"prompt\", \"login\"). session shiny session.","code":""},{"path":"/reference/f7Dialog.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 dialog window — f7Dialog","text":"","code":"# simple alert if (interactive()) {   library(shiny)   library(shinyMobile)   shinyApp(     ui = f7Page(       title = \"Simple Dialog\",       f7SingleLayout(         navbar = f7Navbar(title = \"f7Dialog\"),         f7Button(inputId = \"goButton\", \"Go!\")       )     ),     server = function(input, output, session) {       observeEvent(input$goButton,{         f7Dialog(          title = \"Dialog title\",          text = \"This is an alert dialog\"         )       })     }   ) } # confirm alert if (interactive()) {  library(shiny)  library(shinyMobile)  shinyApp(    ui = f7Page(      title = \"Confirm Dialog\",      f7SingleLayout(        navbar = f7Navbar(title = \"f7Dialog\"),        f7Button(inputId = \"goButton\", \"Go!\")      )    ),    server = function(input, output, session) {       observeEvent(input$goButton,{        f7Dialog(          id = \"test\",          title = \"Dialog title\",          type = \"confirm\",          text = \"This is an alert dialog\"        )      })       observeEvent(input$test, {        f7Toast(text = paste(\"Alert input is:\", input$test))      })     }  ) } # prompt dialog if (interactive()) {  library(shiny)  library(shinyMobile)  shinyApp(    ui = f7Page(      title = \"Prompt Dialog\",      f7SingleLayout(        navbar = f7Navbar(title = \"f7Dialog\"),        f7Button(inputId = \"goButton\", \"Go!\"),        uiOutput(\"res\")      )    ),    server = function(input, output, session) {       observe({        print(input$prompt)      })       observeEvent(input$goButton,{        f7Dialog(          id = \"prompt\",          title = \"Dialog title\",          type = \"prompt\",          text = \"This is a prompt dialog\"        )      })       output$res <- renderUI(f7BlockTitle(title = input$prompt, size = \"large\"))    }  ) }  # login dialog if (interactive()) {  library(shiny)  library(shinyMobile)  shinyApp(    ui = f7Page(      title = \"Login Dialog\",      f7SingleLayout(        navbar = f7Navbar(title = \"f7Dialog\"),        f7Button(inputId = \"goButton\", \"Go!\"),        uiOutput(\"ui\")      )    ),    server = function(input, output, session) {       observe({        print(input$login)      })       observeEvent(input$goButton,{        f7Dialog(          id = \"login\",          title = \"Dialog title\",          type = \"login\",          text = \"This is an login dialog\"        )      })       output$ui <- renderUI({        req(input$login$user == \"David\" & input$login$password == \"prout\")        img(src = \"https://media2.giphy.com/media/12gfL8Xxrhv7C1fXiV/giphy.gif\")      })    }  ) }"},{"path":"/reference/f7DownloadButton.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a download button — f7DownloadButton","title":"Create a download button — f7DownloadButton","text":"Use functions create download button; clicked, initiate browser download. filename contents specified corresponding shiny downloadHandler() defined server function.","code":""},{"path":"/reference/f7DownloadButton.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a download button — f7DownloadButton","text":"","code":"f7DownloadButton(outputId, label = \"Download\", class = NULL, ...)"},{"path":"/reference/f7DownloadButton.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a download button — f7DownloadButton","text":"outputId name output slot downloadHandler assigned . label label appear button. class Additional CSS classes apply tag, . ... arguments pass container tag function.","code":""},{"path":"/reference/f7DownloadButton.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a download button — f7DownloadButton","text":"","code":"if (interactive()) {  library(shiny)  library(shinyMobile)  ui = f7Page(   f7SingleLayout(     navbar = f7Navbar(title = \"File handling\"),     f7DownloadButton(\"download\",\"Download!\")   )  )   server = function(input, output, session) {    # Our dataset    data <- mtcars     output$download = downloadHandler(      filename = function() {        paste(\"data-\", Sys.Date(), \".csv\", sep=\"\")      },      content = function(file) {        write.csv(data, file)      }    )  }   shinyApp(ui, server) }"},{"path":"/reference/f7FabClose.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 FAB close — f7FabClose","title":"Framework7 FAB close — f7FabClose","text":"f7FabClose indicates current tag close f7Fabs.","code":""},{"path":"/reference/f7FabClose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 FAB close — f7FabClose","text":"","code":"f7FabClose(tag)"},{"path":"/reference/f7FabClose.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 FAB close — f7FabClose","text":"tag Target tag.","code":""},{"path":"/reference/f7File.html","id":null,"dir":"Reference","previous_headings":"","what":"File Upload Control — f7File","title":"File Upload Control — f7File","text":"Create file upload control can used upload one files.","code":""},{"path":"/reference/f7File.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"File Upload Control — f7File","text":"","code":"f7File(   inputId,   label,   multiple = FALSE,   accept = NULL,   width = NULL,   buttonLabel = \"Browse...\",   placeholder = \"No file selected\" )"},{"path":"/reference/f7File.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"File Upload Control — f7File","text":"inputId input slot used access value. label Display label control, NULL label. multiple Whether user allowed select upload multiple files . work older browsers, including Internet Explorer 9 earlier. accept character vector MIME types; gives browser hint kind files server expecting. width width input, e.g. 400px, 100%. buttonLabel label used button. Can text HTML tag object. placeholder text show file uploaded.","code":""},{"path":"/reference/f7File.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"File Upload Control — f7File","text":"","code":"if (interactive()) {  library(shiny)  library(shinyMobile)   ui = f7Page(    f7SingleLayout(      navbar = f7Navbar(title = \"File handling\"),      f7File(\"up\", \"Upload!\")    )  )   server = function(input, output) {    data <- reactive(input$up)    observe(print(data()))  }   shinyApp(ui, server) }"},{"path":"/reference/f7Flex.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 flex container — f7Flex","title":"Framework7 flex container — f7Flex","text":"Build Framework7 flex container","code":""},{"path":"/reference/f7Flex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 flex container — f7Flex","text":"","code":"f7Flex(...)"},{"path":"/reference/f7Flex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 flex container — f7Flex","text":"... Items.","code":""},{"path":"/reference/f7Flex.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Framework7 flex container — f7Flex","text":"David Granjon, dgranjon@ymail.com","code":""},{"path":"/reference/f7Flex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 flex container — f7Flex","text":"","code":"if(interactive()){  library(shiny)  library(shinyMobile)   shinyApp(    ui = f7Page(     title = \"Align\",     f7SingleLayout(      navbar = f7Navbar(title = \"f7Flex\"),      f7Flex(       f7Block(strong = TRUE),       f7Block(strong = TRUE),       f7Block(strong = TRUE)      )     )    ),    server = function(input, output) {}  ) }"},{"path":"/reference/f7Float.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 float utility — f7Float","title":"Framework7 float utility — f7Float","text":"f7Float alignment utility items.","code":""},{"path":"/reference/f7Float.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 float utility — f7Float","text":"","code":"f7Float(tag, side = c(\"left\", \"right\"))"},{"path":"/reference/f7Float.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 float utility — f7Float","text":"tag Tag float. side Side float: \"left\" \"right\".","code":""},{"path":"/reference/f7Float.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Framework7 float utility — f7Float","text":"David Granjon, dgranjon@ymail.com","code":""},{"path":"/reference/f7Float.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 float utility — f7Float","text":"","code":"if(interactive()){  library(shiny)  library(shinyMobile)   shinyApp(    ui = f7Page(     title = \"Float\",     f7SingleLayout(      navbar = f7Navbar(title = \"f7Float\"),      f7Float(h1(\"Left\"), side = \"left\"),     f7Float(h1(\"Right\"), side = \"right\")     )    ),    server = function(input, output) {}  ) }"},{"path":"/reference/f7Found.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility to display an item when the search is successful. — f7Found","title":"Utility to display an item when the search is successful. — f7Found","text":"Use f7Searchbar.","code":""},{"path":"/reference/f7Found.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility to display an item when the search is successful. — f7Found","text":"","code":"f7Found(tag)"},{"path":"/reference/f7Found.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility to display an item when the search is successful. — f7Found","text":"tag tag display. using f7Searchbar, one must wrap items search inside f7Found.","code":""},{"path":"/reference/f7Gallery.html","id":null,"dir":"Reference","previous_headings":"","what":"Launch the shinyMobile Gallery — f7Gallery","title":"Launch the shinyMobile Gallery — f7Gallery","text":"gallery components available shinyMobile.","code":""},{"path":"/reference/f7Gallery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Launch the shinyMobile Gallery — f7Gallery","text":"","code":"f7Gallery()"},{"path":"/reference/f7Gallery.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Launch the shinyMobile Gallery — f7Gallery","text":"","code":"if (interactive()) {   f7Gallery()  }"},{"path":"/reference/f7HideOnEnable.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility to hide a given tag when f7Searchbar is enabled. — f7HideOnEnable","title":"Utility to hide a given tag when f7Searchbar is enabled. — f7HideOnEnable","text":"Use f7Searchbar.","code":""},{"path":"/reference/f7HideOnEnable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility to hide a given tag when f7Searchbar is enabled. — f7HideOnEnable","text":"","code":"f7HideOnEnable(tag)"},{"path":"/reference/f7HideOnEnable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility to hide a given tag when f7Searchbar is enabled. — f7HideOnEnable","text":"tag tag hide.","code":""},{"path":"/reference/f7HideOnSearch.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility to hide a given tag on search — f7HideOnSearch","title":"Utility to hide a given tag on search — f7HideOnSearch","text":"Use f7Searchbar.","code":""},{"path":"/reference/f7HideOnSearch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility to hide a given tag on search — f7HideOnSearch","text":"","code":"f7HideOnSearch(tag)"},{"path":"/reference/f7HideOnSearch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility to hide a given tag on search — f7HideOnSearch","text":"tag tag hide.","code":""},{"path":"/reference/f7Icon.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 icons — f7Icon","title":"Framework7 icons — f7Icon","text":"Use Framework7 icons shiny applications,  see complete list icons : https://framework7.io/icons/.","code":""},{"path":"/reference/f7Icon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 icons — f7Icon","text":"","code":"f7Icon(..., lib = NULL, color = NULL, style = NULL, old = NULL)"},{"path":"/reference/f7Icon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 icons — f7Icon","text":"... Icon name f7Badge. lib Library use: NULL, \"ios\" \"md\". Leave NULL default. Specify, md ios want hide/show icons specific devices. color Icon color, . style CSS styles applied icon, example use font-size: 56px; bigger icon. old Deprecated. handle old new icons shinyMobile uses new icons now. parameter removed future release.","code":""},{"path":"/reference/f7Icon.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Framework7 icons — f7Icon","text":"David Granjon, dgranjon@ymail.com","code":""},{"path":"/reference/f7Icon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 icons — f7Icon","text":"","code":"if(interactive()){  library(shiny)  library(shinyMobile)   shinyApp(   ui = f7Page(     title = \"Icons\",     f7SingleLayout(      navbar = f7Navbar(title = \"icons\"),      f7List(       f7ListItem(         title = tagList(          f7Icon(\"envelope\")         )       ),       f7ListItem(         title = tagList(          f7Icon(\"envelope_fill\", color = \"green\")         )       ),       f7ListItem(         title = f7Icon(\"home\", f7Badge(\"1\", color = \"red\"))       ),       f7ListItem(         title = f7Icon(\"envelope\", lib = \"md\"),         \"This will not appear since only for material design\"       )      )     )   ),   server = function(input, output) {}  ) }"},{"path":"/reference/f7Item.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 body item — f7Item","title":"Framework7 body item — f7Item","text":"Similar  f7Tab f7SplitLayout.","code":""},{"path":"/reference/f7Item.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 body item — f7Item","text":"","code":"f7Item(..., tabName)"},{"path":"/reference/f7Item.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 body item — f7Item","text":"... Item content. tabName Item id. Must unique, without space punctuation symbols.","code":""},{"path":"/reference/f7Item.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Framework7 body item — f7Item","text":"David Granjon, dgranjon@ymail.com","code":""},{"path":"/reference/f7Items.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 item container — f7Items","title":"Framework7 item container — f7Items","text":"Build Framework7 wrapper f7Item","code":""},{"path":"/reference/f7Items.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 item container — f7Items","text":"","code":"f7Items(...)"},{"path":"/reference/f7Items.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 item container — f7Items","text":"... Slot wrapper f7Item.","code":""},{"path":"/reference/f7Items.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Framework7 item container — f7Items","text":"David Granjon, dgranjon@ymail.com","code":""},{"path":"/reference/f7Link.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 link — f7Link","title":"Framework7 link — f7Link","text":"Link point toward external content.","code":""},{"path":"/reference/f7Link.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 link — f7Link","text":"","code":"f7Link(label = NULL, href, icon = NULL)"},{"path":"/reference/f7Link.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 link — f7Link","text":"label Optional link text. href Link source, url. icon Link icon, . Must pass f7Icon.","code":""},{"path":"/reference/f7Link.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Framework7 link — f7Link","text":"David Granjon, dgranjon@ymail.com","code":""},{"path":"/reference/f7Link.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 link — f7Link","text":"","code":"if(interactive()){  library(shiny)  library(shinyMobile)   shinyApp(    ui = f7Page(     title = \"Links\",     f7SingleLayout(      navbar = f7Navbar(title = \"f7Link\"),      f7Link(label = \"Google\", href = \"https://www.google.com\"),      f7Link(href = \"https://www.twitter.com\", icon = f7Icon(\"bolt_fill\"))     )    ),    server = function(input, output) {}  ) }"},{"path":"/reference/f7List.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a framework 7 contact list — f7List","title":"Create a framework 7 contact list — f7List","text":"Create framework 7 contact list","code":""},{"path":"/reference/f7List.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a framework 7 contact list — f7List","text":"","code":"f7List(..., mode = NULL, inset = FALSE)"},{"path":"/reference/f7List.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a framework 7 contact list — f7List","text":"... Slot f7ListGroup f7ListItem. mode List mode. NULL \"media\" \"contacts\". inset Whether display card border. FALSE default.","code":""},{"path":"/reference/f7List.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a framework 7 contact list — f7List","text":"","code":"if (interactive()) { library(shiny) library(shinyMobile)  shinyApp(   ui = f7Page(     title = \"My app\",     f7SingleLayout(       navbar = f7Navbar(title = \"f7List\"),        # simple list       f7List(         lapply(1:3, function(j) f7ListItem(letters[j]))       ),        # list with complex items       f7List(         lapply(1:3, function(j) {           f7ListItem(             letters[j],             media = f7Icon(\"alarm_fill\"),             right = \"Right Text\",             header = \"Header\",             footer = \"Footer\"           )         })       ),        # list with complex items       f7List(         mode = \"media\",         lapply(1:3, function(j) {           f7ListItem(             title = letters[j],             subtitle = \"subtitle\",             \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.             Nulla sagittis tellus ut turpis condimentum, ut dignissim             lacus tincidunt. Cras dolor metus, ultrices condimentum sodales             sit amet, pharetra sodales eros. Phasellus vel felis tellus.             Mauris rutrum ligula nec dapibus feugiat. In vel dui laoreet,             commodo augue id, pulvinar lacus.\",             media = tags$img(              src = paste0(              \"https://cdn.framework7.io/placeholder/people-160x160-\", j, \".jpg\"              )             ),             right = \"Right Text\"           )         })       ),        # list with links       f7List(         lapply(1:3, function(j) {           f7ListItem(url = \"https://google.com\", letters[j])         })       ),        # grouped lists       f7List(         mode = \"contacts\",         lapply(1:3, function(i) {           f7ListGroup(             title = LETTERS[i],             lapply(1:3, function(j) f7ListItem(letters[j]))           )         })       )     )   ),   server = function(input, output) {}  ) }"},{"path":"/reference/f7ListGroup.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a framework 7 group of contacts — f7ListGroup","title":"Create a framework 7 group of contacts — f7ListGroup","text":"Create framework 7 group contacts","code":""},{"path":"/reference/f7ListGroup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a framework 7 group of contacts — f7ListGroup","text":"","code":"f7ListGroup(..., title)"},{"path":"/reference/f7ListGroup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a framework 7 group of contacts — f7ListGroup","text":"... slot f7ListItem. title Group title.","code":""},{"path":"/reference/f7ListIndex.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Framework 7 list index — f7ListIndex","title":"Create a Framework 7 list index — f7ListIndex","text":"List index must attached existing list view.","code":""},{"path":"/reference/f7ListIndex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Framework 7 list index — f7ListIndex","text":"","code":"f7ListIndex(id, target, ..., session = shiny::getDefaultReactiveDomain())"},{"path":"/reference/f7ListIndex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Framework 7 list index — f7ListIndex","text":"id Unique id. target Related list element. CSS selector like .class, #id, ... ... options (see https://v5.framework7.io/docs/list-index#list-index-parameters). session Shiny session object.","code":""},{"path":"/reference/f7ListIndex.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create a Framework 7 list index — f7ListIndex","text":"reason, unable get 1 list index working. See example . second list work.","code":""},{"path":"/reference/f7ListIndex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Framework 7 list index — f7ListIndex","text":"","code":"if (interactive()) {  library(shiny)  library(shinyMobile)  shinyApp(    ui = f7Page(      title = \"List Index\",      f7TabLayout(        navbar = f7Navbar(          title = \"f7ListIndex\",          hairline = FALSE,          shadow = TRUE        ),        f7Tabs(          f7Tab(            tabName = \"List1\",            f7List(             mode = \"contacts\",             lapply(1:26, function(i) {               f7ListGroup(                 title = LETTERS[i],                 lapply(1:26, function(j) f7ListItem(letters[j]))               )             })            )          ),          f7Tab(            tabName = \"List2\",            f7List(             mode = \"contacts\",             lapply(1:26, function(i) {               f7ListGroup(                 title = LETTERS[i],                 lapply(1:26, function(j) f7ListItem(letters[j]))               )             })            )          )        )      )    ),    server = function(input, output, session) {     observeEvent(TRUE, {      f7ListIndex(id = \"list-index-1\", target = \".list\")     }, once = TRUE)    }  ) }"},{"path":"/reference/f7ListItem.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Framework 7 contact item — f7ListItem","title":"Create a Framework 7 contact item — f7ListItem","text":"Create Framework 7 contact item","code":""},{"path":"/reference/f7ListItem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Framework 7 contact item — f7ListItem","text":"","code":"f7ListItem(   ...,   title = NULL,   subtitle = NULL,   header = NULL,   footer = NULL,   href = NULL,   media = NULL,   right = NULL )"},{"path":"/reference/f7ListItem.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Framework 7 contact item — f7ListItem","text":"... Item text. title Item title. subtitle Item subtitle. header Item header. use f7List mode NULL. footer Item footer. use f7List mode NULL. href Item external link. media Expect f7Icon img. right Right content .","code":""},{"path":"/reference/f7Margin.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 margin utility — f7Margin","title":"Framework7 margin utility — f7Margin","text":"f7Margin adds margin given tag.","code":""},{"path":"/reference/f7Margin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 margin utility — f7Margin","text":"","code":"f7Margin(tag, side = NULL)"},{"path":"/reference/f7Margin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 margin utility — f7Margin","text":"tag Tag apply margin. side margin side: \"left\", \"right\", \"top\", \"bottom\", \"vertical\" (top bottom), \"horizontal\" (left right). Leave NULL apply sides.","code":""},{"path":"/reference/f7Margin.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Framework7 margin utility — f7Margin","text":"David Granjon, dgranjon@ymail.com","code":""},{"path":"/reference/f7Margin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 margin utility — f7Margin","text":"","code":"if(interactive()){  library(shiny)  library(shinyMobile)   cardTag <- f7Card(   title = \"Card header\",   \"This is a simple card with plain text,   but cards can also contain their own header,   footer, list view, image, or any other element.\",   footer = tagList(     f7Button(color = \"blue\", label = \"My button\", href = \"https://www.google.com\"),     f7Badge(\"Badge\", color = \"green\")   )  )   shinyApp(    ui = f7Page(     title = \"Margins\",     f7SingleLayout(      navbar = f7Navbar(title = \"f7Margin\"),      f7Margin(cardTag),      cardTag     )    ),    server = function(input, output) {}  ) }"},{"path":"/reference/f7NotFound.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility to display an item when the search is unsuccessful. — f7NotFound","title":"Utility to display an item when the search is unsuccessful. — f7NotFound","text":"Use f7Searchbar.","code":""},{"path":"/reference/f7NotFound.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility to display an item when the search is unsuccessful. — f7NotFound","text":"","code":"f7NotFound(tag)"},{"path":"/reference/f7NotFound.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility to display an item when the search is unsuccessful. — f7NotFound","text":"tag tag use.","code":""},{"path":"/reference/f7Notif.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 notification — f7Notif","title":"Framework7 notification — f7Notif","text":"Notification title, text, icon .","code":""},{"path":"/reference/f7Notif.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 notification — f7Notif","text":"","code":"f7Notif(   text,   icon = NULL,   title = NULL,   titleRightText = NULL,   subtitle = NULL,   closeTimeout = 5000,   closeButton = FALSE,   closeOnClick = TRUE,   swipeToClose = TRUE,   ...,   session = shiny::getDefaultReactiveDomain() )"},{"path":"/reference/f7Notif.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 notification — f7Notif","text":"text Notification content. icon Notification icon. title Notification title. titleRightText Notification right text. subtitle Notification subtitle closeTimeout Time notification closes. closeButton Whether display close button. FALSE default. closeOnClick Whether close notification click. TRUE default. swipeToClose enabled, notification can closed swipe gesture. ... options. See https://framework7.io/docs/notification.html. session shiny session.","code":""},{"path":"/reference/f7Notif.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 notification — f7Notif","text":"","code":"if (interactive()) {   library(shiny)   library(shinyMobile)   shinyApp(     ui = f7Page(       title = \"My app\",       f7SingleLayout(         navbar = f7Navbar(title = \"f7Notif\"),         f7Button(inputId = \"goButton\", \"Go!\")       )     ),     server = function(input, output, session) {       observeEvent(input$goButton,{         f7Notif(           text = \"test\",           icon = f7Icon(\"bolt_fill\"),           title = \"Notification\",           subtitle = \"A subtitle\",           titleRightText = \"now\"         )       })     }   ) }"},{"path":"/reference/f7Padding.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 padding utility — f7Padding","title":"Framework7 padding utility — f7Padding","text":"f7Padding adds padding given tag.","code":""},{"path":"/reference/f7Padding.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 padding utility — f7Padding","text":"","code":"f7Padding(tag, side = NULL)"},{"path":"/reference/f7Padding.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 padding utility — f7Padding","text":"tag Tag apply padding. side padding side: \"left\", \"right\", \"top\", \"bottom\", \"vertical\" (top bottom), \"horizontal\" (left right). Leave NULL apply sides.","code":""},{"path":"/reference/f7Padding.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Framework7 padding utility — f7Padding","text":"David Granjon, dgranjon@ymail.com","code":""},{"path":"/reference/f7Padding.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 padding utility — f7Padding","text":"","code":"if(interactive()){  library(shiny)  library(shinyMobile)   cardTag <- f7Card(   title = \"Card header\",   f7Padding(    p(\"The padding is applied here.\")   ),   footer = tagList(     f7Button(color = \"blue\", label = \"My button\", href = \"https://www.google.com\"),     f7Badge(\"Badge\", color = \"green\")   )  )   shinyApp(    ui = f7Page(     title = \"Padding\",     f7SingleLayout(navbar = f7Navbar(title = \"f7Padding\"), cardTag)    ),    server = function(input, output) {}  ) }"},{"path":"/reference/f7Page.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 page container — f7Page","title":"Framework7 page container — f7Page","text":"f7Page main app container.","code":""},{"path":"/reference/f7Page.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 page container — f7Page","text":"","code":"f7Page(   ...,   title = NULL,   options = list(theme = c(\"auto\", \"ios\", \"md\", \"aurora\"), dark = TRUE, skeletonsOnLoad =     FALSE, preloader = FALSE, filled = FALSE, color = \"#007aff\", touch = list(tapHold =     TRUE, tapHoldDelay = 750, iosTouchRipple = FALSE), iosTranslucentBars = FALSE, navbar     = list(iosCenterTitle = TRUE, hideOnPageScroll = TRUE), toolbar =     list(hideOnPageScroll = FALSE), pullToRefresh = FALSE),   allowPWA = FALSE )"},{"path":"/reference/f7Page.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 page container — f7Page","text":"... Slot shinyMobile skeleton elements: f7Appbar, f7SingleLayout, f7TabLayout, f7SplitLayout. title Page title. options shinyMobile configuration. See https://framework7.io/docs/app.html. notable options. General options: theme: App skin: \"ios\", \"md\", \"auto\" \"aurora\". dark: Dark layout. TRUE FALSE. skeletonsOnLoad: Whether display skeletons load.  preloading effect. compatible preloader. preloader: Loading spinner. compatible skeletonsOnLoad. filled: Whether fill f7Navbar f7Toolbar  current selected color. FALSE default. color: Color theme: See https://framework7.io/docs/color-themes.html.  Expect name like blue, red hex code like `#FF0000`. NULL, use default color.  name specified must accepted either col2hex  getF7Colors (valid Framework 7 color names). pullToRefresh: Whether active pull refresh feature. Default FALSE.  See https://v5.framework7.io/docs/pull--refresh.html#examples. iosTranslucentBars: Enable translucent effect (blur background) navigation bars iOS theme (iOS devices).  FALSE default. Touch module options https://v5.framework7.io/docs/app.html#app-parameters: tapHold:  triggers (enabled) sustained, complete touch event.  default disabled. Note, Tap Hold part built-Fast Clicks library,  Fast Clicks also enabled. tapHoldDelay: Determines long (ms) user must hold tap taphold event fired target element.  Default 750 ms. iosTouchRipple: Default FALSE. Enables touch ripple effect iOS theme. Navbar options https://v5.framework7.io/docs/navbar.html#navbar-app-parameters: iosCenterTitle: Default TRUE. enabled try position  title center iOS theme. Sometime (custom design) may needed. hideOnPageScroll: Default FALSE. hide Navbars page scroll. Toolbar options https://v5.framework7.io/docs/toolbar-tabbar.html#toolbar-app-parameters: hideOnPageScroll: Default FALSE. hide tabs page scroll. case, must follow structure provided function arguments. allowPWA Whether include PWA dependencies. Default FALSE.","code":""},{"path":"/reference/f7Page.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Framework7 page container — f7Page","text":"David Granjon, dgranjon@ymail.com","code":""},{"path":"/reference/f7Password.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an f7 password input — f7Password","title":"Create an f7 password input — f7Password","text":"Create f7 password input","code":""},{"path":"/reference/f7Password.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an f7 password input — f7Password","text":"","code":"f7Password(inputId, label, value = \"\", placeholder = NULL)"},{"path":"/reference/f7Password.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an f7 password input — f7Password","text":"inputId id input object. label label set input object. value value set input object. placeholder placeholder set input object.","code":""},{"path":"/reference/f7Password.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an f7 password input — f7Password","text":"","code":"if(interactive()){  library(shiny)  library(shinyMobile)   shinyApp(    ui = f7Page(      title = \"My app\",      f7SingleLayout(       navbar = f7Navbar(title = \"f7Password\"),       f7Password(        inputId = \"password\",        label = \"Password:\",        placeholder = \"Your password here\"       ),       verbatimTextOutput(\"value\")      )    ),    server = function(input, output) {      output$value <- renderPrint({ input$password })    }  ) }"},{"path":"/reference/f7PhotoBrowser.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 photo browser — f7PhotoBrowser","title":"Framework7 photo browser — f7PhotoBrowser","text":"nice photo browser.","code":""},{"path":"/reference/f7PhotoBrowser.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 photo browser — f7PhotoBrowser","text":"","code":"f7PhotoBrowser(   photos,   theme = c(\"light\", \"dark\"),   type = c(\"popup\", \"standalone\", \"page\"),   ...,   session = shiny::getDefaultReactiveDomain() )"},{"path":"/reference/f7PhotoBrowser.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 photo browser — f7PhotoBrowser","text":"photos List photos theme Browser theme: choose either light dark. type Browser type: choose among c(\"popup\", \"standalone\", \"page\"). ... options. session Shiny session object.","code":""},{"path":"/reference/f7PhotoBrowser.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 photo browser — f7PhotoBrowser","text":"","code":"if (interactive()) {  library(shiny)  library(shinyMobile)   shinyApp(    ui = f7Page(      title = \"f7PhotoBrowser\",      f7SingleLayout(        navbar = f7Navbar(title = \"f7PhotoBrowser\"),        f7Button(inputId = \"togglePhoto\", \"Open photo\")      )    ),    server = function(input, output, session) {     observeEvent(input$togglePhoto, {      f7PhotoBrowser(          id = \"photobrowser1\",          label = \"Open\",          theme = \"dark\",          type = \"standalone\",          photos = c(            \"https://cdn.framework7.io/placeholder/sports-1024x1024-1.jpg\",            \"https://cdn.framework7.io/placeholder/sports-1024x1024-2.jpg\",            \"https://cdn.framework7.io/placeholder/sports-1024x1024-3.jpg\"          )        )     })     }  ) }"},{"path":"/reference/f7Popup.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 popup — f7Popup","title":"Framework7 popup — f7Popup","text":"f7Popup creates popup window UI content pops App's main content. Popup overlays part called \"Temporary Views\".","code":""},{"path":"/reference/f7Popup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 popup — f7Popup","text":"","code":"f7Popup(   ...,   id,   title = NULL,   backdrop = TRUE,   closeByBackdropClick = TRUE,   closeOnEscape = FALSE,   animate = TRUE,   swipeToClose = FALSE,   fullsize = FALSE,   closeButton = TRUE,   session = shiny::getDefaultReactiveDomain() )"},{"path":"/reference/f7Popup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 popup — f7Popup","text":"... UI elements body popup window. id Popup unique id. Useful want access popup state. input$<id> TRUE popup opened inversely. title Title popup window, use NULL title. backdrop Enables Popup backdrop (dark semi transparent layer behind). Default TRUE. closeByBackdropClick enabled, popup closed backdrop click. Default TRUE. closeOnEscape enabled, popup closed ESC keyboard key press. Default FALSE. animate Whether Popup opened/closed animation . Default TRUE. swipeToClose Whether Popup can closed swipe gesture. Can true allow close popup swipes top bottom. Default FALSE. fullsize Open popup full width . Default FALSE. closeButton Add button easily close popup. Default TRUE. session Shiny session object.","code":""},{"path":"/reference/f7Popup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 popup — f7Popup","text":"","code":"if (interactive()) {  library(shiny)  library(shinyMobile)  shinyApp(    ui = f7Page(      title = \"Popup\",      f7SingleLayout(       navbar = f7Navbar(         title = \"f7Popup\",         hairline = FALSE,         shadow = TRUE       ),       f7Button(\"togglePopup\", \"Toggle Popup\")      )    ),    server = function(input, output, session) {      output$popupContent <- renderPrint(input$text)      observeEvent(input$togglePopup, {      f7Popup(        id = \"popup1\",        title = \"My first popup\",        f7Text(\"text\", \"Popup content\", \"This is my first popup ever, I swear!\"),        verbatimTextOutput(\"popupContent\")       )     })      observeEvent(input$popup1, {       popupStatus <- if (input$popup1) \"opened\" else \"closed\"       f7Toast(       position = \"top\",       text = paste(\"Popup is\", popupStatus)      )     })    }  ) }"},{"path":"/reference/f7Row.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 row container — f7Row","title":"Framework7 row container — f7Row","text":"Build Framework7 row container","code":""},{"path":"/reference/f7Row.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 row container — f7Row","text":"","code":"f7Row(..., gap = TRUE)"},{"path":"/reference/f7Row.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 row container — f7Row","text":"... Row content. gap Whether display gap columns. TRUE default.","code":""},{"path":"/reference/f7Row.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Framework7 row container — f7Row","text":"David Granjon, dgranjon@ymail.com","code":""},{"path":"/reference/f7Row.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 row container — f7Row","text":"","code":"if(interactive()){  library(shiny)  library(shinyMobile)   shinyApp(   ui = f7Page(     title = \"Grid\",     f7SingleLayout(      navbar = f7Navbar(title = \"f7Row, f7Col\"),      f7Row(      f7Col(       f7Card(        \"This is a simple card with plain text,        but cards can also contain their own header,        footer, list view, image, or any other element.\"       )      ),      f7Col(       f7Card(        title = \"Card header\",        \"This is a simple card with plain text,         but cards can also contain their own header,         footer, list view, image, or any other element.\",        footer = tagList(         f7Button(color = \"blue\", label = \"My button\"),         f7Badge(\"Badge\", color = \"green\")        )       )      )     )     )   ),   server = function(input, output) {}  ) }"},{"path":"/reference/f7SearchIgnore.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility to ignore an item from search. — f7SearchIgnore","title":"Utility to ignore an item from search. — f7SearchIgnore","text":"Use f7Searchbar.","code":""},{"path":"/reference/f7SearchIgnore.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility to ignore an item from search. — f7SearchIgnore","text":"","code":"f7SearchIgnore(tag)"},{"path":"/reference/f7SearchIgnore.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility to ignore an item from search. — f7SearchIgnore","text":"tag tag ignore.","code":""},{"path":"/reference/f7Searchbar.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework 7 searchbar — f7Searchbar","title":"Framework 7 searchbar — f7Searchbar","text":"Searchbar filter elements page.","code":""},{"path":"/reference/f7Searchbar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework 7 searchbar — f7Searchbar","text":"","code":"f7Searchbar(   id,   placeholder = \"Search\",   expandable = FALSE,   inline = FALSE,   options = NULL )"},{"path":"/reference/f7Searchbar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework 7 searchbar — f7Searchbar","text":"id Necessary using f7SearchbarTrigger. NULL otherwise. placeholder Searchbar placeholder. expandable Whether enable searchbar target link, navbar. See f7SearchbarTrigger. inline Useful add f7Searchbar f7Appbar. Notice utilities like f7HideOnSearch f7NotFound compatible mode. options Search bar options. See https://v5.framework7.io/docs/searchbar.html#searchbar-parameters. options provided, searchbar search list elements item title. may changed updating default searchContainer searchIn.","code":""},{"path":"/reference/f7Searchbar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework 7 searchbar — f7Searchbar","text":"","code":"if (interactive()) { library(shiny) library(shinyMobile)  cars <- rownames(mtcars)  shinyApp(   ui = f7Page(     title = \"Simple searchbar\",     f7SingleLayout(       navbar = f7Navbar(         title = \"f7Searchbar\",         hairline = FALSE,         shadow = TRUE,         subNavbar = f7SubNavbar(           f7Searchbar(id = \"search1\")         )       ),       f7Block(         \"This block will be hidden on search.         Lorem ipsum dolor sit amet, consectetur adipisicing elit.\"       ) %>% f7HideOnSearch(),       f7List(         lapply(seq_along(cars), function(i) {           f7ListItem(cars[i])         })       ) %>% f7Found(),        f7Block(         p(\"Nothing found\")       ) %>% f7NotFound()      )   ),   server = function(input, output) {}  )   # Expandable searchbar with trigger  cities <- names(precip)   shinyApp(    ui = f7Page(      title = \"Expandable searchbar\",      f7SingleLayout(        navbar = f7Navbar(          title = \"f7Searchbar with trigger\",          hairline = FALSE,          shadow = TRUE,          subNavbar = f7SubNavbar(            f7Searchbar(id = \"search1\", expandable = TRUE)          )        ),        f7Block(          f7SearchbarTrigger(targetId = \"search1\")        ) %>% f7HideOnSearch(),        f7List(          lapply(seq_along(cities), function(i) {            f7ListItem(cities[i])          })        ) %>% f7Found(),         f7Block(          p(\"Nothing found\")        ) %>% f7NotFound()       )    ),    server = function(input, output) {}  )   # Searchbar in \\link{f7Appbar}  shinyApp(   ui = f7Page(     title = \"Searchbar in appbar\",     f7Appbar(       f7Searchbar(id = \"search1\", inline = TRUE)     ),     f7SingleLayout(       navbar = f7Navbar(         title = \"f7Searchbar in f7Appbar\",         hairline = FALSE,         shadow = TRUE       ),       f7List(         lapply(seq_along(cities), function(i) {           f7ListItem(cities[i])         })       ) %>% f7Found()     )   ),   server = function(input, output) {}  ) }"},{"path":"/reference/f7SearchbarTrigger.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework 7 searchbar trigger — f7SearchbarTrigger","title":"Framework 7 searchbar trigger — f7SearchbarTrigger","text":"Element triggers searchbar.","code":""},{"path":"/reference/f7SearchbarTrigger.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework 7 searchbar trigger — f7SearchbarTrigger","text":"","code":"f7SearchbarTrigger(targetId)"},{"path":"/reference/f7SearchbarTrigger.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework 7 searchbar trigger — f7SearchbarTrigger","text":"targetId Id f7Searchbar.","code":""},{"path":"/reference/f7Segment.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 segmented button container — f7Segment","title":"Framework7 segmented button container — f7Segment","text":"Framework7 segmented button container f7Button.","code":""},{"path":"/reference/f7Segment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 segmented button container — f7Segment","text":"","code":"f7Segment(   ...,   container = c(\"segment\", \"row\"),   shadow = FALSE,   rounded = FALSE,   strong = FALSE )"},{"path":"/reference/f7Segment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 segmented button container — f7Segment","text":"... Slot f7Button. container Either \"row\" \"segment\". shadow Button shadow. FALSE default. container segment. rounded Round style. FALSE default. container segment. strong Strong style. FALSE default.","code":""},{"path":"/reference/f7Segment.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Framework7 segmented button container — f7Segment","text":"David Granjon, dgranjon@ymail.com","code":""},{"path":"/reference/f7Segment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 segmented button container — f7Segment","text":"","code":"if(interactive()){  library(shiny)  library(shinyMobile)   shinyApp(   ui = f7Page(     title = \"Button Segments\",     f7SingleLayout(      navbar = f7Navbar(title = \"f7Segment, f7Button\"),      f7BlockTitle(title = \"Simple Buttons in a row container\"),     f7Segment(      container = \"row\",      f7Button(color = \"blue\", label = \"My button\", fill = FALSE),      f7Button(color = \"green\", label = \"My button\", href = \"https://www.google.com\", fill = FALSE),      f7Button(color = \"yellow\", label = \"My button\", fill = FALSE)     ),     f7BlockTitle(title = \"Filled Buttons in a segment/rounded container\"),     f7Segment(      rounded = TRUE,      container = \"segment\",      f7Button(color = \"black\", label = \"Action Button\", inputId = \"button2\"),      f7Button(color = \"green\", label = \"My button\", href = \"https://www.google.com\"),      f7Button(color = \"yellow\", label = \"My button\")     ),     f7BlockTitle(title = \"Outline Buttons in a segment/shadow container\"),     f7Segment(      shadow = TRUE,      container = \"segment\",      f7Button(label = \"My button\", outline = TRUE, fill = FALSE),      f7Button(label = \"My button\", outline = TRUE, fill = FALSE),      f7Button(label = \"My button\", outline = TRUE, fill = FALSE)     ),     f7BlockTitle(title = \"Buttons in a segment/strong container\"),     f7Segment(      strong = TRUE,      container = \"segment\",      f7Button(label = \"My button\", fill = FALSE),      f7Button(label = \"My button\", fill = FALSE),      f7Button(label = \"My button\", fill = FALSE, active = TRUE)     ),     f7BlockTitle(title = \"Rounded Buttons in a segment container\"),     f7Segment(      container = \"segment\",      f7Button(color = \"blue\", label = \"My button\", rounded = TRUE),      f7Button(color = \"green\", label = \"My button\", rounded = TRUE),      f7Button(color = \"yellow\", label = \"My button\", rounded = TRUE)     ),     f7BlockTitle(title = \"Buttons of different size in a row container\"),     f7Segment(      container = \"row\",      f7Button(color = \"pink\", label = \"My button\", shadow = TRUE),      f7Button(color = \"purple\", label = \"My button\", size = \"large\", shadow = TRUE),      f7Button(color = \"orange\", label = \"My button\", size = \"small\", shadow = TRUE)     ),      br(), br(),     f7BlockTitle(title = \"Click on the black action button to update the value\"),     verbatimTextOutput(\"val\")     )   ),   server = function(input, output) {    output$val <- renderPrint(input$button2)   }  ) }"},{"path":"/reference/f7Shadow.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 shadow effect — f7Shadow","title":"Framework7 shadow effect — f7Shadow","text":"Creates shadow effect apply UI elements like f7Card.","code":""},{"path":"/reference/f7Shadow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 shadow effect — f7Shadow","text":"","code":"f7Shadow(tag, intensity, hover = FALSE, pressed = FALSE)"},{"path":"/reference/f7Shadow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 shadow effect — f7Shadow","text":"tag Tag apply shadow . intensity Shadow intensity. Numeric 1 24. 24 highest elevation. hover Whether display shadow hover. FALSE default. pressed Whether display shadow click. FALSE default.","code":""},{"path":"/reference/f7Shadow.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Framework7 shadow effect — f7Shadow","text":"David Granjon, dgranjon@ymail.com","code":""},{"path":"/reference/f7Shadow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 shadow effect — f7Shadow","text":"","code":"if(interactive()){  library(shiny)  library(shinyMobile)   shinyApp(    ui = f7Page(     title = \"Shadows\",     f7SingleLayout(      navbar = f7Navbar(title = \"f7Shadow\"),      f7Shadow(      intensity = 16,      hover = TRUE,      pressed = TRUE,      f7Card(       title = \"Card header\",       \"This is a simple card with plain text,        but cards can also contain their own header,        footer, list view, image, or any other element.\",       footer = tagList(        f7Button(color = \"blue\", label = \"My button\", href = \"https://www.google.com\"),        f7Badge(\"Badge\", color = \"green\")       )      )     )     )    ),    server = function(input, output) {}  ) }"},{"path":"/reference/f7SingleLayout.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 single layout — f7SingleLayout","title":"Framework7 single layout — f7SingleLayout","text":"f7SingleLayout provides simple page layout.","code":""},{"path":"/reference/f7SingleLayout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 single layout — f7SingleLayout","text":"","code":"f7SingleLayout(..., navbar, toolbar = NULL, panels = NULL, appbar = NULL)"},{"path":"/reference/f7SingleLayout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 single layout — f7SingleLayout","text":"... Content. navbar Slot f7Navbar. toolbar Slot f7Toolbar. panels Slot f7Panel. Wrap tagList multiple panels. appbar Slot f7Appbar.","code":""},{"path":"/reference/f7SingleLayout.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Framework7 single layout — f7SingleLayout","text":"David Granjon, dgranjon@ymail.com","code":""},{"path":"/reference/f7SingleLayout.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 single layout — f7SingleLayout","text":"","code":"if(interactive()){  library(shiny)  library(shinyMobile)  shinyApp(   ui = f7Page(     title = \"Single layout\",     f7SingleLayout(       navbar = f7Navbar(         title = \"Single Layout\",         hairline = FALSE,         shadow = TRUE       ),       toolbar = f7Toolbar(         position = \"bottom\",         f7Link(label = \"Link 1\", href = \"https://www.google.com\"),         f7Link(label = \"Link 2\", href = \"https://www.google.com\")       ),       # main content       f7Shadow(         intensity = 10,         hover = TRUE,         f7Card(           title = \"Card header\",           f7Slider(\"obs\", \"Number of observations\", 0, 1000, 500),           plotOutput(\"distPlot\"),           footer = tagList(             f7Button(color = \"blue\", label = \"My button\", href = \"https://www.google.com\"),             f7Badge(\"Badge\", color = \"green\")           )         )       )     )   ),   server = function(input, output) {     output$distPlot <- renderPlot({       dist <- rnorm(input$obs)       hist(dist)     })   }  ) }"},{"path":"/reference/f7Skeleton.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework 7 skeleton effect — f7Skeleton","title":"Framework 7 skeleton effect — f7Skeleton","text":"Nice loading overlay UI elements.","code":""},{"path":"/reference/f7Skeleton.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework 7 skeleton effect — f7Skeleton","text":"","code":"f7Skeleton(   target = \".card\",   effect = c(\"fade\", \"blink\", \"pulse\"),   duration = NULL,   session = shiny::getDefaultReactiveDomain() )"},{"path":"/reference/f7Skeleton.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework 7 skeleton effect — f7Skeleton","text":"target CSS selector apply effect. general, apply effect wrapper card, nested elements receive skeleton. effect Choose \"fade\", \"blink\" \"pulse\". duration Effect duration. NULL default. know exactly much time time consuming output takes render, can pass explicit duration. cases, leave NULL. session Shiny session object.","code":""},{"path":"/reference/f7Skeleton.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework 7 skeleton effect — f7Skeleton","text":"","code":"if (interactive()) {  library(shiny)  library(shinyMobile)   shinyApp(    ui = f7Page(      title = \"Skeletons\",      f7SingleLayout(        navbar = f7Navbar(title = \"f7Skeleton\"),        f7Card(          title = \"Card header\",          \"This is a simple card with plain text,       but cards can also contain their own header,       footer, list view, image, or any other element.\",          footer = tagList(            f7Button(color = \"blue\", label = \"My button\", href = \"https://www.google.com\"),            f7Badge(\"Badge\", color = \"green\")          )        ),          f7List(          f7ListItem(            href = \"https://www.google.com\",            title = \"Item 1\"          ),          f7ListItem(            href = \"https://www.google.com\",            title = \"Item 2\"          )         )      )    ),    server = function(input, output, session) {      observeEvent(TRUE, {        f7Skeleton(\".card\", \"fade\", 2)      }, once = TRUE)    }  ) }"},{"path":"/reference/f7Slide.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 slide — f7Slide","title":"Framework7 slide — f7Slide","text":"f7Slide f7Swiper element.","code":""},{"path":"/reference/f7Slide.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 slide — f7Slide","text":"","code":"f7Slide(...)"},{"path":"/reference/f7Slide.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 slide — f7Slide","text":"... Slide content. element.","code":""},{"path":"/reference/f7SplitLayout.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 split layout — f7SplitLayout","title":"Framework7 split layout — f7SplitLayout","text":"modified version f7SingleLayout. intended used tablets.","code":""},{"path":"/reference/f7SplitLayout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 split layout — f7SplitLayout","text":"","code":"f7SplitLayout(   ...,   navbar,   sidebar,   toolbar = NULL,   panel = NULL,   appbar = NULL )"},{"path":"/reference/f7SplitLayout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 split layout — f7SplitLayout","text":"... Content. navbar Slot f7Navbar. sidebar Slot f7Panel. Particularly expect following code: f7Panel(title = \"Sidebar\", side = \"left\", theme = \"light\", \"Blabla\", style = \"reveal\") toolbar Slot f7Toolbar. panel Slot f7Panel. Expect right panel, instance: f7Panel(title = \"Left Panel\", side = \"right\", theme = \"light\", \"Blabla\", style = \"cover\") appbar Slot f7Appbar.","code":""},{"path":"/reference/f7SplitLayout.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Framework7 split layout — f7SplitLayout","text":"David Granjon, dgranjon@ymail.com","code":""},{"path":"/reference/f7SplitLayout.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 split layout — f7SplitLayout","text":"","code":"if(interactive()){  library(shiny)  library(shinyMobile)  shinyApp(    ui = f7Page(      title = \"Split layout\",      f7SplitLayout(        sidebar = f7Panel(          id = \"sidebar\",          title = \"Sidebar\",          side = \"left\",          theme = \"dark\",          f7PanelMenu(            id = \"menu\",            f7PanelItem(tabName = \"tab1\", title = \"Tab 1\", icon = f7Icon(\"envelope\"), active = TRUE),            f7PanelItem(tabName = \"tab2\", title = \"Tab 2\", icon = f7Icon(\"house\"))          ),          uiOutput(\"selected_tab\")        ),        navbar = f7Navbar(          title = \"Split Layout\",          hairline = FALSE,          shadow = TRUE        ),        toolbar = f7Toolbar(          position = \"bottom\",          f7Link(label = \"Link 1\", href = \"https://www.google.com\"),          f7Link(label = \"Link 2\", href = \"https://www.google.com\")        ),        # main content        f7Items(          f7Item(            tabName = \"tab1\",            f7Slider(\"obs\", \"Number of observations:\",                        min = 0, max = 1000, value = 500            ),            plotOutput(\"distPlot\")          ),          f7Item(tabName = \"tab2\", \"Tab 2 content\")        )      )    ),    server = function(input, output) {       output$selected_tab <- renderUI({       HTML(paste0(\"Selected tab: \", strong(input$menu)))      })       output$distPlot <- renderPlot({        dist <- rnorm(input$obs)        hist(dist)      })    }  ) }"},{"path":"/reference/f7SubNavbar.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 sub navbar — f7SubNavbar","title":"Framework7 sub navbar — f7SubNavbar","text":"f7SubNavbar creates nested navbar component f7Navbar.","code":""},{"path":"/reference/f7SubNavbar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 sub navbar — f7SubNavbar","text":"","code":"f7SubNavbar(...)"},{"path":"/reference/f7SubNavbar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 sub navbar — f7SubNavbar","text":"... elements.","code":""},{"path":"/reference/f7SubNavbar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 sub navbar — f7SubNavbar","text":"","code":"if (interactive()) {  library(shiny)  library(shinyMobile)   shinyApp(   ui = f7Page(      title = \"Sub Navbar\",      f7TabLayout(         panels = tagList(          f7Panel(title = \"Left Panel\", side = \"left\", theme = \"light\", \"Blabla\", style = \"cover\"),          f7Panel(title = \"Right Panel\", side = \"right\", theme = \"dark\", \"Blabla\", style = \"cover\")         ),         navbar = f7Navbar(            title = \"SubNavbar\",            hairline = FALSE,            shadow = TRUE,            leftPanel = TRUE,            rightPanel = TRUE,            subNavbar = f7SubNavbar(               f7Button(label = \"My button\"),               f7Button(label = \"My button\"),               f7Button(label = \"My button\")            )         ),         f7Tabs(            animated = TRUE,            #swipeable = TRUE,            f7Tab(               tabName = \"Tab 1\",               icon = f7Icon(\"envelope\"),               active = TRUE,               \"Tab 1\"            ),            f7Tab(               tabName = \"Tab 2\",               icon = f7Icon(\"today\"),               active = FALSE,               \"Tab 2\"            ),            f7Tab(               tabName = \"Tab 3\",               icon = f7Icon(\"cloud_upload\"),               active = FALSE,               \"Tab 3\"            )         )      )   ),   server = function(input, output) {}  ) }"},{"path":"/reference/f7Tab.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Framework7 tab item — f7Tab","title":"Create a Framework7 tab item — f7Tab","text":"Build Framework7 tab item","code":""},{"path":"/reference/f7Tab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Framework7 tab item — f7Tab","text":"","code":"f7Tab(..., title = NULL, tabName, icon = NULL, active = FALSE, hidden = FALSE)"},{"path":"/reference/f7Tab.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Framework7 tab item — f7Tab","text":"... Item content. title Tab title (name). tabName Item id. Must unique, without space punctuation symbols. icon Item icon. Expect f7Icon function suitable lib argument (either md ios NULL native f7 icons). active Whether tab active start. select multiple tabs, first one set active. hidden Whether hide tab. useful want add invisible tabs (appear tabbar) can still navigate updateF7Tabs.","code":""},{"path":"/reference/f7Tab.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a Framework7 tab item — f7Tab","text":"David Granjon, dgranjon@ymail.com","code":""},{"path":"/reference/f7TabLayout.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 tab layout — f7TabLayout","title":"Framework7 tab layout — f7TabLayout","text":"f7TabLayout create single page app multiple tabs, giving illusion multi pages experience.","code":""},{"path":"/reference/f7TabLayout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 tab layout — f7TabLayout","text":"","code":"f7TabLayout(..., navbar, messagebar = NULL, panels = NULL, appbar = NULL)"},{"path":"/reference/f7TabLayout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 tab layout — f7TabLayout","text":"... Slot f7Tabs. navbar Slot f7Navbar. messagebar Slot f7MessageBar. panels Slot f7Panel. Wrap tagList multiple panels. appbar Slot f7Appbar.","code":""},{"path":"/reference/f7TabLayout.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Framework7 tab layout — f7TabLayout","text":"David Granjon, dgranjon@ymail.com","code":""},{"path":"/reference/f7TabLayout.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 tab layout — f7TabLayout","text":"","code":"if(interactive()){  library(shiny)  library(shinyMobile)  library(shinyWidgets)   shinyApp(    ui = f7Page(      title = \"Tab layout\",      f7TabLayout(        tags$head(          tags$script(            \"$(function(){                $('#tapHold').on('taphold', function () {                  app.dialog.alert('Tap hold fired!');                });              });              \"          )        ),        panels = tagList(          f7Panel(title = \"Left Panel\", side = \"left\", theme = \"light\", \"Blabla\", effect = \"cover\"),          f7Panel(title = \"Right Panel\", side = \"right\", theme = \"dark\", \"Blabla\", effect = \"cover\")        ),        navbar = f7Navbar(          title = \"Tabs\",          hairline = FALSE,          shadow = TRUE,          leftPanel = TRUE,          rightPanel = TRUE        ),        f7Tabs(          animated = FALSE,          swipeable = TRUE,          f7Tab(            tabName = \"Tab1\",            icon = f7Icon(\"envelope\"),            active = TRUE,            f7Shadow(              intensity = 10,              hover = TRUE,              f7Card(                title = \"Card header\",                f7Stepper(                  \"obs1\",                  \"Number of observations\",                  min = 0,                  max = 1000,                  value = 500,                  step = 100                ),                plotOutput(\"distPlot1\"),                footer = tagList(                  f7Button(inputId = \"tapHold\", label = \"My button\"),                  f7Badge(\"Badge\", color = \"green\")                )              )            )          ),          f7Tab(            tabName = \"Tab2\",            icon = f7Icon(\"today\"),            active = FALSE,            f7Shadow(              intensity = 10,              hover = TRUE,              f7Card(                title = \"Card header\",                f7Select(                  inputId = \"obs2\",                  label = \"Distribution type:\",                  choices = c(                    \"Normal\" = \"norm\",                    \"Uniform\" = \"unif\",                    \"Log-normal\" = \"lnorm\",                    \"Exponential\" = \"exp\"                  )                ),                plotOutput(\"distPlot2\"),                footer = tagList(                  f7Button(label = \"My button\", href = \"https://www.google.com\"),                  f7Badge(\"Badge\", color = \"orange\")                )              )            )          ),          f7Tab(            tabName = \"Tab3\",            icon = f7Icon(\"cloud_upload\"),            active = FALSE,            f7Shadow(              intensity = 10,              hover = TRUE,              f7Card(                title = \"Card header\",                f7SmartSelect(                  inputId = \"variable\",                  label = \"Variables to show:\",                  c(\"Cylinders\" = \"cyl\",                    \"Transmission\" = \"am\",                    \"Gears\" = \"gear\"),                  multiple = TRUE,                  selected = \"cyl\"                ),                tableOutput(\"data\"),                footer = tagList(                  f7Button(label = \"My button\", href = \"https://www.google.com\"),                  f7Badge(\"Badge\", color = \"green\")                )              )            )          )        )      )    ),    server = function(input, output) {      output$distPlot1 <- renderPlot({        dist <- rnorm(input$obs1)        hist(dist)      })       output$distPlot2 <- renderPlot({        dist <- switch(          input$obs2,          norm = rnorm,          unif = runif,          lnorm = rlnorm,          exp = rexp,          rnorm        )         hist(dist(500))      })       output$data <- renderTable({        mtcars[, c(\"mpg\", input$variable), drop = FALSE]      }, rownames = TRUE)    }  ) }"},{"path":"/reference/f7TabLink.html","id":null,"dir":"Reference","previous_headings":"","what":"Special button/link to insert in the tabbar — f7TabLink","title":"Special button/link to insert in the tabbar — f7TabLink","text":"Use .items slot f7Tabs.","code":""},{"path":"/reference/f7TabLink.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Special button/link to insert in the tabbar — f7TabLink","text":"","code":"f7TabLink(..., icon = NULL, label = NULL)"},{"path":"/reference/f7TabLink.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Special button/link to insert in the tabbar — f7TabLink","text":"... attribute like `data-sheet`, id, ... icon Expect f7Icon. label Button label.","code":""},{"path":"/reference/f7Table.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 table — f7Table","title":"Framework7 table — f7Table","text":"Creates table container.","code":""},{"path":"/reference/f7Table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 table — f7Table","text":"","code":"f7Table(data, colnames = NULL, card = FALSE)"},{"path":"/reference/f7Table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 table — f7Table","text":"data data.frame. colnames Column names use, NULL uses data column names. card Whether use card.","code":""},{"path":"/reference/f7Table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 table — f7Table","text":"","code":"if(interactive()){  library(shiny)  library(shinyMobile)  shiny::shinyApp(   ui = f7Page(     title = \"My app\",     f7SingleLayout(        navbar = f7Navbar(          title = \"f7Table\"        ),       uiOutput(\"table\")     )   ),   server = function(input, output) {     output$table <- renderUI({       f7Table(mtcars)     })   }  ) }"},{"path":"/reference/f7Tabs.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Framework7 tabs — f7Tabs","title":"Create a Framework7 tabs — f7Tabs","text":"default, f7Tabs used within f7TabLayout. However, may use standalone components specify segmented strong styles.","code":""},{"path":"/reference/f7Tabs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Framework7 tabs — f7Tabs","text":"","code":"f7Tabs(   ...,   .items = NULL,   id = NULL,   swipeable = FALSE,   animated = TRUE,   style = c(\"toolbar\", \"segmented\", \"strong\") )"},{"path":"/reference/f7Tabs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Framework7 tabs — f7Tabs","text":"... Slot f7Tab. .items Slot items part toolbar buttons f7TabLink. may useful open f7Sheet tabbar. id Optional get id currently selected f7Tab. swipeable Whether allow finger swip. FALSE default. touch-screens. compatible animated. animated Whether show transition tabs. TRUE default. compatible swipeable. style Tabs style: c(\"toolbar\", \"segmented\", \"strong\"). style toolbar, f7Tab toolbar behavior.","code":""},{"path":"/reference/f7Tabs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a Framework7 tabs — f7Tabs","text":"David Granjon, dgranjon@ymail.com","code":""},{"path":"/reference/f7Tabs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Framework7 tabs — f7Tabs","text":"","code":"if (interactive()) {  # tabs as toolbar  library(shiny)  library(shinyMobile)  shiny::shinyApp(   ui = f7Page(     title = \"Tab Layout\",     f7TabLayout(       navbar = f7Navbar(title = HTML(paste(\"Currently selected:\", textOutput(\"selected\")))),       f7Tabs(         id = \"tabdemo\",         swipeable = TRUE,         animated = FALSE,         f7Tab(          title = \"Tab 1\",          tabName = \"Tab1\",          f7Sheet(           id = \"sheet\",           label = \"More\",           orientation = \"bottom\",           swipeToClose = TRUE,           swipeToStep = TRUE,           backdrop = TRUE,           \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.           Quisque ac diam ac quam euismod porta vel a nunc. Quisque sodales           scelerisque est, at porta justo cursus ac\"          )         ),         f7Tab(title = \"Tab 2\", tabName = \"Tab2\", \"tab 2 text\"),         f7Tab(title = \"Tab 3\", tabName = \"Tab3\", \"tab 3 text\"),         .items = f7TabLink(          icon = f7Icon(\"bolt_fill\"),          label = \"Toggle Sheet\",          `data-sheet` = \"#sheet\",          class = \"sheet-open\"         )       )     )   ),   server = function(input, output) {     output$selected <- renderText(input$tabdemo)   }  )  # standalone tabs  library(shiny)  library(shinyMobile)  shiny::shinyApp(    ui = f7Page(      title = \"My app\",      f7SingleLayout(        navbar = f7Navbar(          title = \"Standalone tabs\",          hairline = FALSE,          shadow = TRUE        ),        f7Tabs(          id = \"tabs\",          style = \"strong\", animated = FALSE, swipeable = TRUE,          f7Tab(            tabName = \"Tab1\",            icon = f7Icon(\"envelope\"),            active = TRUE,            f7Shadow(              intensity = 10,              hover = TRUE,              f7Card(                title = \"Card header\",                f7Stepper(                  \"obs1\",                  \"Number of observations\",                  min = 0,                  max = 1000,                  value = 500,                  step = 100                ),                plotOutput(\"distPlot\")              )            )          ),          f7Tab(            tabName = \"Tab2\",            icon = f7Icon(\"today\"),            f7Shadow(              intensity = 10,              hover = TRUE,              f7Card(                title = \"Card header\",                f7Select(                  inputId = \"obs2\",                  label = \"Distribution type:\",                  choices = c(                    \"Normal\" = \"norm\",                    \"Uniform\" = \"unif\",                    \"Log-normal\" = \"lnorm\",                    \"Exponential\" = \"exp\"                  )                ),                plotOutput(\"distPlot2\")              )            )          ),          f7Tab(            tabName = \"Tab3\",            icon = f7Icon(\"cloud_upload\"),            f7Shadow(              intensity = 10,              hover = TRUE,              f7Card(                title = \"Card header\",                f7SmartSelect(                  inputId = \"variable\",                  label = \"Variables to show:\",                  c(\"Cylinders\" = \"cyl\",                    \"Transmission\" = \"am\",                    \"Gears\" = \"gear\"),                  multiple = TRUE,                  selected = \"cyl\"                ),                tableOutput(\"data\")              )            )          )        )      )    ),    server = function(input, output) {      output$distPlot <- renderPlot({        dist <- rnorm(input$obs1)        hist(dist)      })       output$distPlot2 <- renderPlot({        dist <- switch(          input$obs2,          norm = rnorm,          unif = runif,          lnorm = rlnorm,          exp = rexp,          rnorm        )         hist(dist(500))      })       output$data <- renderTable({        mtcars[, c(\"mpg\", input$variable), drop = FALSE]      }, rownames = TRUE)    }  ) }"},{"path":"/reference/f7TapHold.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 tapHold module — f7TapHold","title":"Framework7 tapHold module — f7TapHold","text":"f7TapHold triggered long press element, server.","code":""},{"path":"/reference/f7TapHold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 tapHold module — f7TapHold","text":"","code":"f7TapHold(target, callback, session = shiny::getDefaultReactiveDomain())"},{"path":"/reference/f7TapHold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 tapHold module — f7TapHold","text":"target Element apply tapHold event . Must jQuery selector, \"#id\" \".class\", \".class1, .class2\", \"\"... callback Javascript callback. session Shiny session object.","code":""},{"path":"/reference/f7TapHold.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 tapHold module — f7TapHold","text":"","code":"if (interactive()) { library(shiny) library(shinyMobile)   shinyApp(    ui = f7Page(      title = \"Taphold\",      f7SingleLayout(        navbar = f7Navbar(title = \"f7TapHold\"),        f7Button(inputId = \"pressme\", label = \"Press me\")      )    ),    server = function(input, output, session) {     observe({       f7TapHold(        target = \"#pressme\",        callback = \"app.dialog.alert('Tap hold fired!')\"       )     })    }  ) }"},{"path":"/reference/f7Toast.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 toast — f7Toast","title":"Framework7 toast — f7Toast","text":"f7Toast creates small toast notification server side.","code":""},{"path":"/reference/f7Toast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 toast — f7Toast","text":"","code":"f7Toast(   text,   position = c(\"bottom\", \"top\", \"center\"),   closeButton = TRUE,   closeButtonText = \"close\",   closeButtonColor = \"red\",   closeTimeout = 3000,   icon = NULL,   ...,   session = shiny::getDefaultReactiveDomain() )"},{"path":"/reference/f7Toast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 toast — f7Toast","text":"text Toast content. position Toast position c(\"bottom\", \"top\", \"center\"). closeButton Whether close toast button. TRUE default. closeButtonText Close button text. closeButtonColor Close button color. closeTimeout Time toast closes. icon Optional. Expect f7Icon. Warning: Adding icon hide close button. ... options. See https://framework7.io/docs/toast.html#toast-parameters. session Shiny session.","code":""},{"path":"/reference/f7Toast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 toast — f7Toast","text":"","code":"if (interactive()) {  library(shiny)  library(shinyMobile)  shinyApp(   ui = f7Page(     title = \"Toast\",     f7SingleLayout(       navbar = f7Navbar(title = \"f7Toast\"),       f7Button(inputId = \"toast\", label = \"Open Toast\")     )   ),   server = function(input, output, session) {     observeEvent(input$toast, {       f7Toast(         position = \"top\",         text = \"I am a toast. Eat me!\"       )     })   }  ) }"},{"path":"/reference/f7Toolbar.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 Toolbar — f7Toolbar","title":"Framework7 Toolbar — f7Toolbar","text":"f7Toolbar layout element located bottom top. internally used f7Tabs.","code":""},{"path":"/reference/f7Toolbar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 Toolbar — f7Toolbar","text":"","code":"f7Toolbar(   ...,   position = c(\"top\", \"bottom\"),   hairline = TRUE,   shadow = TRUE,   icons = FALSE,   scrollable = FALSE )"},{"path":"/reference/f7Toolbar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 Toolbar — f7Toolbar","text":"... Slot f7Link element. position Tabs position: \"top\" \"bottom\". hairline Whether display thin border top toolbar. TRUE default. shadow Whether display shadow. TRUE default. icons Whether use icons instead text. Either ios md icons. scrollable Whether allow scrolling. FALSE default.","code":""},{"path":"/reference/f7Toolbar.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Framework7 Toolbar — f7Toolbar","text":"David Granjon, dgranjon@ymail.com","code":""},{"path":"/reference/fab.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 floating action button (FAB) — f7Fab","title":"Framework7 floating action button (FAB) — f7Fab","text":"f7Fab generates nice button put f7Fabs. updateF7Fab changes label f7Fab input client.","code":""},{"path":"/reference/fab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 floating action button (FAB) — f7Fab","text":"","code":"f7Fab(inputId, label, width = NULL, ..., flag = NULL)  updateF7Fab(inputId, label = NULL, session = shiny::getDefaultReactiveDomain())"},{"path":"/reference/fab.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 floating action button (FAB) — f7Fab","text":"inputId id input object. label label set input object. width width input, e.g. '400px', '100%'; see validateCssUnit(). ... Named attributes applied button link. flag Additional text displayed next button content. works f7Fabs position parameter starting center-... session Shiny session object, usually default value suffice.","code":""},{"path":"/reference/fab.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Framework7 floating action button (FAB) — f7Fab","text":"David Granjon, dgranjon@ymail.com","code":""},{"path":"/reference/fab.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 floating action button (FAB) — f7Fab","text":"","code":"if (interactive()) {  library(shiny)  library(shinyMobile)   ui <- f7Page(    f7SingleLayout(     navbar = f7Navbar(title = \"updateF7Fab\"),     f7Fab(\"trigger\", \"Click me\")    )  )   server <- function(input, output, session) {    observeEvent(input$trigger, {      updateF7Fab(\"trigger\", label = \"Don't click me\")    })  } shinyApp(ui, server) }"},{"path":"/reference/fabs.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 container for floating action button (FAB) — f7Fabs","title":"Framework7 container for floating action button (FAB) — f7Fabs","text":"f7Fabs hosts multiple f7Fab. updateF7Fabs toggles f7Fabs server side. f7FabMorphTarget convert tag target morphing. See https://v5.framework7.io/docs/floating-action-button.html#fab-morph.","code":""},{"path":"/reference/fabs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 container for floating action button (FAB) — f7Fabs","text":"","code":"f7Fabs(   ...,   id = NULL,   position = c(\"right-top\", \"right-center\", \"right-bottom\", \"left-top\", \"left-center\",     \"left-bottom\", \"center-center\", \"center-top\", \"center-bottom\"),   color = NULL,   extended = FALSE,   label = NULL,   sideOpen = c(\"left\", \"right\", \"top\", \"bottom\", \"center\"),   morph = FALSE,   morphTarget = NULL )  updateF7Fabs(id, session = shiny::getDefaultReactiveDomain())  f7FabMorphTarget(tag)"},{"path":"/reference/fabs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 container for floating action button (FAB) — f7Fabs","text":"... Slot f7Fab. id id input object. position Container position. color Container color. extended TRUE, FAB wider. allows use label (see ). label Container label. extended TRUE. sideOpen container pressed, indicate buttons displayed. morph Whether allow FAB transofrm another UI element. morphTarget CSS selector morph target: \".toolbar\" instance. session Shiny session object, usually default value suffice. tag Target tag.","code":""},{"path":"/reference/fabs.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Framework7 container for floating action button (FAB) — f7Fabs","text":"background color might issue depending parent container. Consider experimental.","code":""},{"path":"/reference/fabs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Framework7 container for floating action button (FAB) — f7Fabs","text":"David Granjon, dgranjon@ymail.com","code":""},{"path":"/reference/fabs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 container for floating action button (FAB) — f7Fabs","text":"","code":"if(interactive()){  library(shiny)  library(shinyMobile)   shinyApp(   ui = f7Page(     title = \"Floating action buttons\",     f7SingleLayout(      navbar = f7Navbar(title = \"f7Fabs\"),      f7Fabs(       extended = TRUE,       label = \"Menu\",       position = \"center-top\",       color = \"yellow\",       sideOpen = \"right\",       lapply(1:4, function(i) f7Fab(paste0(\"btn\", i), i))     ),     lapply(1:4, function(i) verbatimTextOutput(paste0(\"res\", i))),      f7Fabs(       position = \"center-center\",       color = \"purple\",       sideOpen = \"center\",       lapply(5:8, function(i) f7Fab(paste0(\"btn\", i), i))     ),     lapply(5:8, function(i) verbatimTextOutput(paste0(\"res\", i))),      f7Fabs(       position = \"left-bottom\",       color = \"pink\",       sideOpen = \"top\",       lapply(9:12, function(i) f7Fab(paste0(\"btn\", i), i))     )     )    ),   server = function(input, output) {     lapply(1:12, function(i) {       output[[paste0(\"res\", i)]] <- renderPrint(input[[paste0(\"btn\", i)]])     })   }  ) }  if (interactive()) {  library(shiny)  library(shinyMobile)   shinyApp(   ui = f7Page(     title = \"Update f7Fabs\",     f7SingleLayout(       navbar = f7Navbar(title = \"Update f7Fabs\"),       f7Button(inputId = \"toggleFabs\", label = \"Toggle Fabs\"),       f7Fabs(         position = \"center-center\",         id = \"fabs\",         lapply(1:3, function(i) f7Fab(inputId = i, label = i))       )     )   ),   server = function(input, output, session) {     observe(print(input$fabs))     observeEvent(input$toggleFabs, {       updateF7Fabs(id = \"fabs\")     })   }  ) } if (interactive()) {  library(shiny)  library(shinyMobile)   shinyApp(    ui = f7Page(      f7SingleLayout(        navbar = f7Navbar(title = \"f7Fabs Morph\"),        toolbar = f7Toolbar(          position = \"bottom\",          lapply(1:3, function(i) f7Link(label = i, href = \"#\") %>% f7FabClose())        ) %>% f7FabMorphTarget(),        # put an empty f7Fabs container        f7Fabs(          extended = TRUE,          label = \"Open\",          position = \"center-top\",          color = \"yellow\",          sideOpen = \"right\",          morph = TRUE,          morphTarget = \".toolbar\"        )      )     ),    server = function(input, output) {}  ) }"},{"path":"/reference/gauge.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 gauge — f7Gauge","title":"Framework7 gauge — f7Gauge","text":"f7Gauge creates gauge instance. updateF7Gauge updates framework7 gauge server side.","code":""},{"path":"/reference/gauge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 gauge — f7Gauge","text":"","code":"f7Gauge(   id,   type = \"circle\",   value,   size = 200,   bgColor = \"transparent\",   borderBgColor = \"#eeeeee\",   borderColor = \"#000000\",   borderWidth = \"10\",   valueText = NULL,   valueTextColor = \"#000000\",   valueFontSize = \"31\",   valueFontWeight = \"500\",   labelText = NULL,   labelTextColor = \"#888888\",   labelFontSize = \"14\",   labelFontWeight = \"400\" )  updateF7Gauge(   id,   value = NULL,   labelText = NULL,   size = NULL,   bgColor = NULL,   borderBgColor = NULL,   borderColor = NULL,   borderWidth = NULL,   valueText = NULL,   valueTextColor = NULL,   valueFontSize = NULL,   valueFontWeight = NULL,   labelTextColor = NULL,   labelFontSize = NULL,   labelFontWeight = NULL,   session = shiny::getDefaultReactiveDomain() )"},{"path":"/reference/gauge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 gauge — f7Gauge","text":"id Gauge id. type Gauge type. Can \"circle\" \"semicircle\". Default \"circle.\" value New value. Numeric 0 100. size Generated SVG image size (px). Default 200. bgColor Gauge background color. Can valid color string, e.g. #ff00ff, rgb(0,0,255), etc. Default \"transparent\". borderBgColor Main border/stroke background color. borderColor Main border/stroke color. borderWidth Main border/stroke width. valueText Gauge value text (large text center gauge). valueTextColor Value text color. valueFontSize Value text font size. valueFontWeight Value text font weight. labelText Gauge additional label text. labelTextColor Label text color. labelFontSize Label text font size. labelFontWeight Label text font weight. session Shiny session object.","code":""},{"path":"/reference/gauge.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Framework7 gauge — f7Gauge","text":"David Granjon dgranjon@ymail.com","code":""},{"path":"/reference/gauge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 gauge — f7Gauge","text":"","code":"# Gauge if(interactive()){  library(shiny)  library(shinyMobile)   shinyApp(   ui = f7Page(     title = \"Gauges\",     f7SingleLayout(      navbar = f7Navbar(title = \"f7Gauge\"),      f7Block(       f7Gauge(        id = \"mygauge\",        type  = \"semicircle\",        value = 50,        borderColor = \"#2196f3\",        borderWidth = 10,        valueFontSize = 41,        valueTextColor = \"#2196f3\",        labelText = \"amount of something\"       )      )     )   ),   server = function(input, output) {}  ) }  if (interactive()) {  library(shiny)  library(shinyMobile)    shinyApp(     ui = f7Page(        title = \"Gauges\",        f7SingleLayout(           navbar = f7Navbar(title = \"update f7Gauge\"),           f7Gauge(              id = \"mygauge\",              type  = \"semicircle\",              value = 50,              borderColor = \"#2196f3\",              borderWidth = 10,              valueFontSize = 41,              valueTextColor = \"#2196f3\",              labelText = \"amount of something\"           ),           f7Button(\"go\", \"Update Gauge\")        )     ),     server = function(input, output, session) {        observeEvent(input$go, {           updateF7Gauge(id = \"mygauge\", value = 75, labelText = \"New label!\")        })     }  ) }"},{"path":"/reference/getF7Colors.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to get all colors available in shinyMobile — getF7Colors","title":"Function to get all colors available in shinyMobile — getF7Colors","text":"Function get colors available shinyMobile","code":""},{"path":"/reference/getF7Colors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to get all colors available in shinyMobile — getF7Colors","text":"","code":"getF7Colors()"},{"path":"/reference/getF7Colors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to get all colors available in shinyMobile — getF7Colors","text":"vector containing colors","code":""},{"path":"/reference/inserttab.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 tab insertion — insertF7Tab","title":"Framework7 tab insertion — insertF7Tab","text":"insertF7Tab inserts f7Tab f7Tabs.","code":""},{"path":"/reference/inserttab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 tab insertion — insertF7Tab","text":"","code":"insertF7Tab(   id,   tab,   target = NULL,   position = c(\"before\", \"after\"),   select = FALSE,   session = shiny::getDefaultReactiveDomain() )"},{"path":"/reference/inserttab.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 tab insertion — insertF7Tab","text":"id f7Tabs id. tab f7Tab insert. target f7Tab new tab inserted. position Insert : c(\"\", \"\"). select Whether select newly inserted tab. FALSE default. session Shiny session object.","code":""},{"path":"/reference/inserttab.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 tab insertion — insertF7Tab","text":"","code":"if (interactive()) {  # Insert after  library(shiny)  library(shinyMobile)  shinyApp(    ui = f7Page(      title = \"Insert a tab Before the target\",      f7TabLayout(        navbar = f7Navbar(          title = \"insertF7Tab\",          hairline = FALSE,          shadow = TRUE,          leftPanel = TRUE,          rightPanel = TRUE        ),        f7Tabs(          animated = TRUE,          id = \"tabs\",          f7Tab(            tabName = \"Tab1\",            icon = f7Icon(\"airplane\"),            active = TRUE,            \"Tab 1\",            f7Button(inputId = \"add\", label = \"Add tabs\")          ),          f7Tab(            tabName = \"Tab2\",            icon = f7Icon(\"today\"),            active = FALSE,            f7Button(inputId=\"stay\", label = \"Stay\"),            \"Tab 2\"          )        )      )    ),    server = function(input, output, session) {      observeEvent(input$stay, {        f7Toast(\"Please stay\")      })      observeEvent(input$add, {        insertF7Tab(          id = \"tabs\",          position = \"after\",          target = \"Tab1\",          tab = f7Tab (            # Use multiple elements to test for accessor function            f7Text(inputId = \"my_text\", label =\"Enter something\", placeholder = \"What?\"),            f7Text(inputId = \"my_other\", label =\"Else:\", placeholder = \"Else ?\"),            tabName = paste0(\"tabx_\", input$go),            \"Test2\",            icon = f7Icon(\"app_badge\")          ),          select = TRUE        )      })    }  )  # Insert in an empty tabsetpanel  library(shiny)  ui <- f7Page(    f7SingleLayout(      navbar = f7Navbar(),      f7Button(\"add\", \"Add 'Dynamic' tab\"),      br(),      f7Tabs(id = \"tabs\"),    )  )  server <- function(input, output, session) {    observeEvent(input$add, {      insertF7Tab(        id = \"tabs\",        f7Tab(title = \"Dynamic\", tabName = \"Dynamic\", \"This a dynamically-added tab\"),        target = NULL      )    })  }  shinyApp(ui, server) }"},{"path":"/reference/menu.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 menu container — f7Menu","title":"Framework7 menu container — f7Menu","text":"f7Menu container f7MenuItem /f7MenuDropdown. f7MenuItem creates special action button f7Menu. f7MenuDropdown creates dropdown menu f7Menu. f7MenuDropdownDivider creates dropdown divider f7MenuDropdown. updateF7MenuDropdown toggles f7MenuDropdown client.","code":""},{"path":"/reference/menu.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 menu container — f7Menu","text":"","code":"f7Menu(...)  f7MenuItem(inputId, label)  f7MenuDropdown(..., id = NULL, label, side = c(\"left\", \"center\", \"right\"))  f7MenuDropdownDivider()  updateF7MenuDropdown(id, session = shiny::getDefaultReactiveDomain())"},{"path":"/reference/menu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 menu container — f7Menu","text":"... Slot f7MenuItem f7MenuDropdownDivider. inputId Menu item input id. label Button label. id Menu target. side Dropdown opening side. Choose among c(\"left\", \"center\", \"right\"). session Shiny session object.","code":""},{"path":"/reference/menu.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 menu container — f7Menu","text":"","code":"# Menu container if (interactive()) {  library(shiny)  library(shinyMobile)  shinyApp(   ui = f7Page(     title = \"Menus\",     f7SingleLayout(       navbar = f7Navbar(         title = \"f7Menu\",         hairline = FALSE,         shadow = TRUE       ),       f7Button(inputId = \"toggle\", label = \"Toggle menu\"),       f7Menu(         f7MenuDropdown(           id = \"menu1\",           label = \"Menu 1\",           f7MenuItem(inputId = \"item1\", \"Item 1\"),           f7MenuItem(inputId = \"item2\", \"Item 2\"),           f7MenuDropdownDivider(),           f7MenuItem(inputId = \"item3\", \"Item 3\")         )       )     )   ),   server = function(input, output, session) {     observeEvent(input$toggle, {       updateF7MenuDropdown(\"menu1\")     })      observeEvent(input$item1, {       f7Notif(text = \"Well done!\")     })      observe({       print(input$item1)       print(input$menu1)     })   }  ) }"},{"path":"/reference/messagebar.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 message bar. — f7MessageBar","title":"Framework7 message bar. — f7MessageBar","text":"f7MessageBar creates message text container type new messages. Insert f7Messages. See examples. updateF7MessageBar updates message bar content server side.","code":""},{"path":"/reference/messagebar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 message bar. — f7MessageBar","text":"","code":"f7MessageBar(inputId, placeholder = \"Message\")  updateF7MessageBar(   inputId,   value = NULL,   placeholder = NULL,   session = shiny::getDefaultReactiveDomain() )"},{"path":"/reference/messagebar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 message bar. — f7MessageBar","text":"inputId f7MessageBar unique id. placeholder New placeholder value. value New value. session Shiny session object.","code":""},{"path":"/reference/messagebar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 message bar. — f7MessageBar","text":"","code":"if (interactive()) {  library(shiny)  library(shinyMobile)  shinyApp(   ui = f7Page(     title = \"Update message bar\",     f7SingleLayout(       navbar = f7Navbar(         title = \"Message bar\",         hairline = FALSE,         shadow = TRUE       ),       toolbar = f7Toolbar(         position = \"bottom\",         f7Link(label = \"Link 1\", href = \"https://www.google.com\"),         f7Link(label = \"Link 2\", href = \"https://www.google.com\")       ),       # main content       f7Segment(         container = \"segment\",         f7Button(\"updateMessageBar\", \"Update value\"),         f7Button(\"updateMessageBarPlaceholder\", \"Update placeholder\")       ),       f7MessageBar(inputId = \"mymessagebar\", placeholder = \"Message\"),       uiOutput(\"messageContent\")     )   ),   server = function(input, output, session) {      output$messageContent <- renderUI({       req(input$mymessagebar)       tagList(         f7BlockTitle(\"Message Content\", size = \"large\"),         f7Block(strong = TRUE, inset = TRUE, input$mymessagebar)       )     })      observeEvent(input$updateMessageBar, {       updateF7MessageBar(         inputId = \"mymessagebar\",         value = \"sjsjsj\"       )     })      observeEvent(input$updateMessageBarPlaceholder, {       updateF7MessageBar(         inputId = \"mymessagebar\",         placeholder = \"Enter your message\"       )     })   }  ) }"},{"path":"/reference/messages.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 messages container — f7Messages","title":"Framework7 messages container — f7Messages","text":"f7Messages empty container targeted updateF7Messages include multiple f7Message. f7Message creates message item inserted f7Messages updateF7Messages. updateF7Messages add messages f7Messages container.","code":""},{"path":"/reference/messages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 messages container — f7Messages","text":"","code":"f7Messages(   id,   title = NULL,   autoLayout = TRUE,   newMessagesFirst = FALSE,   scrollMessages = TRUE,   scrollMessagesOnEdge = TRUE )  f7Message(   text,   name,   type = c(\"sent\", \"received\"),   header = NULL,   footer = NULL,   avatar = NULL,   textHeader = NULL,   textFooter = NULL,   image = NULL,   imageSrc = NULL,   cssClass = NULL )  updateF7Messages(   id,   messages,   showTyping = FALSE,   session = shiny::getDefaultReactiveDomain() )"},{"path":"/reference/messages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 messages container — f7Messages","text":"id Reference f7Messages container. title Optional messages title. autoLayout Enable Auto Layout add required additional classes automatically based passed conditions. newMessagesFirst Enable want use new messages top, instead bottom. scrollMessages Enable/disable messages auto scrolling adding new message. scrollMessagesOnEdge enabled messages auto scrolling happen user top/bottom messages view. text Message text. name Sender name. type Message type - sent received. header Single message header. footer Single message footer. avatar Sender avatar URL string. textHeader Message text header. textFooter Message text footer. image Message image HTML string, e.g. <img src=\"path//image\">. Can used instead imageSrc parameter. imageSrc Message image URL string. Can used instead image parameter. cssClass Additional CSS class set message HTML element. messages List f7Messages. showTyping Show typing new message comes. Default FALSE. work yet... session Shiny session object","code":""},{"path":"/reference/messages.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 messages container — f7Messages","text":"","code":"if (interactive()) {  library(shiny)  library(shinyMobile)  shinyApp(   ui = f7Page(     title = \"Messages\",     f7SingleLayout(       navbar = f7Navbar(         title = \"Messages\",         hairline = FALSE,         shadow = TRUE       ),       toolbar = f7MessageBar(inputId = \"mymessagebar\", placeholder = \"Message\"),       # main content       f7Messages(id = \"mymessages\", title = \"My message\")      )   ),   server = function(input, output, session) {     observe({       print(input[[\"mymessagebar-send\"]])       print(input$mymessages)     })     observeEvent(input[[\"mymessagebar-send\"]], {       updateF7Messages(         id = \"mymessages\",         list(          f7Message(           text = input$mymessagebar,           name = \"David\",           type = \"sent\",           header = \"Message Header\",           footer = \"Message Footer\",           textHeader = \"Text Header\",           textFooter = \"text Footer\",           avatar = \"https://cdn.framework7.io/placeholder/people-100x100-7.jpg\"          )         )       )     })      observe({       invalidateLater(5000)       names <- c(\"Victor\", \"John\")       name <- sample(names, 1)        updateF7Messages(         id = \"mymessages\",         list(          f7Message(           text = \"Some message\",           name = name,           type = \"received\",           avatar = \"https://cdn.framework7.io/placeholder/people-100x100-9.jpg\"          )         )       )     })    }  ) }"},{"path":"/reference/navbar.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 Navbar — f7Navbar","title":"Framework7 Navbar — f7Navbar","text":"Build navbar layout element insert f7SingleLayout, f7TabLayout f7SplitLayout. updateF7Navbar toggles f7Navbar component server.","code":""},{"path":"/reference/navbar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 Navbar — f7Navbar","text":"","code":"f7Navbar(   ...,   subNavbar = NULL,   title = NULL,   subtitle = NULL,   hairline = TRUE,   shadow = TRUE,   bigger = FALSE,   transparent = FALSE,   leftPanel = FALSE,   rightPanel = FALSE )  updateF7Navbar(   animate = TRUE,   hideStatusbar = FALSE,   session = shiny::getDefaultReactiveDomain() )"},{"path":"/reference/navbar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 Navbar — f7Navbar","text":"... Slot f7SearchbarTrigger. compatible f7Panel. subNavbar f7SubNavbar slot, . title Navbar title. subtitle Navbar subtitle. compatible bigger. hairline Whether display thin border top navbar. TRUE default. shadow Whether display shadow. TRUE default. bigger Whether display bigger title. FALSE default. compatible subtitle. transparent Whether navbar transparent. FALSE default. works bigger TRUE. leftPanel Whether enable left panel. FALSE default. rightPanel Whether enable right panel. FALSE default. animate Whether hidden animation . default TRUE. hideStatusbar FALSE (default) hides navbar partially keeping space required cover statusbar area. Otherwise, navbar fully hidden. session Shiny session object.","code":""},{"path":"/reference/navbar.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Framework7 Navbar — f7Navbar","text":"Currently, bigger parameters mess CSS.","code":""},{"path":"/reference/navbar.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Framework7 Navbar — f7Navbar","text":"David Granjon, dgranjon@ymail.com","code":""},{"path":"/reference/navbar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 Navbar — f7Navbar","text":"","code":"# Toggle f7Navbar if (interactive()) {  library(shiny)  library(shinyMobile)   shinyApp(     ui = f7Page(        title = \"Show navbar\",        f7SingleLayout(           navbar = f7Navbar(\"Hide/Show navbar\"),           f7Button(inputId = \"toggle\", \"Toggle navbar\", color = \"red\")        )     ),     server = function(input, output, session) {         observeEvent(input$toggle, {           updateF7Navbar()        })     }  ) }"},{"path":"/reference/panel.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 panel — f7Panel","title":"Framework7 panel — f7Panel","text":"f7Panel sidebar element. may used simple sidebar container f7PanelMenu case f7SplitLayout. updateF7Panel toggles f7Panel server.","code":""},{"path":"/reference/panel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 panel — f7Panel","text":"","code":"f7Panel(   ...,   id = NULL,   title = NULL,   side = c(\"left\", \"right\"),   theme = c(\"dark\", \"light\"),   effect = c(\"reveal\", \"cover\"),   resizable = FALSE )  updateF7Panel(id, session = shiny::getDefaultReactiveDomain())"},{"path":"/reference/panel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 panel — f7Panel","text":"... Panel content. Slot f7PanelMenu, used sidebar. id Panel unique id. title Panel title. side Panel side: \"left\" \"right\". theme Panel background color: \"dark\" \"light\". effect Whether panel behave opened: \"cover\" \"reveal\". resizable Whether enable panel resize. FALSE default. session Shiny session object.","code":""},{"path":"/reference/panel.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Framework7 panel — f7Panel","text":"David Granjon, dgranjon@ymail.com","code":""},{"path":"/reference/panel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 panel — f7Panel","text":"","code":"if (interactive()) {  library(shiny)  library(shinyMobile)  shinyApp(    ui = f7Page(      title = \"Panels\",      f7SingleLayout(        navbar = f7Navbar(          title = \"Single Layout\",          hairline = FALSE,          shadow = TRUE,          leftPanel = TRUE,          rightPanel = TRUE        ),        panels = tagList(          f7Panel(side = \"left\", id = \"mypanel1\"),          f7Panel(side = \"right\", id = \"mypanel2\")        ),        toolbar = f7Toolbar(          position = \"bottom\",          icons = TRUE,          hairline = FALSE,          shadow = FALSE,          f7Link(label = \"Link 1\", href = \"https://www.google.com\"),          f7Link(label = \"Link 2\", href = \"https://www.google.com\")        ),        # main content        f7Shadow(          intensity = 10,          hover = TRUE,          f7Card(            title = \"Card header\",            sliderInput(\"obs\", \"Number of observations\", 0, 1000, 500),            h1(\"You only see me by opening the left panel\"),            plotOutput(\"distPlot\"),            footer = tagList(              f7Button(color = \"blue\", label = \"My button\", href = \"https://www.google.com\"),              f7Badge(\"Badge\", color = \"green\")            )          )        )      )    ),    server = function(input, output, session) {       observeEvent(input$mypanel2, {         state <- if (input$mypanel2) \"open\" else \"closed\"         f7Toast(          text = paste0(\"Right panel is \", state),          position = \"center\",          closeTimeout = 1000,          closeButton = FALSE        )      })       output$distPlot <- renderPlot({        if (input$mypanel1) {          dist <- rnorm(input$obs)          hist(dist)        }      })    }  ) } # Toggle panel if (interactive()) {  library(shiny)  library(shinyMobile)  shinyApp(    ui = f7Page(      title = \"Update panel menu\",      f7SingleLayout(        navbar = f7Navbar(          title = \"Single Layout\",          hairline = FALSE,          shadow = TRUE,          leftPanel = TRUE,          rightPanel = TRUE        ),        panels = tagList(          f7Panel(side = \"left\", id = \"mypanel1\", theme = \"light\", effect = \"cover\"),          f7Panel(side = \"right\", id = \"mypanel2\", theme = \"light\")        ),        toolbar = f7Toolbar(          position = \"bottom\",          icons = TRUE,          hairline = FALSE,          shadow = FALSE,          f7Link(label = \"Link 1\", href = \"https://www.google.com\"),          f7Link(label = \"Link 2\", href = \"https://www.google.com\")        )      )    ),    server = function(input, output, session) {       observe({        print(          list(            panel1 = input$mypanel1,            panel2 = input$mypanel2          )        )      })       observe({        invalidateLater(2000)        updateF7Panel(id = \"mypanel1\")      })     }  ) }"},{"path":"/reference/panelmenu.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 sidebar menu — f7PanelMenu","title":"Framework7 sidebar menu — f7PanelMenu","text":"f7PanelMenu creates menu f7Panel. may contain multiple f7PanelItem. f7PanelItem creates Framework7 sidebar menu item f7SplitLayout.","code":""},{"path":"/reference/panelmenu.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 sidebar menu — f7PanelMenu","text":"","code":"f7PanelMenu(..., id = NULL)  f7PanelItem(title, tabName, icon = NULL, active = FALSE)"},{"path":"/reference/panelmenu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 sidebar menu — f7PanelMenu","text":"... Slot f7PanelItem. id Unique id access currently selected item. title Item name. tabName Item unique tabName. Must correspond passed f7Item. icon Item icon. active Whether item active start. Default FALSE.","code":""},{"path":"/reference/panelmenu.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Framework7 sidebar menu — f7PanelMenu","text":"David Granjon, dgranjon@ymail.com","code":""},{"path":"/reference/picker.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 picker input — f7Picker","title":"Framework7 picker input — f7Picker","text":"f7Picker generates picker input. updateF7Picker changes value picker input client.","code":""},{"path":"/reference/picker.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 picker input — f7Picker","text":"","code":"f7Picker(   inputId,   label,   placeholder = NULL,   value = choices[1],   choices,   rotateEffect = TRUE,   openIn = \"auto\",   scrollToInput = FALSE,   closeByOutsideClick = TRUE,   toolbar = TRUE,   toolbarCloseText = \"Done\",   sheetSwipeToClose = FALSE )  updateF7Picker(   inputId,   value = NULL,   choices = NULL,   rotateEffect = NULL,   openIn = NULL,   scrollToInput = NULL,   closeByOutsideClick = NULL,   toolbar = NULL,   toolbarCloseText = NULL,   sheetSwipeToClose = NULL,   session = shiny::getDefaultReactiveDomain() )"},{"path":"/reference/picker.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 picker input — f7Picker","text":"inputId id input object. label Picker label. placeholder Text write container. value Picker initial value, . choices New picker choices. rotateEffect Enables 3D rotate effect. Default TRUE. openIn Can auto, popover (open picker popover), sheet (open sheet modal). case auto open sheet modal small screens popover large screens. Default auto. scrollToInput Scroll viewport (page-content) input picker opened. Default FALSE. closeByOutsideClick enabled, picker closed clicking outside picker related input element. Default TRUE. toolbar Enables picker toolbar. Default TRUE. toolbarCloseText Text Done/Close toolbar button. sheetSwipeToClose Enables ability close Picker sheet swipe. Default FALSE. session Shiny session object, usually default value suffice.","code":""},{"path":"/reference/picker.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Framework7 picker input — f7Picker","text":"David Granjon, dgranjon@ymail.com","code":""},{"path":"/reference/picker.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 picker input — f7Picker","text":"","code":"# Picker input if(interactive()){  library(shiny)  library(shinyMobile)   shinyApp(    ui = f7Page(     title = \"My app\",     f7SingleLayout(      navbar = f7Navbar(title = \"f7Picker\"),      f7Picker(       inputId = \"mypicker\",       placeholder = \"Some text here!\",       label = \"Picker Input\",       choices = c('a', 'b', 'c')      ),      textOutput(\"pickerval\")     )    ),    server = function(input, output) {     output$pickerval <- renderText(input$mypicker)    }  ) }  # Update picker input if (interactive()) {  library(shiny)  library(shinyMobile)  shinyApp(   ui = f7Page(     title = \"My app\",     f7SingleLayout(       navbar = f7Navbar(title = \"Update picker\"),       f7Card(         f7Button(inputId = \"update\", label = \"Update picker\"),         f7Picker(           inputId = \"mypicker\",           placeholder = \"Some text here!\",           label = \"Picker Input\",           choices = c('a', 'b', 'c')         ),         verbatimTextOutput(\"pickerval\"),         br(),         f7Button(inputId = \"removeToolbar\", label = \"Remove picker toolbar\", color = \"red\")       )     )   ),   server = function(input, output, session) {      output$pickerval <- renderText(input$mypicker)      observeEvent(input$update, {       updateF7Picker(         inputId = \"mypicker\",         value = \"b\",         choices = letters,         openIn = \"sheet\",         toolbarCloseText = \"Prout\",         sheetSwipeToClose = TRUE       )     })      observeEvent(input$removeToolbar, {       updateF7Picker(         inputId = \"mypicker\",         value = \"b\",         choices = letters,         openIn = \"sheet\",         toolbar = FALSE       )     })    }  ) }"},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/popover.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Framework7 popover — addF7Popover","title":"Add Framework7 popover — addF7Popover","text":"addF7Popover adds popover given target show enabled toggleF7Popover. toggleF7Popover toggles visibility popover. See example use case.","code":""},{"path":"/reference/popover.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Framework7 popover — addF7Popover","text":"","code":"addF7Popover(   id = NULL,   selector = NULL,   options,   session = shiny::getDefaultReactiveDomain() )  toggleF7Popover(   id = NULL,   selector = NULL,   session = shiny::getDefaultReactiveDomain() )"},{"path":"/reference/popover.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Framework7 popover — addF7Popover","text":"id Popover target id. selector jQuery selector. Allow customization target (nested tags). options List options pass popover. See https://framework7.io/docs/popover.html#popover-parameters. session Shiny session object.","code":""},{"path":"/reference/popover.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Framework7 popover — addF7Popover","text":"","code":"if (interactive()) {  library(shiny)  library(shinyMobile)   lorem_ipsum <- \"Lorem ipsum dolor sit amet,            consectetur adipiscing elit. Quisque ac diam ac quam euismod            porta vel a nunc. Quisque sodales scelerisque est, at porta            justo cursus ac.\"   popovers <- data.frame(    id = paste0(\"target_\", 1:10),    content = paste(\"Popover content\", 1:10, lorem_ipsum),    stringsAsFactors = FALSE  )    shinyApp(    ui = f7Page(      options = list(theme = \"ios\"),      title = \"f7Popover\",      f7SingleLayout(        navbar = f7Navbar(          title = \"f7Popover\",          subNavbar = f7SubNavbar(            f7Toggle(              inputId = \"toggle\",              \"Enable popover\",              color = \"green\",              checked = TRUE            )          )        ),        f7Segment(          lapply(seq_len(nrow(popovers)), function(i) {            f7Button(              inputId = sprintf(\"target_%s\", i),              sprintf(\"Target %s\", i)            )          })        )      )    ),    server = function(input, output, session) {      # Enable/disable (don't run first)      observeEvent(input$toggle, {        lapply(seq_len(nrow(popovers)), function(i) toggleF7Popover(id = popovers[i, \"id\"]) )      }, ignoreInit = TRUE)       # show      lapply(seq_len(nrow(popovers)), function(i) {        observeEvent(input[[popovers[i, \"id\"]]], {          addF7Popover(            id = popovers[i, \"id\"],            options = list(              content = popovers[i, \"content\"]            )          )        })      })    }  ) }"},{"path":"/reference/preloader.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 preloader — showF7Preloader","title":"Framework7 preloader — showF7Preloader","text":"showF7Preloader shows preloader. f7HidePreloader hides preloader.","code":""},{"path":"/reference/preloader.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 preloader — showF7Preloader","text":"","code":"showF7Preloader(   target = NULL,   color = NULL,   session = shiny::getDefaultReactiveDomain() )  f7HidePreloader(target = NULL, session = shiny::getDefaultReactiveDomain())"},{"path":"/reference/preloader.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 preloader — showF7Preloader","text":"target Element preloader overlay added. color Preloader color. session Shiny session object.","code":""},{"path":"/reference/preloader.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 preloader — showF7Preloader","text":"","code":"if (interactive()) {  library(shiny)  library(shinyMobile)   # basic preloader with red color  shinyApp(   ui = f7Page(     title = \"Preloader\",     f7SingleLayout(       navbar = f7Navbar(         title = \"Preloader\",         hairline = FALSE,         shadow = TRUE       ),       # main content       f7Button(\"showLoader\", \"Show loader\"),       f7Shadow(         intensity = 10,         hover = TRUE,         f7Card(           title = \"Card header\",           f7Slider(\"obs\", \"Number of observations\", 0, 1000, 500),           plotOutput(\"distPlot\")         )       )     )   ),   server = function(input, output, session) {     output$distPlot <- renderPlot({       dist <- rnorm(input$obs)       hist(dist)     })      observeEvent(input$showLoader, {       showF7Preloader(color = \"red\")       Sys.sleep(2)       f7HidePreloader()     })   }  )   # preloader in container  shinyApp(   ui = f7Page(     title = \"Preloader in container\",     f7SingleLayout(       navbar = f7Navbar(         title = \"Preloader in container\",         hairline = FALSE,         shadow = TRUE       ),       # main content       f7Shadow(         intensity = 10,         hover = TRUE,         f7Card(           title = \"Card header\",           f7Slider(\"obs\", \"Number of observations\", 0, 1000, 500),           plotOutput(\"distPlot\")         )       ),       f7Card(\"This is a simple card with plain text,        but cards can also contain their own header,        footer, list view, image, or any other element.\")     )   ),   server = function(input, output, session) {     output$distPlot <- renderPlot({       dist <- rnorm(input$obs)       hist(dist)     })      observeEvent(input$obs, {       showF7Preloader(target = \"#distPlot\", color = \"red\")       Sys.sleep(2)       f7HidePreloader()     })   }  ) }"},{"path":"/reference/preview_mobile.html","id":null,"dir":"Reference","previous_headings":"","what":"Allow to preview a given app on different devices. — preview_mobile","title":"Allow to preview a given app on different devices. — preview_mobile","text":"Allow preview given app different devices.","code":""},{"path":"/reference/preview_mobile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Allow to preview a given app on different devices. — preview_mobile","text":"","code":"preview_mobile(   appPath = NULL,   url = NULL,   port = 3838,   device = c(\"iphoneX\", \"galaxyNote8\", \"iphone8\", \"iphone8+\", \"iphone5s\", \"iphone5c\",     \"ipadMini\", \"iphone4s\", \"nexus5\", \"galaxyS5\", \"htcOne\"),   color = NULL,   landscape = FALSE )"},{"path":"/reference/preview_mobile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Allow to preview a given app on different devices. — preview_mobile","text":"appPath App preview local. url App preview online. port Default port. Ignored url provided. device Wrapper devices. color Wrapper color. iphone8 (black, silver, gold), iphone8+ (black, silver, gold), iphone5s (black, silver, gold), iphone5c (white,red , yellow, green, blue), iphone4s (black, silver), ipadMini (black, silver) galaxyS5 (black, white). landscape Whether put device wrapper landscape mode. Default FALSE.","code":""},{"path":"/reference/preview_mobile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Allow to preview a given app on different devices. — preview_mobile","text":"shiny app containing iframe surrounded device wrapper.","code":""},{"path":"/reference/preview_mobile.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Allow to preview a given app on different devices. — preview_mobile","text":"choose either url appPath!","code":""},{"path":"/reference/preview_mobile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Allow to preview a given app on different devices. — preview_mobile","text":"","code":"if (interactive()) {  library(shiny)  library(shinyMobile)  preview_mobile(appPath = \"~/whatever\", device = \"galaxyNote8\")  preview_mobile(url = \"https://dgranjon.shinyapps.io/miniUI2DemoMd\", device = \"ipadMini\") }"},{"path":"/reference/progress.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 progress bar — f7Progress","title":"Framework7 progress bar — f7Progress","text":"f7Progress creates progress bar. updateF7Progress update framework7 progress bar server side","code":""},{"path":"/reference/progress.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 progress bar — f7Progress","text":"","code":"f7Progress(id, value = NULL, color)  updateF7Progress(id, value, session = shiny::getDefaultReactiveDomain())"},{"path":"/reference/progress.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 progress bar — f7Progress","text":"id Unique progress bar id. value New value. color Progress color. See https://framework7.io/docs/progressbar.html. session Shiny session object.","code":""},{"path":"/reference/progress.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Framework7 progress bar — f7Progress","text":"David Granjon, dgranjon@ymail.com","code":""},{"path":"/reference/progress.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 progress bar — f7Progress","text":"","code":"# Progress bars if(interactive()){  library(shiny)  library(shinyMobile)   shinyApp(    ui = f7Page(     title = \"Progress\",     f7SingleLayout(      navbar = f7Navbar(title = \"f7Progress\"),      f7Block(f7Progress(id = \"pg1\", value = 10, color = \"pink\")),      f7Block(f7Progress(id = \"pg2\", value = 100, color = \"green\")),      f7Block(f7Progress(id = \"pg3\", value = 50, color = \"orange\"))     )    ),    server = function(input, output) {}  ) }  # Update progress if (interactive()) {  library(shiny)  library(shinyMobile)   shinyApp(    ui = f7Page(      title = \"Update Progress\",      f7SingleLayout(        navbar = f7Navbar(title = \"f7Progress\"),        f7Block(          f7Progress(id = \"pg1\", value = 10, color = \"blue\")        ),        f7Slider(          inputId = \"obs\",          label = \"Progress value\",          max = 100,          min = 0,          value = 50,          scale = TRUE        )      )    ),    server = function(input, output, session) {      observeEvent(input$obs, {        updateF7Progress(id = \"pg1\", value = input$obs)      })    }  ) }"},{"path":"/reference/radio.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 radio input — f7Radio","title":"Framework7 radio input — f7Radio","text":"f7Radio creates radio button input. updateF7Radio updates radio button input.","code":""},{"path":"/reference/radio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 radio input — f7Radio","text":"","code":"f7Radio(inputId, label, choices = NULL, selected = NULL)  updateF7Radio(   inputId,   label = NULL,   choices = NULL,   selected = NULL,   session = shiny::getDefaultReactiveDomain() )"},{"path":"/reference/radio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 radio input — f7Radio","text":"inputId Radio input id. label New radio label choices New list choices. selected New selected element. NULL default. session Shiny session object.","code":""},{"path":"/reference/radio.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 radio input — f7Radio","text":"","code":"if (interactive()) {  library(shiny)  library(shinyMobile)   shinyApp(    ui = f7Page(     title = \"My app\",     f7SingleLayout(      navbar = f7Navbar(title = \"f7Radio\"),      f7Radio(       inputId = \"radio\",       label = \"Choose a fruit:\",       choices = c(\"banana\", \"apple\", \"peach\"),       selected = \"apple\"      ),      plotOutput(\"plot\")     )    ),    server = function(input, output) {     output$plot <- renderPlot({      if (input$radio == \"apple\") hist(mtcars[, \"mpg\"])     })    }  ) } # Update radio if (interactive()) {  library(shiny)  library(shinyMobile)   shinyApp(   ui = f7Page(     title = \"Update radio\",     f7SingleLayout(       navbar = f7Navbar(title = \"Update f7Radio\"),       f7Button(\"go\", \"Update radio\"),       f7Radio(         inputId = \"radio\",         label = \"Choose a fruit:\",         choices = c(\"banana\", \"apple\", \"peach\"),         selected = \"apple\"       ),       textOutput(\"radio_value\")     )   ),   server = function(input, output, session) {     output$radio_value <- renderText(input$radio)      observeEvent(input$go, {       updateF7Radio(         session,         inputId = \"radio\",         label = \"New label\",         choices = colnames(mtcars),         selected = colnames(mtcars)[1]       )     })   }  ) }"},{"path":"/reference/removetab.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 tab deletion — removeF7Tab","title":"Framework7 tab deletion — removeF7Tab","text":"removeF7Tab removes f7Tab f7Tabs.","code":""},{"path":"/reference/removetab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 tab deletion — removeF7Tab","text":"","code":"removeF7Tab(id, target, session = shiny::getDefaultReactiveDomain())"},{"path":"/reference/removetab.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 tab deletion — removeF7Tab","text":"id f7Tabs id. target f7Tab remove. session Shiny session object.","code":""},{"path":"/reference/removetab.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 tab deletion — removeF7Tab","text":"","code":"if (interactive()) {  library(shiny)  library(shinyMobile)   ui <- f7Page(   title = \"Remove a tab\",   f7TabLayout(    panels = tagList(      f7Panel(title = \"Left Panel\", side = \"left\", theme = \"light\", \"Blabla\", effect = \"cover\"),      f7Panel(title = \"Right Panel\", side = \"right\", theme = \"dark\", \"Blabla\", effect = \"cover\")    ),    navbar = f7Navbar(      title = \"Tabs\",      hairline = FALSE,      shadow = TRUE,      leftPanel = TRUE,      rightPanel = TRUE    ),    f7Tabs(      id = \"tabset1\",      f7Tab(        title = \"Tab 1\",        tabName = \"Tab1\",        active = TRUE,        p(\"Text 1\"),        f7Button(\"remove1\",\"Remove tab 1\")      ),      f7Tab(        title = \"Tab 2\",        tabName = \"Tab2\",        p(\"Text 2\")      ),      f7Tab(        title = \"Tab 3\",        tabName = \"Tab3\",        p(\"Text 3\")      )    )   )  )   server <- function(input, output, session) {    observe(print(input$tabset1))    observeEvent(input$remove1, {      removeF7Tab(        id = \"tabset1\",        target = \"Tab1\"      )    })  }  shinyApp(ui, server) }"},{"path":"/reference/select.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 select input — f7Select","title":"Framework7 select input — f7Select","text":"f7Select creates select input. updateF7Select changes value select input client","code":""},{"path":"/reference/select.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 select input — f7Select","text":"","code":"f7Select(inputId, label, choices, selected = NULL, width = NULL)  updateF7Select(   inputId,   selected = NULL,   session = shiny::getDefaultReactiveDomain() )"},{"path":"/reference/select.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 select input — f7Select","text":"inputId id input object. label Select input label. choices Select input choices. selected New value. width width input, e.g. 400px, 100%. session Shiny session object, usually default value suffice.","code":""},{"path":"/reference/select.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 select input — f7Select","text":"","code":"# Select input if(interactive()){  library(shiny)  library(shinyMobile)   shiny::shinyApp(    ui = f7Page(      title = \"My app\",      f7SingleLayout(       navbar = f7Navbar(title = \"f7Select\"),       f7Select(        inputId = \"variable\",        label = \"Choose a variable:\",        choices = colnames(mtcars)[-1],        selected = \"hp\"       ),       tableOutput(\"data\")      )    ),    server = function(input, output) {      output$data <- renderTable({        mtcars[, c(\"mpg\", input$variable), drop = FALSE]      }, rownames = TRUE)    }  ) } # Update select input if (interactive()) {  library(shiny)  library(shinyMobile)   shinyApp(    ui = f7Page(      title = \"My app\",      f7SingleLayout(        navbar = f7Navbar(title = \"updateF7Select\"),        f7Card(          f7Button(inputId = \"update\", label = \"Update select\"),          br(),          f7Select(           inputId = \"variable\",           label = \"Choose a variable:\",           choices = colnames(mtcars)[-1],           selected = \"hp\"          ),          verbatimTextOutput(\"test\")        )      )    ),    server = function(input, output, session) {       output$test <- renderPrint(input$variable)       observeEvent(input$update, {        updateF7Select(          inputId = \"variable\",          selected = \"gear\"        )      })    }  ) }"},{"path":"/reference/sheet.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 sheet — f7Sheet","title":"Framework7 sheet — f7Sheet","text":"f7Sheet creates f7 sheet modal window. updateF7Sheet toggles f7Sheet client.","code":""},{"path":"/reference/sheet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 sheet — f7Sheet","text":"","code":"f7Sheet(   ...,   id,   hiddenItems = NULL,   orientation = c(\"top\", \"bottom\"),   swipeToClose = FALSE,   swipeToStep = FALSE,   backdrop = FALSE,   closeByOutsideClick = TRUE,   swipeHandler = TRUE )  updateF7Sheet(id, session = shiny::getDefaultReactiveDomain())"},{"path":"/reference/sheet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 sheet — f7Sheet","text":"... Sheet content. wipeToStep TRUE, items visible start. id Sheet id. hiddenItems Put items want hide inside. works swipeToStep TRUE. Default NULL. orientation \"top\" \"bottom\". swipeToClose TRUE, can closed swiping . swipeToStep TRUE sheet opened partially, swipe can expanded. backdrop Enables Sheet backdrop (dark semi transparent layer behind). default TRUE MD Aurora themes FALSE iOS theme. closeByOutsideClick enabled, sheet closed click outside . swipeHandler Whether display swipe handler. TRUE default. Need either swipeToClose swipeToStep set TRUE work. session Shiny session object","code":""},{"path":"/reference/sheet.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Framework7 sheet — f7Sheet","text":"sheet modal used combination updateF7Sheet. Yet, need specific trigger, simply add `data-sheet` = paste0(\"#\", id), tag choice (button), id refers sheet unique id.","code":""},{"path":"/reference/sheet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 sheet — f7Sheet","text":"","code":"# Toggle sheet modal if (interactive()) {  library(shiny)  library(shinyMobile)  shinyApp(     ui = f7Page(        title = \"Update f7Sheet\",        f7SingleLayout(           navbar = f7Navbar(title = \"f7Sheet\"),           f7Button(inputId = \"go\", label = \"Go\"),           f7Sheet(              id = \"sheet1\",              label = \"More\",              orientation = \"bottom\",              swipeToClose = TRUE,              swipeToStep = TRUE,              backdrop = TRUE,              \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.              Quisque ac diam ac quam euismod porta vel a nunc. Quisque sodales              scelerisque est, at porta justo cursus ac\",              hiddenItems = tagList(                 f7Segment(                    container = \"segment\",                    rounded = TRUE,                    f7Button(color = \"blue\", label = \"My button 1\", rounded = TRUE),                    f7Button(color = \"green\", label = \"My button 2\", rounded = TRUE),                    f7Button(color = \"yellow\", label = \"My button 3\", rounded = TRUE)                 ),                 f7Flex(                    f7Gauge(                       id = \"mygauge\",                       type  = \"semicircle\",                       value = 10,                       borderColor = \"#2196f3\",                       borderWidth = 10,                       valueFontSize = 41,                       valueTextColor = \"#2196f3\",                       labelText = \"amount of something\"                    )                 ),                 f7Slider(                    inputId = \"obs\",                    label = \"Number of observations\",                    max = 100,                    min = 0,                    value = 10,                    scale = TRUE                 ),                 plotOutput(\"distPlot\")              )           )        )     ),     server = function(input, output, session) {        observe({print(input$sheet1)})        output$distPlot <- renderPlot({           hist(rnorm(input$obs))        })        observeEvent(input$obs, {           updateF7Gauge(id = \"mygauge\", value = input$obs)        })        observeEvent(input$go, {           updateF7Sheet(id = \"sheet1\")        })     }  ) }"},{"path":"/reference/slider.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 range slider — f7Slider","title":"Framework7 range slider — f7Slider","text":"f7Slider creates f7 slider input. updateF7Slider changes value slider input client.","code":""},{"path":"/reference/slider.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 range slider — f7Slider","text":"","code":"f7Slider(   inputId,   label,   min,   max,   value,   step = 1,   scale = FALSE,   scaleSteps = 5,   scaleSubSteps = 0,   vertical = FALSE,   verticalReversed = FALSE,   labels = NULL,   color = NULL,   noSwipping = TRUE )  updateF7Slider(   inputId,   min = NULL,   max = NULL,   value = NULL,   scale = FALSE,   scaleSteps = NULL,   scaleSubSteps = NULL,   step = NULL,   color = NULL,   session = shiny::getDefaultReactiveDomain() )"},{"path":"/reference/slider.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 range slider — f7Slider","text":"inputId id input object. label Slider label. min Slider minimum range. max Slider maximum range value Slider value vector containing 2 values (range). step Slider increase step size. scale Slider scale. scaleSteps Number scale steps. scaleSubSteps Number scale sub steps (step divided value). vertical Whether apply vertical display. FALSE default. verticalReversed Makes vertical range slider reversed (vertical must also enabled). FALSE default. labels Enables additional label around range slider knob. List 2 f7Icon expected. color See getF7Colors valid colors. noSwipping Prevent swiping slider manipulated f7TabLayout. session Shiny session object.","code":""},{"path":"/reference/slider.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Framework7 range slider — f7Slider","text":"labels option works vertical FALSE! Important: transform range slider simple slider inversely.","code":""},{"path":"/reference/slider.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 range slider — f7Slider","text":"","code":"# Slider input if(interactive()){  library(shiny)  library(shinyMobile)   shinyApp(    ui = f7Page(     title = \"My app\",     f7SingleLayout(      navbar = f7Navbar(title = \"f7Slider\"),      f7Card(       f7Slider(        inputId = \"obs\",        label = \"Number of observations\",        max = 1000,        min = 0,        value = 100,        scaleSteps = 5,        scaleSubSteps = 3,        scale = TRUE,        color = \"orange\",        labels = tagList(         f7Icon(\"circle\"),         f7Icon(\"circle_fill\")        )       ),       verbatimTextOutput(\"test\")      ),      plotOutput(\"distPlot\")     )    ),    server = function(input, output) {     output$test <- renderPrint({input$obs})     output$distPlot <- renderPlot({      hist(rnorm(input$obs))     })    }  ) }  # Create a range if(interactive()){  library(shiny)  library(shinyMobile)   shinyApp(    ui = f7Page(     title = \"My app\",     f7SingleLayout(      navbar = f7Navbar(title = \"f7Slider Range\"),      f7Card(       f7Slider(        inputId = \"obs\",        label = \"Range values\",        max = 500,        min = 0,        value = c(50, 100),        scale = FALSE       ),       verbatimTextOutput(\"test\")      )     )    ),    server = function(input, output) {     output$test <- renderPrint({input$obs})    }  ) }  # Update f7Slider if(interactive()){  library(shiny)  library(shinyMobile)   shinyApp(    ui = f7Page(      title = \"My app\",      f7SingleLayout(        navbar = f7Navbar(title = \"updateF7Slider\"),        f7Card(          f7Button(inputId = \"update\", label = \"Update slider\"),          f7Slider(            inputId = \"obs\",            label = \"Range values\",            max = 500,            min = 0,            step = 1,            color = \"deeppurple\",            value = c(50, 100)          ),          verbatimTextOutput(\"test\")        )      )    ),    server = function(input, output, session) {       output$test <- renderPrint({input$obs})       observeEvent(input$update, {        updateF7Slider(          inputId = \"obs\",          value = c(1, 5),          min = 0,          scaleSteps = 10,          scaleSubSteps = 5,          step = 0.1,          max = 10,          color = \"teal\"        )      })    }  ) }"},{"path":"/reference/smartselect.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 smart select — f7SmartSelect","title":"Framework7 smart select — f7SmartSelect","text":"f7SmartSelect smarter classic f7Select, allows choices filtering, ... updateF7SmartSelect changes value smart select input client.","code":""},{"path":"/reference/smartselect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 smart select — f7SmartSelect","text":"","code":"f7SmartSelect(   inputId,   label,   choices,   selected = NULL,   openIn = c(\"page\", \"sheet\", \"popup\", \"popover\"),   searchbar = TRUE,   multiple = FALSE,   maxlength = NULL,   virtualList = FALSE,   ... )  updateF7SmartSelect(   inputId,   selected = NULL,   choices = NULL,   multiple = NULL,   maxLength = NULL,   ...,   session = shiny::getDefaultReactiveDomain() )"},{"path":"/reference/smartselect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 smart select — f7SmartSelect","text":"inputId id input object. label Select input label. choices new choices. selected new value input. openIn Smart select type: either c(\"sheet\", \"popup\", \"popover\"). Note search bar available type popup. searchbar Whether enable search bar. TRUE default. multiple Whether allow multiple values. maxlength Maximum items select multiple TRUE. virtualList Enable Virtual List smart select select lot options. Default FALSE. ... Parameters used update smart select, use arguments f7SmartSelect. maxLength Maximum items select multiple TRUE. session Shiny session object, usually default value suffice.","code":""},{"path":"/reference/smartselect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 smart select — f7SmartSelect","text":"","code":"# Smart select input if (interactive()) { library(shiny) library(shinyMobile)   shinyApp(    ui = f7Page(      title = \"My app\",      f7SingleLayout(        navbar = f7Navbar(title = \"f7SmartSelect\"),        f7SmartSelect(          inputId = \"variable\",          label = \"Choose a variable:\",          selected = \"drat\",          choices = colnames(mtcars)[-1],          openIn = \"popup\"        ),        tableOutput(\"data\"),        f7SmartSelect(          inputId = \"variable2\",          label = \"Group variables:\",          choices = list(           `East Coast` = list(\"NY\", \"NJ\", \"CT\"),           `West Coast` = list(\"WA\", \"OR\", \"CA\"),           `Midwest` = list(\"MN\", \"WI\", \"IA\")          ),          openIn = \"sheet\"        ),        textOutput(\"var\")      )    ),    server = function(input, output) {      output$var <- renderText(input$variable2)      output$data <- renderTable({        mtcars[, c(\"mpg\", input$variable), drop = FALSE]      }, rownames = TRUE)    }  ) } # Update smart select if (interactive()) {  library(shiny)  library(shinyMobile)   shinyApp(   ui = f7Page(     title = \"My app\",     f7SingleLayout(       navbar = f7Navbar(title = \"Update f7SmartSelect\"),       f7Button(\"updateSmartSelect\", \"Update Smart Select\"),       f7SmartSelect(         inputId = \"variable\",         label = \"Choose a variable:\",         selected = \"drat\",         choices = colnames(mtcars)[-1],         openIn = \"popup\"       ),       tableOutput(\"data\")     )   ),   server = function(input, output, session) {     output$data <- renderTable({       mtcars[, c(\"mpg\", input$variable), drop = FALSE]     }, rownames = TRUE)      observeEvent(input$updateSmartSelect, {       updateF7SmartSelect(         inputId = \"variable\",         openIn = \"sheet\",         selected = \"hp\",         choices = c(\"hp\", \"gear\"),         multiple = TRUE,         maxLength = 3       )     })   }  ) }"},{"path":"/reference/stepper.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 stepper input — f7Stepper","title":"Framework7 stepper input — f7Stepper","text":"f7Stepper creates stepper input. updateF7Stepper changes value stepper input client.","code":""},{"path":"/reference/stepper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 stepper input — f7Stepper","text":"","code":"f7Stepper(   inputId,   label,   min,   max,   value,   step = 1,   fill = FALSE,   rounded = FALSE,   raised = FALSE,   size = NULL,   color = NULL,   wraps = FALSE,   autorepeat = TRUE,   manual = FALSE,   decimalPoint = 4,   buttonsEndInputMode = TRUE )  updateF7Stepper(   inputId,   min = NULL,   max = NULL,   value = NULL,   step = NULL,   fill = NULL,   rounded = NULL,   raised = NULL,   size = NULL,   color = NULL,   wraps = NULL,   decimalPoint = NULL,   autorepeat = NULL,   manual = NULL,   session = shiny::getDefaultReactiveDomain() )"},{"path":"/reference/stepper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 stepper input — f7Stepper","text":"inputId id input object. label Stepper label. min Stepper minimum value. max Stepper maximum value. value Stepper value. Must belong \\[min, max\\]. step increment step. 1 default. fill Whether fill stepper. FALSE default. rounded Whether round stepper. FALSE default. raised Whether put relied around stepper. FALSE default. size Stepper size: \"small\", \"large\" NULL. color Stepper color: NULL \"red\", \"green\", \"blue\", \"pink\", \"yellow\", \"orange\", \"grey\" \"black\". wraps wraps mode incrementing beyond maximum value sets value minimum value, likewise, decrementing minimum value sets value maximum value. FALSE default. autorepeat Pressing holding one buttons increments decrements stepper’s value repeatedly. dynamic autorepeat, rate change depends long user continues pressing control. TRUE default. manual possible enter value manually keyboard mobile keypad. click input field, stepper enter manual input mode, allow type value keyboar check fractional part defined accurancy. Click outside enter Return key, ending manual mode. TRUE default. decimalPoint Number digits dot, manual input mode. buttonsEndInputMode Disables manual input mode Stepper's minus plus button click. session Shiny session object, usually default value suffice.","code":""},{"path":"/reference/stepper.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Framework7 stepper input — f7Stepper","text":"updating, autorepeat field work correctly.","code":""},{"path":"/reference/stepper.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 stepper input — f7Stepper","text":"","code":"# Stepper input if(interactive()){  library(shiny)  library(shinyMobile)   shinyApp(    ui = f7Page(     title = \"My app\",     f7SingleLayout(      navbar = f7Navbar(title = \"f7Stepper\"),      f7Stepper(       inputId = \"stepper\",       label = \"My stepper\",       min = 0,       max = 10,       value = 4      ),      verbatimTextOutput(\"test\"),      f7Stepper(       inputId = \"stepper2\",       label = \"My stepper 2\",       min = 0,       max = 10,       value = 4,       color = \"orange\",       raised = TRUE,       fill = TRUE,       rounded = TRUE      ),      verbatimTextOutput(\"test2\")     )    ),    server = function(input, output) {     output$test <- renderPrint(input$stepper)     output$test2 <- renderPrint(input$stepper2)    }  ) } # Update stepper input if (interactive()) {  library(shiny)  library(shinyMobile)   shinyApp(   ui = f7Page(     title = \"My app\",     f7SingleLayout(       navbar = f7Navbar(title = \"updateF7Stepper\"),       f7Card(         f7Button(inputId = \"update\", label = \"Update stepper\"),         f7Stepper(           inputId = \"stepper\",           label = \"My stepper\",           min = 0,           max = 10,           size = \"small\",           value = 4,           wraps = TRUE,           autorepeat = TRUE,           rounded = FALSE,           raised = FALSE,           manual = FALSE         ),         verbatimTextOutput(\"test\")       )     )   ),   server = function(input, output, session) {      output$test <- renderPrint(input$stepper)      observeEvent(input$update, {       updateF7Stepper(         inputId = \"stepper\",         value = 0.1,         step = 0.01,         size = \"large\",         min = 0,         max = 1,         wraps = FALSE,         autorepeat = FALSE,         rounded = TRUE,         raised = TRUE,         color = \"pink\",         manual = TRUE,         decimalPoint = 2       )     })   }  ) }"},{"path":"/reference/swipeout.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 swipeout element — f7Swipeout","title":"Framework7 swipeout element — f7Swipeout","text":"f7Swipeout designed used combination f7ListItem. f7SwipeoutItem inserted f7Swipeout.","code":""},{"path":"/reference/swipeout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 swipeout element — f7Swipeout","text":"","code":"f7Swipeout(   tag,   ...,   left = NULL,   right = NULL,   side = c(\"left\", \"right\", \"both\") )  f7SwipeoutItem(id, label, color = NULL)"},{"path":"/reference/swipeout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 swipeout element — f7Swipeout","text":"tag Tag swiped. ... side either \"right\" \"left\" use slot pass f7SwipeoutItem. left side \"\", put left f7SwipeoutItem. right side \"\", put right f7SwipeoutItem. side side swipe: \"left\", \"right\" \"\". id Item unique id. label Item label. color Item color.","code":""},{"path":"/reference/swipeout.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 swipeout element — f7Swipeout","text":"","code":"if (interactive()) {  library(shiny)  library(shinyMobile)   shinyApp(    ui = f7Page(      title = \"Swipeout\",      f7SingleLayout(        navbar = f7Navbar(title = \"Swipeout\"),        # simple list        f7List(          lapply(1:3, function(j) {            if (j == 1) {              f7Swipeout(                tag = f7ListItem(letters[j]),                side = \"left\",                f7SwipeoutItem(id = \"alert\", color = \"pink\", \"Alert\"),                f7SwipeoutItem(id = \"notification\", color = \"green\", \"Notif\")              )            } else {              f7ListItem(letters[j])            }          })        )      )    ),    server = function(input, output, session) {      observe({        print(input$alert)        print(input$notification)      })       observeEvent(input$notification, {        f7Notif(          text = \"test\",          icon = f7Icon(\"bolt_fill\"),          title = \"Notification\",          subtitle = \"A subtitle\",          titleRightText = \"now\"        )      })       observeEvent(input$alert, {        f7Dialog(          title = \"Dialog title\",          text = \"This is an alert dialog\"        )      })     }  ) }"},{"path":"/reference/swiper.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 swiper — f7Swiper","title":"Framework7 swiper — f7Swiper","text":"f7Swiper creates Framework7 swiper container (like carousel).","code":""},{"path":"/reference/swiper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 swiper — f7Swiper","text":"","code":"f7Swiper(   ...,   id,   options = list(speed = 400, loop = FALSE, spaceBetween = 50, slidesPerView = \"auto\",     centeredSlides = TRUE, navigation = list(nextEl = \".swiper-button-next\", prevEl =     \".swiper-button-prev\"), pagination = list(el = \".swiper-pagination\", clickable =     TRUE), scrollbar = list(el = \".swiper-scrollbar\", draggable = TRUE)) )"},{"path":"/reference/swiper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 swiper — f7Swiper","text":"... Slot f7Slide. id Swiper unique id. options options. Expect list. See https://swiperjs.com/swiper-api available options.","code":""},{"path":"/reference/swiper.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Framework7 swiper — f7Swiper","text":"David Granjon, dgranjon@ymail.com","code":""},{"path":"/reference/swiper.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 swiper — f7Swiper","text":"","code":"if(interactive()){  library(shiny)  library(shinyMobile)   timeline <- f7Timeline(   sides = TRUE,   f7TimelineItem(    \"Another text\",    date = \"01 Dec\",    card = FALSE,    time = \"12:30\",    title = \"Title\",    subtitle = \"Subtitle\",    side = \"left\"   ),   f7TimelineItem(    \"Another text\",    date = \"02 Dec\",    card = TRUE,    time = \"13:00\",    title = \"Title\",    subtitle = \"Subtitle\"   ),   f7TimelineItem(    \"Another text\",    date = \"03 Dec\",    card = FALSE,    time = \"14:45\",    title = \"Title\",    subtitle = \"Subtitle\"   )  )   shiny::shinyApp(    ui = f7Page(     title = \"Swiper\",     f7SingleLayout(      navbar = f7Navbar(title = \"f7Swiper\"),      f7Swiper(       id = \"my-swiper\",       f7Slide(        timeline       ),       f7Slide(        f7Toggle(         inputId = \"toggle\",         label = \"My toggle\",         color = \"pink\",         checked = TRUE        ),        verbatimTextOutput(\"test\")       ),       f7Slide(        f7Slider(         inputId = \"obs\",         label = \"Number of observations\",         max = 1000,         min = 0,         value = 100,         scaleSteps = 5,         scaleSubSteps = 3,         scale = TRUE,         color = \"orange\",         labels = tagList(           f7Icon(\"circle\"),           f7Icon(\"circle_fill\")         )        ),        plotOutput(\"distPlot\")       )      )     )    ),    server = function(input, output) {     output$test <- renderPrint(input$toggle)     output$distPlot <- renderPlot({     hist(rnorm(input$obs))    })    }  ) }"},{"path":"/reference/text.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 text input — f7Text","title":"Framework7 text input — f7Text","text":"f7Text creates text input container. updateF7Text changes value text input client.","code":""},{"path":"/reference/text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 text input — f7Text","text":"","code":"f7Text(inputId, label, value = \"\", placeholder = NULL)  updateF7Text(   inputId,   label = NULL,   value = NULL,   placeholder = NULL,   session = shiny::getDefaultReactiveDomain() )"},{"path":"/reference/text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 text input — f7Text","text":"inputId id input object. label label set input object. value value set input object. placeholder placeholder set input object. session Shiny session object, usually default value suffice.","code":""},{"path":"/reference/text.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 text input — f7Text","text":"","code":"# A text input if(interactive()){  library(shiny)  library(shinyMobile)   shinyApp(    ui = f7Page(      title = \"My app\",      f7SingleLayout(       navbar = f7Navbar(title = \"f7Text\"),       f7Text(        inputId = \"caption\",        label = \"Caption\",        value = \"Data Summary\",        placeholder = \"Your text here\"       ),       verbatimTextOutput(\"value\")      )    ),    server = function(input, output) {      output$value <- renderPrint({ input$caption })    }  ) } # Update text input if (interactive()) {  library(shiny)  library(shinyMobile)   ui <- f7Page(    f7SingleLayout(     navbar = f7Navbar(title = \"updateF7Text\"),     f7Block(f7Button(\"trigger\", \"Click me\")),     f7Text(      inputId = \"text\",      label = \"Caption\",      value = \"Some text\",      placeholder = \"Your text here\"     ),     verbatimTextOutput(\"value\")    )  )   server <- function(input, output, session) {    output$value <- renderPrint(input$text)    observeEvent(input$trigger, {      updateF7Text(\"text\", value = \"Updated Text\")    })  } shinyApp(ui, server) }"},{"path":"/reference/textarea.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 text area input — f7TextArea","title":"Framework7 text area input — f7TextArea","text":"f7TextArea creates f7 text area input. updateF7TextArea changes value text area input client.","code":""},{"path":"/reference/textarea.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 text area input — f7TextArea","text":"","code":"f7TextArea(inputId, label, value = \"\", placeholder = NULL, resize = FALSE)  updateF7TextArea(   inputId,   label = NULL,   value = NULL,   placeholder = NULL,   session = shiny::getDefaultReactiveDomain() )"},{"path":"/reference/textarea.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 text area input — f7TextArea","text":"inputId id input object. label label set input object. value value set input object. placeholder placeholder set input object. resize Whether box can resized. Default FALSE. session Shiny session object, usually default value suffice.","code":""},{"path":"/reference/textarea.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 text area input — f7TextArea","text":"","code":"if(interactive()){  library(shiny)  library(shinyMobile)   shinyApp(    ui = f7Page(      title = \"My app\",      f7TextArea(       inputId = \"textarea\",       label = \"Text Area\",       value = \"Lorem ipsum dolor sit amet, consectetur        adipiscing elit, sed do eiusmod tempor incididunt ut        labore et dolore magna aliqua\",       placeholder = \"Your text here\",       resize = TRUE      ),      textOutput(\"value\")    ),    server = function(input, output) {      output$value <- renderText({ input$textarea })    }  ) } if (interactive()) {  library(shiny)  library(shinyMobile)   ui <- f7Page(    f7SingleLayout(     navbar = f7Navbar(title = \"updateF7TextArea\"),     f7Block(f7Button(\"trigger\", \"Click me\")),     f7TextArea(      inputId = \"textarea\",      label = \"Text Area\",      value = \"Lorem ipsum dolor sit amet, consectetur               adipiscing elit, sed do eiusmod tempor incididunt ut               labore et dolore magna aliqua\",      placeholder = \"Your text here\",      resize = TRUE      ),     verbatimTextOutput(\"value\")    )  )   server <- function(input, output, session) {    output$value <- renderPrint(input$textarea)    observeEvent(input$trigger, {      updateF7Text(\"textarea\", value = \"Updated Text\")    })  } shinyApp(ui, server) }"},{"path":"/reference/timeline.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 timeline — f7Timeline","title":"Framework7 timeline — f7Timeline","text":"f7Timeline static timeline container. f7TimelineItem goes inside f7Timeline.","code":""},{"path":"/reference/timeline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 timeline — f7Timeline","text":"","code":"f7Timeline(   ...,   sides = FALSE,   horizontal = FALSE,   calendar = FALSE,   year = NULL,   month = NULL )  f7TimelineItem(   ...,   date = NULL,   card = FALSE,   time = NULL,   title = NULL,   subtitle = NULL,   side = NULL )"},{"path":"/reference/timeline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 timeline — f7Timeline","text":"... Item content, text instance. sides Enable side--side timeline mode. horizontal Whether use horizontal layout. compatible sides. calendar Special type horizontal layout current year month. year Current year, calendar TRUE. month Current month, calendar TRUE. date Timeline item date. Required. card Whether wrap content card. FALSE default. time Timeline item time. Optional. title Timeline item title. Optional. subtitle Timeline item subtitle. Optional. side Force element required side: \"right\" \"left\". sides os TRUE f7Timeline","code":""},{"path":"/reference/timeline.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Framework7 timeline — f7Timeline","text":"David Granjon dgranjon@ymail.com","code":""},{"path":"/reference/timeline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 timeline — f7Timeline","text":"","code":"if(interactive()){  library(shiny)  library(shinyMobile)   items <- tagList(    f7TimelineItem(      \"Another text\",      date = \"01 Dec\",      card = FALSE,      time = \"12:30\",      title = \"Title\",      subtitle = \"Subtitle\",      side = \"left\"    ),    f7TimelineItem(      \"Another text\",      date = \"02 Dec\",      card = TRUE,      time = \"13:00\",      title = \"Title\",      subtitle = \"Subtitle\"    ),    f7TimelineItem(      \"Another text\",      date = \"03 Dec\",      card = FALSE,      time = \"14:45\",      title = \"Title\",      subtitle = \"Subtitle\"    )  )   shinyApp(    ui = f7Page(      title = \"Timelines\",      f7SingleLayout(        navbar = f7Navbar(title = \"Timelines\"),        f7BlockTitle(title = \"Horizontal timeline\", size = \"large\") %>%        f7Align(side = \"center\"),        f7Timeline(          sides = FALSE,          horizontal = TRUE,          items        ),        f7BlockTitle(title = \"Vertical side by side timeline\", size = \"large\") %>%        f7Align(side = \"center\"),        f7Timeline(          sides = TRUE,          items        ),        f7BlockTitle(title = \"Vertical timeline\", size = \"large\") %>%        f7Align(side = \"center\"),        f7Timeline(items),        f7BlockTitle(title = \"Calendar timeline\", size = \"large\") %>%        f7Align(side = \"center\"),        f7Timeline(items, calendar = TRUE, year = \"2019\", month = \"December\")      )    ),    server = function(input, output) {}  ) }"},{"path":"/reference/toggle.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 toggle input — f7Toggle","title":"Framework7 toggle input — f7Toggle","text":"f7Toggle creates F7 toggle switch input. updateF7Toggle changes value toggle input client.","code":""},{"path":"/reference/toggle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 toggle input — f7Toggle","text":"","code":"f7Toggle(inputId, label, checked = FALSE, color = NULL)  updateF7Toggle(   inputId,   checked = NULL,   color = NULL,   session = shiny::getDefaultReactiveDomain() )"},{"path":"/reference/toggle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 toggle input — f7Toggle","text":"inputId id input object. label Toggle label. checked Whether toggle TRUE FALSE. color Toggle color. session Shiny session object.","code":""},{"path":"/reference/toggle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 toggle input — f7Toggle","text":"","code":"# f7Toggle if(interactive()){  library(shiny)  library(shinyMobile)   shinyApp(    ui = f7Page(     title = \"My app\",     f7SingleLayout(      navbar = f7Navbar(title = \"f7Toggle\"),      f7Toggle(       inputId = \"toggle\",       label = \"My toggle\",       color = \"pink\",       checked = TRUE      ),      verbatimTextOutput(\"test\"),      f7Toggle(       inputId = \"toggle2\",       label = \"My toggle 2\"      ),      verbatimTextOutput(\"test2\")     )    ),    server = function(input, output) {     output$test <- renderPrint(input$toggle)     output$test2 <- renderPrint(input$toggle2)    }  ) } # Update f7Toggle if (interactive()) {  library(shiny)  library(shinyMobile)   shinyApp(    ui = f7Page(      title = \"My app\",      f7SingleLayout(        navbar = f7Navbar(title = \"updateF7Toggle\"),        f7Card(          f7Button(inputId = \"update\", label = \"Update toggle\"),          f7Toggle(            inputId = \"toggle\",            label = \"My toggle\",            color = \"pink\",            checked = FALSE          ),          verbatimTextOutput(\"test\")        )      )    ),    server = function(input, output, session) {       output$test <- renderPrint({input$toggle})       observeEvent(input$update, {        updateF7Toggle(          inputId = \"toggle\",          checked = TRUE,          color = \"green\"        )      })    }  ) }"},{"path":"/reference/tooltip.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 tooltip — f7Tooltip","title":"Framework7 tooltip — f7Tooltip","text":"f7Tooltip creates static tooltip, UI side. addF7Tooltip adds dynamic tooltip given target. tooltip can modified later. updateF7Tooltip updates tooltip server. Either toggle update text content.","code":""},{"path":"/reference/tooltip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 tooltip — f7Tooltip","text":"","code":"f7Tooltip(tag, text)  addF7Tooltip(   id = NULL,   selector = NULL,   options,   session = shiny::getDefaultReactiveDomain() )  updateF7Tooltip(   id = NULL,   selector = NULL,   action = c(\"toggle\", \"update\"),   text = NULL,   session = shiny::getDefaultReactiveDomain() )"},{"path":"/reference/tooltip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 tooltip — f7Tooltip","text":"tag Tooltip target. text New tooltip text value. See https://v5.framework7.io/docs/tooltip.html#tooltip-parameters. id Tooltip target id. selector jQuery selector. Allow customization target (nested tags). options List options pass tooltip. See https://v5.framework7.io/docs/tooltip.html#tooltip-parameters. session Shiny session object. action Either toggle update tooltip.","code":""},{"path":"/reference/tooltip.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 tooltip — f7Tooltip","text":"","code":"if (interactive()) {  library(shiny)  library(shinyMobile)  shinyApp(    ui = f7Page(      title = \"Tooltip\",      f7SingleLayout(        navbar = f7Navbar(title = \"f7Tooltip\"),        f7Tooltip(          f7Badge(\"Hover on me\", color = \"pink\"),          text = \"A tooltip!\"        )      )    ),    server = function(input, output, session) {    }  ) } if (interactive()) {  library(shiny)  library(shinyMobile)   lorem_ipsum <- \"Lorem ipsum dolor sit amet!\"   tooltips <- data.frame(    id = paste0(\"target_\", 1:2),    text = paste(\"Tooltip content\", 1:2, lorem_ipsum),    stringsAsFactors = FALSE  )    shinyApp(    ui = f7Page(      options = list(theme = \"ios\"),      title = \"f7Tooltip\",      f7SingleLayout(        navbar = f7Navbar(          title = \"f7Tooltip\",          subNavbar = f7SubNavbar(            f7Toggle(              inputId = \"toggle\",              \"Enable tootlips\",              color = \"green\",              checked = TRUE            )          )        ),        f7Segment(          lapply(seq_len(nrow(tooltips)), function(i) {            f7Button(              inputId = sprintf(\"target_%s\", i),              sprintf(\"Target %s\", i)            )          })        ),        f7Text(\"tooltip_text\", \"Tooltip new text\", placeholder = \"Type a text\")      )    ),    server = function(input, output, session) {      # Update content      observeEvent(input$tooltip_text, {        lapply(seq_len(nrow(tooltips)), function(i) {          updateF7Tooltip(            id = tooltips[i, \"id\"],            action = \"update\",            text = input$tooltip_text          )        })      }, ignoreInit = TRUE)       observeEvent(input$toggle, {        lapply(seq_len(nrow(tooltips)), function(i) {          updateF7Tooltip(id = tooltips[i, \"id\"], action = \"toggle\")        })      }, ignoreInit = TRUE)       # Create      lapply(seq_len(nrow(tooltips)), function(i) {        observeEvent(input[[tooltips[i, \"id\"]]], {          addF7Tooltip(            id = tooltips[i, \"id\"],            options = list(              text = tooltips[i, \"text\"]            )          )        })      })    }  ) }"},{"path":"/reference/updateF7App.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Framework7 configuration — updateF7App","title":"Update Framework7 configuration — updateF7App","text":"updateF7App allows update shinyMobile app run time injecting configuration inside current running instance. Useful want share behavior across multiple elements.","code":""},{"path":"/reference/updateF7App.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Framework7 configuration — updateF7App","text":"","code":"updateF7App(options, session = shiny::getDefaultReactiveDomain())"},{"path":"/reference/updateF7App.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update Framework7 configuration — updateF7App","text":"options List options. session Shiny session object.","code":""},{"path":"/reference/updateF7App.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Update Framework7 configuration — updateF7App","text":"function may work options intended advanced/expert usage.","code":""},{"path":"/reference/updateF7App.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update Framework7 configuration — updateF7App","text":"","code":"if (interactive()) {  library(shiny)  library(shinyMobile)  shinyApp(    ui = f7Page(      title = \"Simple Dialog\",      f7SingleLayout(        navbar = f7Navbar(title = \"f7Dialog\"),        f7Button(inputId = \"goButton\", \"Go!\"),        f7Button(inputId = \"update\", \"Update config\")      )    ),    server = function(input, output, session) {      observeEvent(input$goButton,{        f7Dialog(          title = \"Dialog title\",          text = \"This is an alert dialog\"        )      })       observeEvent(input$update,{        updateF7App(         options = list(          dialog = list(           buttonOk =  \"Yeaaaah!\",           buttonCancel = \"Ouuups!\"          )         )        )         f7Dialog(          id = \"test\",          title = \"Warning\",          type = \"confirm\",          text = \"Look at me, I have a new buttons!\"        )      })    }  ) }"},{"path":"/reference/updateF7Entity.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Framework7 entity — updateF7Entity","title":"Update Framework7 entity — updateF7Entity","text":"updateF7Entity allows update Framework7 instance server. entity, list updatable properties may significantly vary. Please refer Framework7 documentation https://v5.framework7.io/docs/.","code":""},{"path":"/reference/updateF7Entity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Framework7 entity — updateF7Entity","text":"","code":"updateF7Entity(id, options, session = shiny::getDefaultReactiveDomain())"},{"path":"/reference/updateF7Entity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update Framework7 entity — updateF7Entity","text":"id Element id. options Configuration list. Tightly depends entity. See https://v5.framework7.io/docs/. session Shiny session object.","code":""},{"path":"/reference/updateF7Entity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update Framework7 entity — updateF7Entity","text":"","code":"# Update action sheet instance if (interactive()) {  library(shiny)  library(shinyMobile)  shinyApp(    ui = f7Page(      title = \"Simple Dialog\",      f7SingleLayout(        navbar = f7Navbar(title = \"Update action sheet instance\"),        f7Button(inputId = \"goButton\", \"Go!\"),        f7Button(inputId = \"update\", \"Update config\")      )    ),    server = function(input, output, session) {      observeEvent(input$goButton, {        f7ActionSheet(         grid = TRUE,         id = \"action1\",         buttons = list(           list(             text = \"Notification\",             icon = f7Icon(\"info\"),             color = NULL           ),           list(             text = \"Dialog\",             icon = f7Icon(\"lightbulb_fill\"),             color = NULL           )         )        )      })       observeEvent(input$update,{        updateF7Entity(        id = \"action1\",         options = list(          buttons = list(           list(             text = \"Notification\",             icon = f7Icon(\"info\"),             color = NULL           )          )         )        )      })    }  ) }"},{"path":"/reference/updateF7Tabs.html","id":null,"dir":"Reference","previous_headings":"","what":"Update a Framework 7 tabsetPanel — updateF7Tabs","title":"Update a Framework 7 tabsetPanel — updateF7Tabs","text":"Update f7Tabs.","code":""},{"path":"/reference/updateF7Tabs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update a Framework 7 tabsetPanel — updateF7Tabs","text":"","code":"updateF7Tabs(id, selected = NULL, session = shiny::getDefaultReactiveDomain())"},{"path":"/reference/updateF7Tabs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update a Framework 7 tabsetPanel — updateF7Tabs","text":"id Id f7Tabs update. selected Newly selected tab. session Shiny session object.","code":""},{"path":"/reference/updateF7Tabs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update a Framework 7 tabsetPanel — updateF7Tabs","text":"","code":"if (interactive()) {  library(shiny)  library(shinyMobile)   subtabs_ui <- function(id) {    ns <- NS(id)     tagList(      f7Toggle(inputId = ns(\"updateSubTab\"), label = \"Update SubTab\", checked = FALSE),      f7Tabs(        id = ns(\"subtabdemo\"),        style = \"strong\",        animated = FALSE,        f7Tab(title = \"Subtab 1\", tabName = \"SubTab1\", \"SubTab 1\"),        f7Tab(title = \"Subtab 2\", tabName = \"SubTab2\", \"SubTab 2\", active = TRUE),        f7Tab(title = \"Subtab 3\", tabName = \"SubTab3\", \"SubTab 3\")      )    )  }   subtabs <- function(input, output, session) {    observeEvent(input$updateSubTab, {      selected <- ifelse(input$updateSubTab, \"SubTab1\", \"SubTab2\")      updateF7Tabs(session, id = \"subtabdemo\", selected = selected)    })    return(reactive(input$subtabdemo))  }   shinyApp(    ui = f7Page(      title = \"Tab Layout\",      f7TabLayout(        navbar = f7Navbar(          title =            f7Flex(              HTML(paste(\"Selected Tab:\", textOutput(\"selectedTab\"))),              HTML(paste(\"Selected Subtab:\", textOutput(\"selectedSubTab\")))            )          ,          subNavbar = f7SubNavbar(            f7Flex(              f7Toggle(inputId = \"updateTab\", label = \"Update Tab\", checked = TRUE),              subtabs_ui(\"subtabs1\")[[1]]            )          )        ),        f7Tabs(          id = \"tabdemo\",          swipeable = TRUE,          animated = FALSE,          f7Tab(            title = \"Tab 1\",            tabName = \"Tab1\",            subtabs_ui(\"subtabs1\")[[2]]          ),          f7Tab(title = \"Tab 2\", tabName = \"Tab2\", \"Tab 2\"),          f7Tab(title = \"Tab 3\", tabName = \"Tab3\", \"Tab 3\")        )      )    ),    server = function(input, output, session) {      output$selectedTab <- renderText(input$tabdemo)      observeEvent(input$updateTab, {        selected <- ifelse(input$updateTab, \"Tab1\", \"Tab2\")        updateF7Tabs(id = \"tabdemo\", selected = selected)      })      subtab <- callModule(subtabs, \"subtabs1\")      output$selectedSubTab <- renderText(subtab())    }  )  # with hidden tabs  shinyApp(   ui <- f7Page(     title = \"shinyMobile\",     f7TabLayout(       navbar = f7Navbar(         title = \"Update Tabs with hidden tab\",         subtitle = \"\",         hairline = TRUE,         shadow = TRUE,         bigger = FALSE,         transparent = TRUE       ),       f7Tabs(         id = 'tabs',         animated = TRUE,         f7Tab(           active = TRUE,           title = \"Main tab\",           tabName = \"Tab1\",           icon = f7Icon(\"doc_text\"),           h1(\"This is the first tab.\"),           f7Button(inputId = \"goto\", label = \"Go to hidden tab\")         ),         f7Tab(           title = \"Second tab\",           tabName = \"Tab2\",           icon = f7Icon(\"bolt_horizontal\"),           h1(\"This is the second tab.\")         ),         f7Tab(           title = \"Hidden tab\",           tabName = \"Tab3\",           hidden = TRUE,           h1(\"This is a tab that does not appear in the tab menu.           Yet, you can still access it.\")         )       )     )   ),   server = function(input, output, session) {     observe(print(input$tabs))     observeEvent(input$goto, {       updateF7Tabs(session = session, id = \"tabs\", selected = \"Tab3\")     })   }  ) }"},{"path":"/reference/updateF7VirtualList.html","id":null,"dir":"Reference","previous_headings":"","what":"Update an f7VirtualList on the server side — updateF7VirtualList","title":"Update an f7VirtualList on the server side — updateF7VirtualList","text":"function wraps methods https://framework7.io/docs/virtual-list.html","code":""},{"path":"/reference/updateF7VirtualList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update an f7VirtualList on the server side — updateF7VirtualList","text":"","code":"updateF7VirtualList(   id,   action = c(\"appendItem\", \"appendItems\", \"prependItem\", \"prependItems\", \"replaceItem\",     \"replaceAllItems\", \"moveItem\", \"insertItemBefore\", \"filterItems\", \"deleteItem\",     \"deleteAllItems\", \"scrollToItem\"),   item = NULL,   items = NULL,   index = NULL,   indexes = NULL,   oldIndex = NULL,   newIndex = NULL,   session = shiny::getDefaultReactiveDomain() )"},{"path":"/reference/updateF7VirtualList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update an f7VirtualList on the server side — updateF7VirtualList","text":"id f7VirtualList update. action Action perform. See https://framework7.io/docs/virtual-list.html. item action one appendItem, prependItem, replaceItem, insertItemBefore. items action one appendItems, prependItems, replaceAllItems. index action one replaceItem, insertItemBefore, deleteItem. indexes action one filterItems, deleteItems. oldIndex action moveItem. newIndex action moveItem. session Shiny session.","code":""},{"path":"/reference/updateF7VirtualList.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update an f7VirtualList on the server side — updateF7VirtualList","text":"","code":"if (interactive()) {  library(shiny)  library(shinyMobile)  shinyApp(    ui = f7Page(      title = \"Update virtual list\",      f7SingleLayout(        navbar = f7Navbar(          title = \"Virtual Lists\",          hairline = FALSE,          shadow = TRUE        ),        # main content        f7Segment(          container = \"segment\",           f7Button(inputId = \"appendItem\", \"Append Item\"),          f7Button(inputId = \"prependItems\", \"Prepend Items\"),          f7Button(inputId = \"insertBefore\", \"Insert before\"),          f7Button(inputId = \"replaceItem\", \"Replace Item\")        ),        f7Segment(          container = \"segment\",          f7Button(inputId = \"deleteAllItems\", \"Remove All\"),          f7Button(inputId = \"moveItem\", \"Move Item\"),          f7Button(inputId = \"filterItems\", \"Filter Items\")        ),        f7Flex(          uiOutput(\"itemIndexUI\"),          uiOutput(\"itemNewIndexUI\"),          uiOutput(\"itemsFilterUI\")        ),        f7VirtualList(          id = \"vlist\",          items = lapply(1:5, function(i) {            f7VirtualListItem(              title = paste(\"Title\", i),              subtitle = paste(\"Subtitle\", i),              header = paste(\"Header\", i),              footer = paste(\"Footer\", i),              right = paste(\"Right\", i),              content = i,              media = img(src = \"https://cdn.framework7.io/placeholder/fashion-88x88-3.jpg\")            )          })        )      )    ),    server = function(input, output, session) {       output$itemIndexUI <- renderUI({        req(input$vlist$length > 2)        f7Stepper(          inputId = \"itemIndex\",          label = \"Index\",          min = 1,          value = 2,          max = input$vlist$length        )      })       output$itemNewIndexUI <- renderUI({        req(input$vlist$length > 2)        f7Stepper(          inputId = \"itemNewIndex\",          label = \"New Index\",          min = 1,          value = 1,          max = input$vlist$length        )      })       output$itemsFilterUI <- renderUI({        input$appendItem        input$prependItems        input$insertBefore        input$replaceItem        input$deleteAllItems        input$moveItem        isolate({          req(input$vlist$length > 2)          f7Slider(            inputId = \"itemsFilter\",            label = \"Items to Filter\",            min = 1,            max = input$vlist$length,            value = c(1, input$vlist$length)          )        })      })       observe(print(input$vlist))       observeEvent(input$appendItem, {        updateF7VirtualList(          id = \"vlist\",          action = \"appendItem\",          item = f7VirtualListItem(            title = \"New Item Title\",            right = \"New Item Right\",            content = \"New Item Content\",            media = img(src = \"https://cdn.framework7.io/placeholder/fashion-88x88-1.jpg\")          )        )      })       observeEvent(input$prependItems, {        updateF7VirtualList(          id = \"vlist\",          action = \"prependItems\",          items = lapply(1:5, function(i) {            f7VirtualListItem(              title = paste(\"Title\", i),              right = paste(\"Right\", i),              content = i,              media = img(src = \"https://cdn.framework7.io/placeholder/fashion-88x88-1.jpg\")            )          })        )      })       observeEvent(input$insertBefore, {        updateF7VirtualList(          id = \"vlist\",          action = \"insertItemBefore\",          index = input$itemIndex,          item = f7VirtualListItem(            title = \"New Item Title\",            content = \"New Item Content\",            media = img(src = \"https://cdn.framework7.io/placeholder/fashion-88x88-1.jpg\")          )        )      })       observeEvent(input$replaceItem, {        updateF7VirtualList(          id = \"vlist\",          action = \"replaceItem\",          index = input$itemIndex,          item = f7VirtualListItem(            title = \"Replacement\",            content = \"Replacement Content\",            media = img(src = \"https://cdn.framework7.io/placeholder/fashion-88x88-1.jpg\")          )        )      })       observeEvent(input$deleteAllItems, {        updateF7VirtualList(          id = \"vlist\",          action = \"deleteAllItems\"        )      })       observeEvent(input$moveItem, {        updateF7VirtualList(          id = \"vlist\",          action = \"moveItem\",          oldIndex = input$itemIndex,          newIndex = input$itemNewIndex        )      })       observeEvent(input$filterItems, {        updateF7VirtualList(          id = \"vlist\",          action = \"filterItems\",          indexes = input$itemsFilter[1]:input$itemsFilter[2]        )      })     }  ) }"},{"path":"/reference/validate_tabName.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate a tab name — validate_tabName","title":"Validate a tab name — validate_tabName","text":"avoid JS issues: avoid punctuation space","code":""},{"path":"/reference/validate_tabName.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate a tab name — validate_tabName","text":"","code":"validate_tabName(tabName)"},{"path":"/reference/validate_tabName.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate a tab name — validate_tabName","text":"tabName Tab validate.","code":""},{"path":"/reference/validate_tabName.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate a tab name — validate_tabName","text":"error wrong pattern found","code":""},{"path":"/reference/validation.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 input validation — validateF7Input","title":"Framework7 input validation — validateF7Input","text":"validateF7Input function validate given shinyMobile input.","code":""},{"path":"/reference/validation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 input validation — validateF7Input","text":"","code":"validateF7Input(   inputId,   info = NULL,   pattern = NULL,   error = NULL,   session = shiny::getDefaultReactiveDomain() )"},{"path":"/reference/validation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 input validation — validateF7Input","text":"inputId Input validate. info Additional text display input field. pattern Pattern validation. Regex. error Error text. session Shiny session object.","code":""},{"path":"/reference/validation.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Framework7 input validation — validateF7Input","text":"works f7Text, f7Password, f7TextArea f7Select. See https://framework7.io/docs/inputs.html.","code":""},{"path":"/reference/validation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 input validation — validateF7Input","text":"","code":"if (interactive()) {  library(shiny)  library(shinyMobile)   shinyApp(    ui = f7Page(      title = \"Validate inputs\",      f7SingleLayout(        navbar = f7Navbar(title = \"validateF7Input\"),        f7Text(          inputId = \"caption\",          label = \"Caption\",          value = \"Data Summary\"        ),        verbatimTextOutput(\"value\"),        hr(),        f7Text(          inputId = \"caption2\",          label = \"Enter a number\",          value = 1        )      )    ),    server = function(input, output, session) {      observe({        validateF7Input(inputId = \"caption\", info = \"Whatever\")        validateF7Input(          inputId = \"caption2\",          pattern = \"[0-9]*\",          error = \"Only numbers please!\"        )      })      output$value <- renderPrint({ input$caption })    }  ) }"},{"path":"/reference/virtuallist.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 virtual list — f7VirtualList","title":"Framework7 virtual list — f7VirtualList","text":"f7VirtualList high performance list container. Use many components f7List. f7VirtualListItem item component f7VirtualList.","code":""},{"path":"/reference/virtuallist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 virtual list — f7VirtualList","text":"","code":"f7VirtualList(id, items, rowsBefore = NULL, rowsAfter = NULL, cache = TRUE)  f7VirtualListItem(   ...,   title = NULL,   subtitle = NULL,   header = NULL,   footer = NULL,   href = NULL,   media = NULL,   right = NULL )"},{"path":"/reference/virtuallist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 virtual list — f7VirtualList","text":"id Virtual list unique id. items List items. Slot f7VirtualListItem. rowsBefore Amount rows (items) rendered current screen scroll position. default equal double amount rows (items) fit screen. rowsAfter Amount rows (items) rendered current screen scroll position. default equal amount rows (items) fit screen. cache Disable enable DOM cache already rendered list items. case item rendered manipulations DOM element. useful list items user interaction elements (like form elements swipe outs) modified. ... Item text. title Item title. subtitle Item subtitle. header Item header. use f7List mode NULL. footer Item footer. use f7List mode NULL. href Item external link. media Expect f7Icon img. right Right content .","code":""},{"path":"/reference/virtuallist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 virtual list — f7VirtualList","text":"","code":"if (interactive()) {  library(shiny)  library(shinyMobile)  shinyApp(   ui = f7Page(     title = \"Virtual List\",     f7SingleLayout(       navbar = f7Navbar(         title = \"Virtual Lists\",         hairline = FALSE,         shadow = TRUE       ),       # main content       f7VirtualList(         id = \"vlist\",         rowsBefore = 2,         rowsAfter = 2,         items = lapply(1:2000, function(i) {           f7VirtualListItem(             title = paste(\"Title\", i),             subtitle = paste(\"Subtitle\", i),             header = paste(\"Header\", i),             footer = paste(\"Footer\", i),             right = paste(\"Right\", i),             content = i,             media = img(src = \"https://cdn.framework7.io/placeholder/fashion-88x88-1.jpg\")           )         })       )     )   ),   server = function(input, output) {    }  )   # below example will not load with classic f7List  #shinyApp(  #  ui = f7Page(  #    title = \"My app\",  #    f7SingleLayout(  #      navbar = f7Navbar(  #        title = \"Virtual Lists\",  #        hairline = FALSE,  #        shadow = TRUE  #      ),  #      # main content  #      f7List(  #        lapply(1:20000, function(i) {  #          f7ListItem(  #            title = paste(\"Title\", i),  #            subtitle = paste(\"Subtitle\", i),  #            header = paste(\"Header\", i),  #            footer = paste(\"Footer\", i),  #            right = paste(\"Right\", i),  #            content = i  #          )  #        })  #      )  #    )  #  ),  #  server = function(input, output) {  #  #  }  #) }"},{"path":"/news/index.html","id":"shinymobile-101","dir":"Changelog","previous_headings":"","what":"shinyMobile 1.0.1","title":"shinyMobile 1.0.1","text":"CRAN release: 2024-03-01","code":""},{"path":"/news/index.html","id":"new-1-0-1","dir":"Changelog","previous_headings":"","what":"New","title":"shinyMobile 1.0.1","text":"Added webR pkgdown infrastructure allows run shinylive apps documentation.","code":""},{"path":"/news/index.html","id":"minor-change-1-0-1","dir":"Changelog","previous_headings":"","what":"Minor change","title":"shinyMobile 1.0.1","text":"Add limit f7AutoComplete(). Thanks @bthieurmel.","code":""},{"path":"/news/index.html","id":"bug-fixes-1-0-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"shinyMobile 1.0.1","text":"Fix ignored height f7Card() (Typo). Fix CRAN note.","code":""},{"path":"/news/index.html","id":"shinymobile-100","dir":"Changelog","previous_headings":"","what":"shinyMobile 1.0.0","title":"shinyMobile 1.0.0","text":"CRAN release: 2022-11-25","code":""},{"path":"/news/index.html","id":"new-1-0-0","dir":"Changelog","previous_headings":"","what":"New","title":"shinyMobile 1.0.0","text":"Added skeletonsOnLoad f7Page() options (compatible) preloader.","code":""},{"path":"/news/index.html","id":"breaking-change-1-0-0","dir":"Changelog","previous_headings":"","what":"Breaking change","title":"shinyMobile 1.0.0","text":"preloader moved f7Page() options list. Removed loading_duration f7Page(). Now preloader automatically disappear shiny idle like bs4Dash. panels becomes panel f7SplitLayout() consistency reasons. f7Tab() uses validate_tabName Tab 1 valid anymore Tab1 yes. Tabs manually renamed. f7Popup() now generated server side like f7Notif(). Remove updateF7Popup(), f7TogglePopup(). Reworked f7listIndex(): remove f7ListIndexItem(). f7ListIndex() generated server side. Reworked f7Skeleton(): triggered server side. See examples.","code":""},{"path":"/news/index.html","id":"bug-fixes-and-improvements-1-0-0","dir":"Changelog","previous_headings":"","what":"Bug fixes and improvements","title":"shinyMobile 1.0.0","text":"Improve f7Swiper(): better CSS, pagination, navigation, scrollbar, … Fix issue f7PhotoBrowser() example: wrong default theme … f7CheckBox(): better layout. Fix issue f7FabMorphTarget() example. Fix #226: f7PhotoBrowser() just works two pictures. Fix issue JSON conversion. Fix issue updateF7Popup() documentation (showed deprecated mistake). New skeleton effect load (automatic): applied grey background elements loading. Ends shiny idle. New skeleton effect output recalculation. Fix issue f7Navbar(): hard-coded css style causing white text white background. Fix #151: Issue navbar/toolbar scroll. See . Fix #165: Setting separate theme panels work. Fix #181: Adding dynamic tab empty panel. Related #220. new title parameter available f7Tab() pass name, oposed tabName. Fix #228: Vignette Example doesn’t show graphs. Breaking change shiny 1.7.2. Issue f7SmartSelect() openIn param (failed provided). Fix #219: Avoid using inline CSS users can easily override {shinyMobile} defaults. Fix #220: f7Tab() can create duplicate IDs turn break page. Now use validate_tabName internally check whether tab valid (avoid JS issues jQuery selectors)… Fix #224: updateF7AutoComplete() accepts choices. Fixes #217: f7SmartSelect() interfering NS server-side module. Fixes #215: Icon displayed reconnect / reload toaster. Add f7Icon deps anyway. Fixes #204: issue f7DatePicker() DST. Update CI/CD setup. Fix issue f7Page() accept anymore color name. Now, like earlier versions, f7Page() accepts either hex code color name. Fixes #222: f7Slider() code updated work fix #215 .","code":""},{"path":"/news/index.html","id":"shinymobile-091","dir":"Changelog","previous_headings":"","what":"shinyMobile 0.9.1","title":"shinyMobile 0.9.1","text":"CRAN release: 2021-09-16 release fixes issue Shiny 1.7.0 failing unit test. Thanks @schloerke","code":""},{"path":"/news/index.html","id":"shinymobile-090","dir":"Changelog","previous_headings":"","what":"shinyMobile 0.9.0","title":"shinyMobile 0.9.0","text":"CRAN release: 2021-07-22 release also fixes issue R CMD check htmltools.","code":""},{"path":"/news/index.html","id":"breaking-change-0-9-0","dir":"Changelog","previous_headings":"","what":"Breaking change","title":"shinyMobile 0.9.0","text":"f7Link() icon now expects f7Icon(). label mandatory anymore.","code":""},{"path":"/news/index.html","id":"major-change-0-9-0","dir":"Changelog","previous_headings":"","what":"Major change","title":"shinyMobile 0.9.0","text":"New updateF7Radio(). Fixes #135. Thanks @korterling.","code":""},{"path":"/news/index.html","id":"minor-change-0-9-0","dir":"Changelog","previous_headings":"","what":"Minor change","title":"shinyMobile 0.9.0","text":"security embedded apps. Added shinyMobile hands slides Getting Started vignette. f7Dialog() fixed height 300px vertical overflow avoid issues. Add ... f7SmartSelect(). Add options f7SearchBar() provide configuration. Fixes #47: thanks @rodrigoheck. Add valueText param f7Gauge(). Fixes #84: thanks @tanho63. Reworked f7Gauge() JS code (user impact). Rework widget JS code base (user impact).","code":""},{"path":"/news/index.html","id":"bug-fixes-0-9-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"shinyMobile 0.9.0","text":"Fix #180: Tab highlight index issue android devices tab remove add tab. Fix #190: add longer dialog text f7Dialog. Fix #154: include link icon f7Link() function. Fix #127: Enable groups f7SmartSelect(). Fix #174 #134: Reactive elements created inside insertF7Tab() losing reactivity. Fix #98: f7DatePicker() visibility issue. Thanks @styvens. Fix #120: f7Button() link working. Thanks @bwganblack. Fix #144: Close f7SmartSelect() selection. Thanks @dewalex.","code":""},{"path":"/news/index.html","id":"shinymobile-080","dir":"Changelog","previous_headings":"","what":"shinyMobile 0.8.0","title":"shinyMobile 0.8.0","text":"CRAN release: 2021-01-11 release addresses following reverse dependency issue shiny. Moreover, also starts road v1.0.0 (later year).","code":""},{"path":"/news/index.html","id":"soft-deprecations-0-8-0","dir":"Changelog","previous_headings":"","what":"Soft Deprecations","title":"shinyMobile 0.8.0","text":"f7AddMessages() become updateF7Messages() future release f7HideNavbar() f7ShowNavbar() replaced updateF7Navbar() f7ShowPopup() become updateF7Popup() f7checkBox() become f7Checkbox() f7checkBoxGroup() become f7CheckboxGroup() f7ValidateInput() become validateF7Input() f7InsertTab() f7RemoveTab() becomes insertF7Tab() removeF7Tab(), respectively f7ShowPreloader() f7HidePreloader() become showF7Preloader() hideF7Preloader(), respectively. f7Popover() f7PopoverTarget() replaced addF7Popover() toggleF7Popover() create_manifest() going replaced workflow described : https://unleash-shiny.rinterface.com/mobile-pwa.html#charpente--pwa-tools","code":""},{"path":[]},{"path":"/news/index.html","id":"inputs-0-8-0","dir":"Changelog","previous_headings":"Breaking changes","what":"Inputs","title":"shinyMobile 0.8.0","text":"updateF7Fabs(): inputId becomes id","code":""},{"path":"/news/index.html","id":"layout-0-8-0","dir":"Changelog","previous_headings":"Breaking changes","what":"Layout","title":"shinyMobile 0.8.0","text":"f7Appbar(): left_panel becomes leftPanel right_panel rightPanel f7Init() removed. Now pass f7Page() options f7Navbar(): left_panel becomes leftPanel right_panel rightPanel f7Panel() updateF7Panel(): inputId becomes id f7InsertTab() f7RemoveTab(): inputId becomes id","code":""},{"path":"/news/index.html","id":"cards-0-8-0","dir":"Changelog","previous_headings":"Breaking changes","what":"Cards","title":"shinyMobile 0.8.0","text":"f7ExpandableCard() f7Card(): img becomes image f7SocialCard(): author_img becomes image","code":""},{"path":"/news/index.html","id":"lists-0-8-0","dir":"Changelog","previous_headings":"Breaking changes","what":"Lists","title":"shinyMobile 0.8.0","text":"f7ListItem(): url becomes href f7VirtualListItem(): url becomes href updateF7VirtualList(): old_index new_index become oldIndex newIndex, respectively","code":""},{"path":"/news/index.html","id":"interactions-0-8-0","dir":"Changelog","previous_headings":"Breaking changes","what":"Interactions","title":"shinyMobile 0.8.0","text":"session mandatory f7Toast(), updateF7Progress(), … swapped end parameters convenience f7Dialog(): inputId becomes id updateF7Sheet(): inputId becomes id","code":""},{"path":"/news/index.html","id":"buttons-0-8-0","dir":"Changelog","previous_headings":"Breaking changes","what":"Buttons","title":"shinyMobile 0.8.0","text":"f7Link(): external removed (much simpler), src becomes href f7Button(): src becomes href","code":""},{"path":"/news/index.html","id":"others-0-8-0","dir":"Changelog","previous_headings":"Breaking changes","what":"Others","title":"shinyMobile 0.8.0","text":"session swapped end f7Gauge() mandatory. Default shiny::getDefaultReactiveDomain() f7Chip(): icon_status becomes iconStatus, img becomes image inputId becomes id f7Accordion() updateF7Accordion() Remove f7ProgressInf() (useless) Change f7Swiper() API. New options parameter f7PhotoBrowser() now called shiny server function. See help, id label removed id mandatory f7Searchbar()","code":""},{"path":"/news/index.html","id":"major-changes-0-8-0","dir":"Changelog","previous_headings":"","what":"Major changes","title":"shinyMobile 0.8.0","text":"New updateF7Entity() New updateF7ActionSheet() New addF7Tooltip() updateF7Tooltip() generate tooltips server New allowPWA parameter f7Page() doesn’t oblige users create PWA f7Page() new options parameter replacement f7Init(). Much simpler handle update framework7 5.5.0 5.7.14 add f7Menu(), f7MenuItem(), f7MenuDropdown(), f7MenuDropdownDivider() updateF7MenuDropdown(): special buttons dropdown elements, behaving like action buttons","code":""},{"path":"/news/index.html","id":"minor-changes-0-8-0","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"shinyMobile 0.8.0","text":"app instance accessible anywhere JS code New … parameter f7PhotoBrowser() Add choices updateF7SmartSelect(): thanks @Edireito Add disconnect toast shiny:disconnect occurs. Gives ability reload reconnect","code":""},{"path":"/news/index.html","id":"bug-fixes-0-8-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"shinyMobile 0.8.0","text":"Fix #128 #140: workerId issue url. Thanks @Tixierae @ppagnone. Fix #104: f7Picker NULL value. Prevents JS breaking. Thanks @Seyphaton Correcting internal use htmltools::attachDependencies() create_app_ui","code":""},{"path":"/news/index.html","id":"shinymobile-070","dir":"Changelog","previous_headings":"","what":"shinyMobile 0.7.0","title":"shinyMobile 0.7.0","text":"CRAN release: 2020-06-17","code":""},{"path":"/news/index.html","id":"notes-0-7-0","dir":"Changelog","previous_headings":"","what":"Notes","title":"shinyMobile 0.7.0","text":"disable backdrop f7Searchbar() since messes tabbar navigation. impact user experience. future release shinyMobile, f7Searchbar() input binding associated well parameters configuration","code":""},{"path":"/news/index.html","id":"breaking-changes-0-7-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"shinyMobile 0.7.0","text":"f7SmartSelect(): type param becomes openIn align inputs rework f7Messages(): messages updated server side f7AddMessages(). New f7MessageBar() send messages server side. f7ActionSheet(): access currently selected button, use input$[sheet_id]_button. make action sheets compatible shiny modules. Moreover, buttons provided must included list (dataframe) f7Sheet() still inserted UI side can triggered either server side combination updateF7Sheet() (see example) UI side. Overall, improves flexibility since user may choose trigger element. practice, element data-sheet pointing sheet id well “sheet-open” css class may open , instead default trigger contained sheet. use case may open sheet tabbar (trigger f7TabLink() special button styled tabbar) update method inputs : argument session now optional moved last position function call f7AutoComplete(): type becomes openIn align framework7 documentation remove parameter fill f7Icon() (used) Rewrite f7Popup(). now input associated giving popup state (opened closed) well new parameters: backdrop, closeByBackdropClick, closeOnEscape, animate swipeToClose. label parameters removed. create f7Popup() put f7Popup() tag UI. server side call f7TogglePopup(). See documentation detailed example. Thanks @pasahe f7NavbarHide() renamed f7HideNavbar() consistancy f7NavbarShow() renamed f7ShowNavbar() consistancy f7Gauge() valueText removed. make sense value can accidentally different text displayed. valueText internal parameter. f7DatePicker(): min becomes minDate, max becomes maxDate format becomes dateFormat remove maximizable parameter f7Appbar()","code":""},{"path":"/news/index.html","id":"major-changes-0-7-0","dir":"Changelog","previous_headings":"","what":"Major changes","title":"shinyMobile 0.7.0","text":"new input$shinyInfo input$lastInputChanged (see shinyMobile tools vignette details) f7SmartSelect() input binding well update function updateF7SmartSelect() new f7VirtualList(), f7VirtualListItem(), updateF7VirtualList(): high performance list caching system -> faster rendering (10x faster f7List()). Ability add item(s), remove item(s), move item, filter items, … new messagebar parameter f7TabLayout(). allows use f7Messagebar() tabs layout configuration. new f7ValidateInput() function validate input server side (similar shinyFeedback internal shinyMobile without dependencies) new f7Login() updateF7Login() feature provide UI boilerplates authentication f7Tabs() may used standalone components style argument (segmented strong). toolbar default behavior. update f7Icon() icons dependencies. thanks @pvictor new updateF7DatePicker(): thanks @pvictor add input binding f7Fabs() get status container add updateF7Button() updateF7Fabs() new pullToRefresh parameter f7Init(). Pull screen top bottom fires input$ptr becomes TRUE. pull refresh event finished, input$ptr NULL. Useful trigger events observeEvent add new updateF7Select(): thanks @Seyphaton suggestion add f7TogglePopup() close/open f7Popup(). Thanks @pasahe add preview_mobile(): function previews app seleted range devices (iphone, samsung, htc, …) redesign way inputs options passed R Javascript. impact user side improves security code quality","code":""},{"path":"/news/index.html","id":"minor-changes-0-7-0","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"shinyMobile 0.7.0","text":"add new f7File() file upload. See shiny fileInput add new f7DownloadButton() work properly shiny downloadHandler function. Thanks @bwganblack report add new tapHoldDelay parameter f7Init() control delay necessary trigger long press (default 750 ms) new f7ShowPreloader() f7HidePreloader() new f7TextArea() input updateF7TextArea() server side add block title f7checkBoxGroup() f7Radio() add new f7TabLink() (special link insert f7Tabs() may open f7Sheet()) add new active parameter f7Button() add new strong parameter f7Segment() Improve website. Thanks @pvictor new fullsize closeButton parameter f7Popup() + rewrite js binding. Thanks @pvictor add extra parameters f7DatePicker(): direction, openIn, scrollToInput, closeByOutsideClick, toolbar, toolbarCloseText, header headerPlaceholder add new parameters updateF7Gauge(). Thanks @rodrigoheck suggestion add noSwipping argument f7Slider() prevent wrong behaviour used f7TabLayout() f7Select() rely anymore shiny selectInput binding (impact user experience) add hidden argument f7Tab(): allows navigate hidden tabs without displaying tab menu. Thanks @rodrigoheck add closeOnSelect param f7AutoComplete() add new parameters f7Picker() updateF7Picker(): rotateEffect, openIn, scrollToInput, closeByOutsideClick, toolbar, toolbarCloseText sheetSwipeToClose add color argument f7Icon() add selected parameter f7Select() update framework7 5.3.0 add color updateF7Slider() add color f7Slider() add cheatsheet reference readme add f7Slider() labels (remove enableLabels param) add step, scaleSteps scaleSubSteps updateF7Slider() add scaleSteps, scaleSubSteps verticalReversed f7Slider() add decimalPoint updateF7Stepper() rework f7Stepper(): add 2 parameters (decimalPoint buttonsEndInputMode) hideNavOnPageScroll set FALSE default f7Init(). improves perfomances old devices improve f7SingleLayout() example (replace sliderInput f7Slider) improve f7SplitLayout() example (replace sliderInput f7Slider) improve f7TabLayout() example add copyrights","code":""},{"path":"/news/index.html","id":"bug-fix-0-7-0","dir":"Changelog","previous_headings":"","what":"Bug fix","title":"shinyMobile 0.7.0","text":"Fix issue updateF7AutoComplete: text input updated. Thanks @sanchez5674 report Remove duplicated html tag f7Page(). Thanks @ pvictor Fix issue f7Sheet() wrong css style applied multiple sheets app Fix issue f7Tabs(): one put f7Tabs() inside f7Tab() parent f7Tabs(), input binding giving wrong tab top level tabset (clicked tab containing sub-tabset). Fix issue f7InsertTab() f7RemoveTab() swipeable TRUE trigger shown event f7Tabs() click. allows use f7Tabs() without swipeable animated Allow output elements displayed f7Panel() (need provide f7Panel() inputId) Prevent f7Swipeout() make current tab swipping f7TabLayout() Fix f7Fab() label white background color dark mode fix #19: letting bigger TRUE f7Navbar() center body content scroll, due css conflict fix issue f7Slider() f7TabLayout(): setting value slider swipeable f7TabLayout cause tab swip. describe : framework7io/framework7#2603. Thanks @pvictor fix #39: issue f7DatePicker() format months. Thanks @kmaheshkulkarni fix issue f7DatePicker(): viewport scroll input default fix typo f7AutoComplete() example fix #43: slider label visible drag. Thanks @pasahe fix #42: add vertical overflow f7Popup(). Thanks @pasahe fix #41: render shiny outputs f7Popup(). Now f7Popup() triggers shiny output rendering. Thanks @pasahe fix #31: updateF7Gauge() -> wrong fraction semi circle gauges. fix f7Stepper(): options properly initialized (max, min, …) fix f7Slider() example 2: wrong argument help fix f7Icon() example: wrong function name fix f7Row() example f7Sheet(): hiddenItems NULL default apply magin bottom toolbar f7Appbar()","code":""},{"path":"/news/index.html","id":"shinymobile-010","dir":"Changelog","previous_headings":"","what":"shinyMobile 0.1.0","title":"shinyMobile 0.1.0","text":"CRAN release: 2019-11-30 Added NEWS.md file track changes package.","code":""}]
