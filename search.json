[{"path":[]},{"path":"/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement [INSERT CONTACT METHOD]. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/ code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https:// www.contributor-covenant.org/translations.","code":""},{"path":"/articles/inputs-layout.html","id":"inputs-layout","dir":"Articles","previous_headings":"","what":"Inputs Layout","title":"Inputs Layout and Forms","text":"app can many different inputs. time inputs nicely displayed together users can make /selections. many styling options Framework7 provides, can quite hassle style individually. Luckily, don’t ! can wrap inside f7List() benefit styling options, styling (see iOS skin): Code default inputs list displayed stacked labels. Stacked labels always appear top input.  following inputs supported: f7Text() f7TextArea() f7Password() f7Select() f7SmartSelect() f7AutoComplete() f7Stepper() f7Toggle() f7Picker() f7DatePicker() f7ColorPicker()  doesn’t mean can’t use inputs, may look bit . case can take f7List() style manually available options input. example, f7CheckboxGroup() f7Radio() supported f7List() can styled look similar: Code","code":"library(shiny) library(shinyMobile)  shinyApp(   ui = f7Page(     options = list(dark = FALSE, theme = \"ios\"),     title = \"Inputs Layout\",     f7SingleLayout(       navbar = f7Navbar(         title = \"Inputs Layout\",         hairline = FALSE       ),       f7List(         inset = TRUE,         dividers = TRUE,         strong = TRUE,         outline = FALSE,         f7Text(           inputId = \"text\",           label = \"Text input\",           value = \"Some text\",           placeholder = \"Your text here\"         ),         f7TextArea(           inputId = \"textarea\",           label = \"Text area input\",           value = \"Some text\",           placeholder = \"Your text here\"         ),         f7Select(           inputId = \"select\",           label = \"Make a choice\",           choices = 1:3,           selected = 1         ),         f7AutoComplete(           inputId = \"myautocomplete\",           placeholder = \"Some text here!\",           openIn = \"dropdown\",           label = \"Type a fruit name\",           choices = c(             \"Apple\", \"Apricot\", \"Avocado\", \"Banana\", \"Melon\",             \"Orange\", \"Peach\", \"Pear\", \"Pineapple\"           )         ),         f7Toggle(           inputId = \"toggle\",           label = \"Toggle me\"         ),         f7Picker(           inputId = \"picker\",           placeholder = \"Some text here!\",           label = \"Picker Input\",           choices = c(\"a\", \"b\", \"c\"),           options = list(sheetPush = TRUE)         ),         f7DatePicker(           inputId = \"date\",           label = \"Pick a date\",           value = Sys.Date()         ),         f7ColorPicker(           inputId = \"mycolorpicker\",           placeholder = \"Some text here!\",           label = \"Select a color\"         )       )     )   ),   server = function(input, output) {   } ) library(shiny) library(shinyMobile)  shinyApp(   ui = f7Page(     options = list(dark = FALSE, theme = \"ios\"),     title = \"Inputs Layout\",     f7SingleLayout(       navbar = f7Navbar(         title = \"Inputs Layout\",         hairline = FALSE       ),       f7List(         inset = TRUE,         dividers = TRUE,         strong = TRUE,         outline = FALSE,         f7Text(           inputId = \"text\",           label = \"Text input\",           value = \"Some text\",           placeholder = \"Your text here\"         ),         f7TextArea(           inputId = \"textarea\",           label = \"Text area input\",           value = \"Some text\",           placeholder = \"Your text here\"         ),         f7Select(           inputId = \"select\",           label = \"Make a choice\",           choices = 1:3,           selected = 1         ),         f7AutoComplete(           inputId = \"myautocomplete\",           placeholder = \"Some text here!\",           openIn = \"dropdown\",           label = \"Type a fruit name\",           choices = c(             \"Apple\", \"Apricot\", \"Avocado\", \"Banana\", \"Melon\",             \"Orange\", \"Peach\", \"Pear\", \"Pineapple\"           )         ),         f7Stepper(           inputId = \"stepper\",           label = \"My stepper\",           min = 0,           color = \"default\",           max = 10,           value = 4         ),         f7Toggle(           inputId = \"toggle\",           label = \"Toggle me\"         ),         f7Picker(           inputId = \"picker\",           placeholder = \"Some text here!\",           label = \"Picker Input\",           choices = c(\"a\", \"b\", \"c\"),           options = list(sheetPush = TRUE)         ),         f7DatePicker(           inputId = \"date\",           label = \"Pick a date\",           value = Sys.Date()         ),         f7ColorPicker(           inputId = \"mycolorpicker\",           placeholder = \"Some text here!\",           label = \"Select a color\"         )       ),       f7CheckboxGroup(         inputId = \"checkbox\",         label = \"Checkbox group\",         choices = c(\"a\", \"b\", \"c\"),         selected = \"a\",         style = list(           inset = TRUE,           dividers = TRUE,           strong = TRUE,           outline = FALSE         )       ),       f7Radio(         inputId = \"radio\",         label = \"Radio group\",         choices = c(\"a\", \"b\", \"c\"),         selected = \"a\",         style = list(           inset = TRUE,           dividers = TRUE,           strong = TRUE,           outline = FALSE         )       )     )   ),   server = function(input, output) {   } )"},{"path":"/articles/inputs-layout.html","id":"forms","dir":"Articles","previous_headings":"","what":"Forms","title":"Inputs Layout and Forms","text":"Since {shinyMobile} 2.0.0, functions f7Form() updateF7Form() introduced gather inputs form update batch selected ones. form returns list inputs inside , can access inputId.  example means can gather values simply calling input$myform update calling updateF7Form(): Code Since f7Form() wrapped inside f7List(), look like regular list inputs. difference way inputs gathered can updated.  Currently, following inputs supported form : f7Text() f7TextArea() f7Password() f7Select()  types inputs form might looks good, might return expected results.","code":"library(shiny) library(shinyMobile)  shinyApp(   ui = f7Page(     f7SingleLayout(       navbar = f7Navbar(title = \"Inputs form\"),       f7Block(f7Button(\"update\", \"Click me\")),       f7BlockTitle(\"A list of inputs in a form\"),       f7List(         inset = TRUE,         dividers = FALSE,         strong = TRUE,         outline = FALSE,         f7Form(           id = \"myform\",           f7Text(             inputId = \"text\",             label = \"Text input\",             value = \"Some text\",             placeholder = \"Your text here\",             style = list(               description = \"A cool text input\",               outline = TRUE,               media = f7Icon(\"house\"),               clearable = TRUE,               floating = TRUE             )           ),           f7TextArea(             inputId = \"textarea\",             label = \"Text Area\",             value = \"Lorem ipsum dolor sit amet, consectetur               adipiscing elit, sed do eiusmod tempor incididunt ut               labore et dolore magna aliqua\",             placeholder = \"Your text here\",             resize = TRUE,             style = list(               description = \"A cool text input\",               outline = TRUE,               media = f7Icon(\"house\"),               clearable = TRUE,               floating = TRUE             )           ),           f7Password(             inputId = \"password\",             label = \"Password:\",             placeholder = \"Your password here\",             style = list(               description = \"A cool text input\",               outline = TRUE,               media = f7Icon(\"house\"),               clearable = TRUE,               floating = TRUE             )           ),           f7Select(             inputId = \"select\",             label = \"Select a number\",             choices = c(1, 2, 3),             style = list(               description = \"A selection\",               outline = TRUE,               media = f7Icon(\"house\")             )           )         )       ),       f7Block(verbatimTextOutput(\"form\"))     )   ),   server = function(input, output, session) {     output$form <- renderPrint(input$myform)          observeEvent(input$update, {       updateF7Form(         \"myform\",         data = list(           \"text\" = \"New text\",           \"textarea\" = \"New text area\",           \"password\" = \"New password\",           \"select\" = 3         )       )     })   } )"},{"path":"/articles/lists.html","id":"creating-different-types-of-lists","dir":"Articles","previous_headings":"","what":"Creating Different Types of Lists","title":"List View","text":"Lists great way organize information structured way. Framework7 provides number different list types choose , ranging simple text lists complex lists icons, groups, headers footers. shinyMobile, possibilities available f7List() f7ListItem() functions.","code":""},{"path":"/articles/lists.html","id":"styling-options","dir":"Articles","previous_headings":"Creating Different Types of Lists","what":"Styling options","title":"List View","text":"4 styling options available lists: inset: make list block inset, make list block appear indented. used combination strong, also rounded corners. outline: add outline (borders) around list block dividers: add dividers (borders) list items strong: add extra highlighting list block","code":""},{"path":"/articles/lists.html","id":"available-mode-options","dir":"Articles","previous_headings":"Creating Different Types of Lists","what":"Available mode options","title":"List View","text":"4 different modes available lists: simple: create simple list links: create list links media: create list media elements contacts: create grouped list","code":""},{"path":"/articles/lists.html","id":"examples","dir":"Articles","previous_headings":"","what":"Examples","title":"List View","text":"can imagine, lot possible combinations options. show examples create different types lists.","code":""},{"path":"/articles/lists.html","id":"list-items","dir":"Articles","previous_headings":"Examples","what":"List items","title":"List View","text":"two different ways can create items belonging f7List(): Using tags$li(), simple way create list item. Within tag can add HTML content like. Using f7ListItem(), gives plenty options configure list item. recommended method. example, following code creates simple list 5 items using first method:  Using second method, code look like:  styling two methods might differ slightly, second method CSS classes added list items. However, case simple item like , ’s difference.","code":"f7List(   mode = \"simple\",   lapply(1:5, function(j) {     tags$li(       paste(\"Item\", j)     )   }) ) f7List(   mode = \"simple\",   lapply(1:5, function(j) {     f7ListItem(       title = paste(\"Item\", j)     )   }) )"},{"path":"/articles/lists.html","id":"simple-list","dir":"Articles","previous_headings":"Examples","what":"Simple list","title":"List View","text":"simple list mode set \"simple\" options set: Code  Note need use title = ... f7ListItem() using f7List(mode = \"simple\", ...). arguments f7ListItem() ignored mode \"simple\".  Using styling options, can already drastically change appearance list: Code","code":"library(shiny) library(shinyMobile)  shinyApp(   ui = f7Page(     title = \"My app\",     options = list(dark = FALSE, theme = \"ios\"),     f7SingleLayout(       navbar = f7Navbar(title = \"f7List\"),       f7List(         mode = \"simple\",         lapply(1:5, function(j) {           f7ListItem(             title = paste(\"Item\", j)           )         })       )     )   ),   server = function(input, output) {   } ) library(shiny) library(shinyMobile)  shinyApp(   ui = f7Page(     title = \"My app\",     options = list(dark = FALSE, theme = \"ios\"),     f7SingleLayout(       navbar = f7Navbar(title = \"f7List\"),       f7List(         mode = \"simple\",         outline = TRUE,         dividers = TRUE,         strong = TRUE,         lapply(1:5, function(j) {           f7ListItem(             title = paste(\"Item\", j)           )         })       )     )   ),   server = function(input, output) {   } )"},{"path":"/articles/lists.html","id":"simple-link-list","dir":"Articles","previous_headings":"Examples","what":"Simple link list","title":"List View","text":"setting mode \"links\", list items displayed links: Code  example , ’re using f7Link() create links. automatically make sure links opened new tab.","code":"library(shiny) library(shinyMobile)  shinyApp(   ui = f7Page(     title = \"My app\",     options = list(dark = FALSE, theme = \"ios\"),     f7SingleLayout(       navbar = f7Navbar(title = \"f7List\"),       f7List(         mode = \"links\",         outline = TRUE,         dividers = TRUE,         strong = TRUE,         lapply(1:5, function(j) {           tags$li(             f7Link(label = paste(\"Item\", j), href = \"https://www.google.com\")           )         })       )     )   ),   server = function(input, output) {   } )"},{"path":"/articles/lists.html","id":"link-list-with-header-and-footer","dir":"Articles","previous_headings":"Examples","what":"Link list with header and footer","title":"List View","text":"add complexity link list, can add header footer. case, use f7ListItem() create list items. important set mode NULL f7List(): Code","code":"library(shiny) library(shinyMobile)  shinyApp(   ui = f7Page(     title = \"My app\",     options = list(dark = FALSE, theme = \"ios\"),     f7SingleLayout(       navbar = f7Navbar(title = \"f7List\"),       f7List(         mode = NULL,         outline = TRUE,         dividers = TRUE,         strong = TRUE,         lapply(1:5, function(j) {           f7ListItem(             title = paste(\"Item\", j),             header = paste(\"Header\", j),             footer = paste(\"Footer\", j),             href = \"https://www.google.com\"           )         })       )     )   ),   server = function(input, output) {   } )"},{"path":"/articles/lists.html","id":"grouped-list","dir":"Articles","previous_headings":"Examples","what":"Grouped list","title":"List View","text":"grouped list can generated using f7ListGroup(). mode argument set \"contacts\" f7List(): Code adding media f7ListItem(), can display image next list item, thereby making pretty fancy contact list!  desired, can also use f7Icon(): Code","code":"library(shiny) library(shinyMobile)  shinyApp(   ui = f7Page(     title = \"My app\",     options = list(dark = FALSE, theme = \"ios\"),     f7SingleLayout(       navbar = f7Navbar(title = \"f7List\"),       f7List(         mode = \"contacts\",         outline = TRUE,         dividers = TRUE,         strong = TRUE,         lapply(4:6, function(i) {           f7ListGroup(             title = LETTERS[i],             lapply(1:10, function(j) {               f7ListItem(title = paste(\"Person\", j),                          media = tags$img(                          src = paste0(\"https://cdn.framework7.io/placeholder/people-160x160-\", j, \".jpg\")                          ),                          # Random phone number as text                          paste0(\"+42 6 \", sample(10000000:99999999, 1))                          )             })           )         })       )     )   ),   server = function(input, output) {   } ) library(shiny) library(shinyMobile)  shinyApp(   ui = f7Page(     title = \"My app\",     options = list(dark = FALSE, theme = \"ios\"),     f7SingleLayout(       navbar = f7Navbar(title = \"f7List\"),       f7List(         mode = \"contacts\",         outline = TRUE,         dividers = TRUE,         strong = TRUE,         lapply(4:6, function(i) {           f7ListGroup(             title = LETTERS[i],             lapply(1:10, function(j) {               f7ListItem(title = paste(\"Person\", j),                          media = f7Icon(\"person_fill\"),                          # Random phone number as text                          paste0(\"+31 6 \", sample(10000000:99999999, 1))                          )             })           )         })       )     )   ),   server = function(input, output) {   } )"},{"path":"/articles/lists.html","id":"media-list","dir":"Articles","previous_headings":"Examples","what":"Media list","title":"List View","text":"mode set \"media\", can create list media objects, option add subtitle list items. Note header footer can’t used media list. Code default media width 50. want override , can add width img tag.","code":"library(shiny) library(shinyMobile)  shinyApp(   ui = f7Page(     title = \"My app\",     options = list(dark = FALSE, theme = \"ios\"),     f7SingleLayout(       navbar = f7Navbar(title = \"f7List\"),       f7List(         mode = \"media\",         outline = TRUE,         dividers = TRUE,         strong = TRUE,         lapply(1:10, function(i) {           f7ListItem(             title = paste(\"Title\", i),             subtitle = paste(\"Subtitle\", i),             media = tags$img(               style = \"border-radius: 8px;\",               src = paste0(\"https://cdn.framework7.io/placeholder/people-160x160-\", i, \".jpg\"),               width = \"70\"             ),             right = paste(\"Right\", i),             paste(\"Some longer text about this particular item that has the magical number\", i),             href = \"#\"           )         })       )     )   ),   server = function(input, output) {   } )"},{"path":"/articles/lists.html","id":"other-types-of-lists","dir":"Articles","previous_headings":"","what":"Other Types of Lists","title":"List View","text":"list view can used cases well: create virtual list f7VirtualList() displaying list large number items. create inputs layout, inputs can nicely grouped styled together inside f7List(). can read Inputs Layout vignette. Swipeout extension list view allows swipe list elements reveal hidden menu available actions. can use f7Swipeout() f7SwipeOutItem() .","code":""},{"path":"/articles/multipages.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Multipages","text":"Disclaimer: following still experimental. Use caution. Since v2.0.0, shinyMobile multi pages support. hood, amazing feature made possible owing {brochure} package Colin Fay well internal Framework7 router. multi pages navigation? consider basic website 2 pages index.html .html, browsing https:://mywebsite.com opens index.html typing https:://mywebsite.com/.html requests .html page. take classic shiny app tabs, clicking one tab gives illusion browse another page Bootstrap JS CSS magic. ’s however case url change. Therefore, Shiny doesn’t support multi pages navigation default. {brochure} makes somehow possible.","code":""},{"path":"/articles/multipages.html","id":"about-brochure","dir":"Articles","previous_headings":"","what":"About brochure","title":"Multipages","text":"develop {brochure} app, need following template: brief, create different pages page() put inside brochureApp(). page composed ui, server href represents location serve page. theory, mentioned {brochure} documentation, page shiny session, means go page 1 page 2, state page 1 lost come back . shinyMobile, decided slightly deviate assign global server function, meaning can use brochureApp() server parameter instead one page(). requires install modified version {brochure}: Besides, brochureApp() exposes wrapped, allowing us inject f7MultiLayout() function, described details.","code":"page_1 <- function() {   page(     href = \"/\",     ui = function(request) {       # PAGE 1 UI     },     server = function(input, output, session) {       # Server function     }   ) }  page_2 <- function() {   page(     href = \"/2\",     ui = function(request) {       # Page 2 UI     },     server = function(input, output, session) {       # Server function     }   ) }  page_3 <- function() {   page(     href = \"/3\",     ui = function(request) {       # Page 3 UI     },     server = function(input, output, session) {       # Server function     }   ) }  brochureApp(   # Pages   page_1(),   page_2(),   page_3(),   wrapped = <WRAPPER-FUNC> ) devtools::install_github(\"DivadNojnarg/brochure\")"},{"path":"/articles/multipages.html","id":"the-new-f7multilayout","dir":"Articles","previous_headings":"","what":"The new f7MultiLayout","title":"Multipages","text":"f7MultiLayout() accepts elements certain layout, similar exposed f7SingleLayout(): page main wrapper takes navbar page-content children. Note can also local toolbar, assuming didn’t define main toolbar f7MultiLayout(). Indeed, pass toolbar corresponding f7MultiLayout() parameter, seen global app toolbar. page-content displayed page content shinyMobile widgets. f7MultiLayout() accepts list app options, like f7DefaultOptions(), internally forwarded f7Page(). time writting vignette, must install patched {brochure} version devtools::install_github(\"DivadNojnarg/brochure\") able pass custom options brochureApp(), essentially calls .call(wrapped, wrapped_options):","code":"shiny::tags$div(   class = \"page\",   # top navbar goes here   f7Navbar(title = \"Home page\"),   # Optional toolbar #   tags$div(     class = \"page-content\",     ...   ) ) brochureApp(   # Pages   page_1(),   page_2(),   page_3(),   wrapped = <WRAPPER-FUNC>   wrapped_options = <OPTIONS> )"},{"path":[]},{"path":"/articles/multipages.html","id":"local-version","dir":"Articles","previous_headings":"Framework 7 router","what":"Local version","title":"Multipages","text":"Internally, f7MultiLayout() wraps pages view reponsible page navigation history (going back forward browser back/next buttons). view also called router. (point, may wonder basepath. come back later article) addition creating pages UI, need tell Framework7 route pages. pretty simple, can pass list routes sent JS app options list. may yield something like : route, must provide: path: path display url. url: page url. case, identical path. keepAlive: ensures leave current page come back, don’t lose state inputs widgets inside. Hence, expected TRUE. See .","code":"# f7MultiLayout shiny::tags$div(   class = \"view view-main view-init\",   # When app is deployed, the basepath isn't / but something else ...   `data-url` = basepath,   # Avoids to see the previous page in the DOM   `data-preload-previous-page` = \"false\",   # Important: to be able to have updated url   `data-browser-history` = \"true\",   # Avoids the ugly #! default separator   `data-browser-history-separator` = \"\",   # Optional common toolbar   toolbar,   ... ) # Framework7 options: see f7DefaultOptions() options = list(   # dark mode option   dark = TRUE,   routes = list(     # Important: don't remove keepAlive     # for pages as this allows     # to save the input state when switching     # between pages. If FALSE, each time a page is     # changed, inputs are reset.     list(path = \"/\", url = \"/\", name = \"home\", keepAlive = TRUE),     list(path = \"/2\", url = \"/2\", name = \"2\", keepAlive = TRUE),     list(path = \"/3\", url = \"/3\", name = \"3\", keepAlive = TRUE)   ) )"},{"path":"/articles/multipages.html","id":"deploying-on-a-server","dir":"Articles","previous_headings":"Framework 7 router","what":"Deploying on a server","title":"Multipages","text":"point, want deploy app server. url something like https://<user_name>.shinyapps.io/<app_name> using shinyapps.io hosting system. case, must adapt links, one provided router configuration different pages account base location (basepath) /<app_name just / locally. create config.yml file handle different basepath link navigation work: design helper function handle link update: can see, leverage config package recover basepath value. deployed, app knows shinyapps.io basepath /multipages. can update router config make_link. Note first page, use make_link() either return / (locally) /<app_path> server. pages, just call make_link(\"2\") yields either /2 locally /<app_path>/2 server: call brochureApp, don’t forget pass basepath parameter (alternatively make_link()):","code":"default:   basepath: \"\" shinyapps:   basepath: \"/multipages\" # Allows to use the app on a server like  # shinyapps.io where basepath is /app_name # instead of \"/\" or \"\". make_link <- function(path = NULL) {   if (is.null(path)) {     if (nchar(config::get()$basepath) > 0) {       return(config::get()$basepath)     } else {       return(\"/\")     }   }   sprintf(\"%s/%s\", config::get()$basepath, path) } # Framework7 options: see f7DefaultOptions() options = list(   # dark mode option   dark = TRUE,   routes = list(     # Important: don't remove keepAlive     # for pages as this allows     # to save the input state when switching     # between pages. If FALSE, each time a page is     # changed, inputs are reset.     list(path = make_link(), url = make_link(), name = \"home\", keepAlive = TRUE),     list(path = make_link(\"2\"), url = make_link(\"2\"), name = \"2\", keepAlive = TRUE),     list(path = make_link(\"3\"), url = make_link(\"3\"), name = \"3\", keepAlive = TRUE)   ) ) brochureApp(   basepath = config::get()$basepath,   # Pages   page_1(),   page_2(),   page_3(),   wrapped = <WRAPPER-FUNC>   # This list is passed to <WRAPPER-FUNC>   wrapped_options = list(     basepath = make_link(),     toolbar = <TOOLBAR>,     options = # Framework7 options see above #   ) )"},{"path":"/articles/multipages.html","id":"a-simple-multi-pages-app","dir":"Articles","previous_headings":"","what":"A simple multi pages app","title":"Multipages","text":"let’s build simple app. 3 pages, welcome page 2 pages. create navigation links follows f7Link() function allowing routable, wrapping make_link: Importantly, href must point right location passed routes options, previously described (/2 /3). first page function wrapped {brochure} page() function containing: ui component navbar, page content. href must / root page. may notice, place don’t need wrap href make_link. links wrapped within f7List() better styling options. second page follows layout. Notice pass local toolbar decided use global toolbar f7Multilayout() pages share toolbar. choice preference. cool new feature shinyMobile 2.0.0 ability pass tags f7Navbar() left parameter, make possible add back button link. Don’t forget back css class router transition looks correct: page contains f7Stepper() improved numeric input. Finally, ’ll find third page code global app code . main server function contains logic related widgets can find pages passed brochureApp() server parameter: Notice global app toolbar passed wrapper_options parameter, reason injected f7MultiLayout() wrapper. also pass basepath paramter f7MultiLayout wrapper function: can see, wasn’t tricky setup layout entire working example shown . Code","code":"links <- lapply(2:3, function(i) {   tags$li(     f7Link(       routable = TRUE,       label = sprintf(\"Link to page %s\", i),       href = make_link(sprintf(\"/%s\", i))     )   ) }) page_1 <- function() {   page(     href = \"/\",     ui = function(request) {       shiny::tags$div(         class = \"page\",         # top navbar goes here         f7Navbar(title = \"Home page\"),         tags$div(           class = \"page-content\",           f7List(             inset = TRUE,             strong = TRUE,             outline = TRUE,             dividers = TRUE,             mode = \"links\",             links           ),           f7Block(             f7Text(\"text\", \"Text input\", \"default\"),             f7Select(\"select\", \"Select\", colnames(mtcars)),             textOutput(\"res\"),             textOutput(\"res2\")           )         )       )     }   ) } page_2 <- function() {   page(     href = \"/2\",     ui = function(request) {       shiny::tags$div(         class = \"page\",         # top navbar goes here         f7Navbar(           title = \"Second page\",           # Allows to go back to main           leftPanel = tagList(             tags$a(               href = make_link(),               class = \"link back\",               tags$i(class = \"icon icon-back\"),               tags$span(                 class = \"if-not-md\",                 \"Back\"               )             )           )         ),         # NOTE: when the main toolbar is enabled in         # f7MultiLayout, we can't use individual page toolbars.         # f7Toolbar(         #  position = \"bottom\",         #  tags$a(         #    href = \"/\",         #    \"Main page\",         #    class = \"link\"         #  )         # ),         shiny::tags$div(           class = \"page-content\",           f7Block(f7Button(inputId = \"update\", label = \"Update stepper\")),           f7List(             strong = TRUE,             inset = TRUE,             outline = FALSE,             f7Stepper(               inputId = \"stepper\",               label = \"My stepper\",               min = 0,               max = 10,               size = \"small\",               value = 4,               wraps = TRUE,               autorepeat = TRUE,               rounded = FALSE,               raised = FALSE,               manual = FALSE             )           ),           f7Block(textOutput(\"test\"))         )       )     }   ) } server = function(input, output, session) {   output$res <- renderText(input$text)   output$res2 <- renderText(input$select)   output$test <- renderText(input$stepper)    observeEvent(input$update, {     updateF7Stepper(       inputId = \"stepper\",       value = 0.1,       step = 0.01,       size = \"large\",       min = 0,       max = 1,       wraps = FALSE,       autorepeat = FALSE,       rounded = TRUE,       raised = TRUE,       color = \"pink\",       manual = TRUE,       decimalPoint = 2     )   }) } wrapped_options = list(   basepath = make_link(),   # Common toolbar   toolbar = f7Toolbar(     f7Link(icon = f7Icon(\"house\"), href = make_link(), routable = TRUE)   ),   # Other options   ... ) library(shiny) # Needs a specific version of brochure for now. # This allows to pass wrapper functions with options # as list. We need it because of the f7Page options parameter # and to pass the routes list object for JS. # devtools::install_github(\"DivadNojnarg/brochure\") library(brochure) library(shinyMobile)  # Allows to use the app on a server like  # shinyapps.io where basepath is /app_name # instead of \"/\" or \"\". make_link <- function(path = NULL) {   if (is.null(path)) {     if (nchar(config::get()$basepath) > 0) {       return(config::get()$basepath)     } else {       return(\"/\")     }   }   sprintf(\"%s/%s\", config::get()$basepath, path) }  links <- lapply(2:3, function(i) {   tags$li(     f7Link(       routable = TRUE,       label = sprintf(\"Link to page %s\", i),       href = make_link(i)     )   ) })  page_1 <- function() {   page(     href = \"/\",     ui = function(request) {       shiny::tags$div(         class = \"page\",         # top navbar goes here         f7Navbar(title = \"Home page\"),         tags$div(           class = \"page-content\",           f7List(             inset = TRUE,             strong = TRUE,             outline = TRUE,             dividers = TRUE,             mode = \"links\",             links           ),           f7Block(             f7Text(\"text\", \"Text input\", \"default\"),             f7Select(\"select\", \"Select\", colnames(mtcars)),             textOutput(\"res\"),             textOutput(\"res2\")           )         )       )     }   ) }  page_2 <- function() {   page(     href = \"/2\",     ui = function(request) {       shiny::tags$div(         class = \"page\",         # top navbar goes here         f7Navbar(           title = \"Second page\",           # Allows to go back to main           leftPanel = tagList(             tags$a(               href = make_link(),               class = \"link back\",               tags$i(class = \"icon icon-back\"),               tags$span(                 class = \"if-not-md\",                 \"Back\"               )             )           )         ),         # NOTE: when the main toolbar is enabled in         # f7MultiLayout, we can't use individual page toolbars.         # f7Toolbar(         #  position = \"bottom\",         #  tags$a(         #    href = \"/\",         #    \"Main page\",         #    class = \"link\"         #  )         # ),         shiny::tags$div(           class = \"page-content\",           f7Block(f7Button(inputId = \"update\", label = \"Update stepper\")),           f7List(             strong = TRUE,             inset = TRUE,             outline = FALSE,             f7Stepper(               inputId = \"stepper\",               label = \"My stepper\",               min = 0,               max = 10,               size = \"small\",               value = 4,               wraps = TRUE,               autorepeat = TRUE,               rounded = FALSE,               raised = FALSE,               manual = FALSE             )           ),           f7Block(textOutput(\"test\"))         )       )     }   ) }  page_3 <- function() {   page(     href = \"/3\",     ui = function(request) {       shiny::tags$div(         class = \"page\",         # top navbar goes here         f7Navbar(           title = \"Third page\",           # Allows to go back to main           leftPanel = tagList(             tags$a(               href = make_link(),               class = \"link back\",               tags$i(class = \"icon icon-back\"),               tags$span(                 class = \"if-not-md\",                 \"Back\"               )             )           )         ),         # NOTE: when the main toolbar is enabled in         # f7MultiLayout, we can't use individual page toolbars.         # f7Toolbar(         #  position = \"bottom\",         #  tags$a(         #    href = \"/2\",         #    \"Second page\",         #    class = \"link\"         #  )         # ),         shiny::tags$div(           class = \"page-content\",           f7Block(\"Nothing to show yet ...\")         )       )     }   ) }  brochureApp(   basepath = make_link(),   # Pages   page_1(),   page_2(),   page_3(),   # Important: in theory brochure makes   # each page having its own shiny session/ server function.   # That's not what we want here so we'll have   # a global server function.   server = function(input, output, session) {     output$res <- renderText(input$text)     output$res2 <- renderText(input$select)     output$test <- renderText(input$stepper)      observeEvent(input$update, {       updateF7Stepper(         inputId = \"stepper\",         value = 0.1,         step = 0.01,         size = \"large\",         min = 0,         max = 1,         wraps = FALSE,         autorepeat = FALSE,         rounded = TRUE,         raised = TRUE,         color = \"pink\",         manual = TRUE,         decimalPoint = 2       )     })   },   wrapped = f7MultiLayout,   wrapped_options = list(     basepath = make_link(),     # Common toolbar     toolbar = f7Toolbar(       f7Link(icon = f7Icon(\"house\"), href = make_link(), routable = TRUE)     ),     options = list(       dark = TRUE,       theme = \"md\",       routes = list(         # Important: don't remove keepAlive         # for pages as this allows         # to save the input state when switching         # between pages. If FALSE, each time a page is         # changed, inputs are reset.         list(path = make_link(), url = make_link(), name = \"home\", keepAlive = TRUE),         list(path = make_link(\"2\"), url = make_link(\"2\"), name = \"2\", keepAlive = TRUE),         list(path = make_link(\"3\"), url = make_link(\"3\"), name = \"3\", keepAlive = TRUE)       )     )   ) )"},{"path":[]},{"path":"/articles/multipages.html","id":"with-shiny-modules","dir":"Articles","previous_headings":"Going further","what":"With shiny modules","title":"Multipages","text":"might find convenient assign Shiny module per page :","code":"page_ui <- function(id) {   ns <- shiny::NS(id)    tags$div(     class = \"page\",     f7Navbar(title = \"Navbar\"),     tags$div(       class = \"page-content\",       f7Block(         inset = TRUE,         strong = TRUE,         f7Text(ns(\"text\"), \"A text input\", \"Super text!\"),         textOutput(ns(\"res\"))       )     )   ) }  page_server <- function(id) {   moduleServer(     id,      function(input, output, session) {       output$res <- renderText(input$text)     }   ) }  my_page <- function() {   page(     href = \"/\",     ui = page_ui(\"page1\")   ) }  brochureApp(   basepath = config::get()$basepath,   my_page(),   server = function(input, output, session) {     # Call modules here     page_server(\"page1\")   },   wrapped = f7MultiLayout,   wrapped_options = list(     basepath = make_link(),     # Common toolbar     toolbar = f7Toolbar(       f7Link(icon = f7Icon(\"house\"), href = make_link(), routable = TRUE)     ),     options = list(       dark = TRUE,       theme = \"md\",       routes = list(         # Important: don't remove keepAlive         # for pages as this allows         # to save the input state when switching         # between pages. If FALSE, each time a page is         # changed, inputs are reset.         list(path = make_link(), url = make_link(), name = \"home\", keepAlive = TRUE)       )     )   ) )"},{"path":"/articles/multipages.html","id":"dynamic-routes","dir":"Articles","previous_headings":"Going further","what":"Dynamic routes","title":"Multipages","text":"dynamically create new routes? Since {brochure} stores pages ...pages environment, can add entries . following example, add /new page basic UI browse corresponding url. leverage session$sendCustomMessage send page href R JS Shiny.addCustomMessageHandler JS side pass window.open, _self option (meaning open window). translate shinyMobile? Let’s take simple app one page. define routes outside brochureApp, ’ll update options within server function. Initially, consider one route. clicking add button, add new page ...pages[[\"/new\"]]$ui, update global options account new route R side use updateF7Routes(options$routes) update router JS side navigation working:","code":"brochureApp(   # First page   tags$script(     \"$(function() {       $(document).on('shiny:connected', function() {         Shiny.addCustomMessageHandler('browse', function(m) {           window.open(window.location.href + m, '_self');         });       });     });\"   ),   page(     href = \"/\",     ui = fluidPage(       h1(\"This is my first page\"),       plotOutput(\"plot\"),       actionButton(\"add\", \"Add page\")     )   ),   # Second page, without any server-side function   page(     href = \"/page2\",     ui = fluidPage(       h1(\"This is my second page\"),       tags$p(\"There is no server function in this one\")     )   ),   server = function(input, output, session) {     output$plot <- renderPlot({       plot(iris)     })     observeEvent(input$add, {       if (!(\"/new\" %in% names(...pages))) {         ...pages[[\"/new\"]]$ui <- fluidPage(\"New dynamic page\")       }       session$sendCustomMessage(\"browse\", \"new\")     })   } ) options <- list(   dark = TRUE,   theme = \"md\",   routes = list(     list(path = \"/\", url = \"/\", name = \"home\", keepAlive = TRUE)   ) )  page_1 <- function() {   page(     href = \"/\",     ui = function(request) {       shiny::tags$div(         class = \"page\",         # top navbar goes here         f7Navbar(title = \"Home page\"),         tags$div(           class = \"page-content\",           f7Block(             f7Button(\"add\", \"Add new\")           ),           f7Block(             f7Link(\"New\", href = \"/new\", routable = TRUE)           )         )       )     }   ) }  brochureApp(   page_1(),   server = function(input, output, session) {     observeEvent(input$add, {       if (!(\"/new\" %in% names(...pages))) {         ...pages[[\"/new\"]]$ui <- shiny::tags$div(             class = \"page\",             # top navbar goes here             f7Navbar(               title = \"New page\",               # Allows to go back to main               leftPanel = tagList(                 tags$a(                   href = \"/\",                   class = \"link back\",                   tags$i(class = \"icon icon-back\"),                   tags$span(                     class = \"if-not-md\",                     \"Back\"                   )                 )               )             ),             tags$div(               class = \"page-content\",               f7Block(\"Nothing here\")             )           )         options$routes[[length(options$routes) + 1]] <- list(path = \"/new\", url = \"/new\", name = \"new\", keepAlive = TRUE)         updateF7Routes(options$routes)       }     })   },   wrapped = f7MultiLayout,   wrapped_options = list(     # Common toolbar     toolbar = f7Toolbar(       f7Link(icon = f7Icon(\"house\"), href = \"/\", routable = TRUE)     ),     options = options   ) )"},{"path":"/articles/pwa.html","id":"configuration","dir":"Articles","previous_headings":"","what":"Configuration","title":"Progressive Web App (PWA) support","text":"shinyMobile PWA capable, meaning can make sure app uses correct assets used PWA. feature automatically handled f7Page() allowPWA TRUE.  set TRUE, app set use service-worker.js script manifest.webmanifest file provide.  create necessary assets PWA, can use {charpente}: APP_PATH app location. Currently, works app inside package like {golem}. app package, may copy www folder gallery app, provides: valid service-worker.js. valid web manifest (manifest-webmanifest). Don’t forget change start_url property path app. bonus valid offline.html fallback, displayed app offline. valid set icons. tools appsco app-manifest, create custom icons splash screens, need . really easier {charpente}, reason strongly recommend develop app inside package.  ’s ’s needed! set allowPWA = TRUE f7Page(), app also attach Google PWA compatibility script, called PWACompat, help PWA compatibility. specifically, PWACompat brings Web App Manifest non-compliant browsers better PWAs. mostly means creating splash screens icons Mobile Safari, well supporting IE/Edge’s Pinned Sites feature. basically assures manifest.webmanifest file wider support.","code":"remotes::install_github(\"RinteRface/charpente\") library(charpente) set_pwa(APP_PATH, ...)"},{"path":"/articles/pwa.html","id":"using-your-pwa","dir":"Articles","previous_headings":"","what":"Using your PWA","title":"Progressive Web App (PWA) support","text":"first step deploy app somewhere. doesn’t matter (shinyapps.io, Posit Connect, server, etc.), need URL access .  , can follow steps install app mobile device. Copy URL app mobile web browser (iOS: Safari Andoid: Chrome). opens like classic web app, top bottom ugly navigation bars part browser UI. Select share button located bottom bar iPhone/iPad Android, may something similar. Importantly, Chrome iOS support feature, ’s recommend using Safari. Click “Add Home Screen” Choose relevant name click OK. app added iOS/Android Apps. case want custom icons, replace content www folder .","code":""},{"path":"/articles/pwa.html","id":"limitations","dir":"Articles","previous_headings":"","what":"Limitations","title":"Progressive Web App (PWA) support","text":"actually quite complex guarantee mobile platforms supported. PWA compatibility script work cases. , please open issue , help improving !","code":""},{"path":"/articles/reconnect.html","id":"custom-disconnected-screen","dir":"Articles","previous_headings":"","what":"Custom disconnected screen","title":"Disconnected, Reconnect and Reload","text":"Nobody likes app stops responding. Traditionally, Shiny apps “grayed ”. Since doesn’t provide nice user experience, shinyMobile adds custom disconnected screen. screen (toast) displayed app disconnected server. Code user given two options: either reconnect reload app. ’s subtle difference two, explained .","code":"library(shiny) library(shinyMobile)  shinyApp(   ui = f7Page(     options = list(dark = FALSE),     title = \"My app\",     f7SingleLayout(       navbar = f7Navbar(         title = \"Custom disconnected screen\",         hairline = FALSE       ),       f7List(         inset = TRUE,         dividers = FALSE,         strong = TRUE,         f7Text(           inputId = \"text\",           label = \"Text input\",           value = \"Some text\",           placeholder = \"Your text here\"         ),         f7Select(             inputId = \"select\",             label = \"Make a choice\",             choices = 1:3,             selected = 1           )       ),       f7Block(         f7Button(inputId = \"disconnect\",                  label = \"Disconnect me\")       ),       f7Block(         verbatimTextOutput(\"mytext\"),         verbatimTextOutput(\"myselect\")       )     )   ),   server = function(input, output) {     # set ignoreInit to avoid the observer being triggered after reconnect     # this happens because of restoring the app's state     observeEvent(input$disconnect, ignoreInit = TRUE, {       print(input$disconnect)       stop(\"Oops, I disconnected you!\")     })          output$mytext <- renderText({       input$text     })          output$myselect <- renderText({       input$select     })   } )"},{"path":"/articles/reconnect.html","id":"reconnect","dir":"Articles","previous_headings":"","what":"Reconnect","title":"Disconnected, Reconnect and Reload","text":"button attempt reconnect server. server available, encounters error , custom disconnected screen displayed .  reconnecting, Shiny attempts restore app previous state. means app state disconnection. code, means input$disconnect, input$text input$select restored previous values. user actually doesn’t see “restored”: looks like user never left. important realize behind scenes, Shiny starting initial state app sets back values inputs previous values. means observers reactive expressions triggered . code , ’re using ignoreInit avoid observer triggered reconnect. omit , end disconnected . , value input$disconnect changes 0 1 clicked.  Note JS code behind reconnect button ignores user reconnect setup proposes reconnecting regardless session$allowReconnect configuration. solution provided Outstanding User Interfaces Shiny book.","code":""},{"path":"/articles/reconnect.html","id":"reload","dir":"Articles","previous_headings":"","what":"Reload","title":"Disconnected, Reconnect and Reload","text":"custom disconnected screen also includes reload button. button reload app (like hitting refresh browser). useful app stuck loop reconnect button doesn’t work. Compared reconnecting, reloading start clean slate: ’s restoring values.  Note setting app PWA, ’s offline.html asset generated using charpente::set_pwa(). page displayed user offline. page contains reload button reload app. reconnecting.","code":""},{"path":"/articles/shinyMobile-tools.html","id":"tools-for-mobile-development","dir":"Articles","previous_headings":"","what":"Tools for mobile development","title":"shinyMobile Tools","text":"shinyMobile provides set tools specifically designed help develop user-friendly mobile applications leverage certain actions mobile phones. tools discuss : preview_mobile(): function preview app large range mobile devices pullToRefresh: feature refresh page content pulling top bottom Predefined input values get information device Shiny inputs","code":""},{"path":"/articles/shinyMobile-tools.html","id":"mobile-preview","dir":"Articles","previous_headings":"Tools for mobile development","what":"Mobile preview","title":"shinyMobile Tools","text":"Since V0.2.0, shinyMobile function preview app large range mobile devices: iPhone X, iPhone 8+, iPhone8, iPhone 5s, iPhone 4s, iPad, Samsung galaxy S5, Samsung galaxy Note 8, … either locally online: local preview 4 steps process: run preview_mobile() appPath Copy returned code R -e \"shiny::runApp('appPath', port = 3838)\" terminal launch app Press enter run wrapper app fun! preview_mobile() options color landscape (preview landscape mode).","code":"library(shiny) library(shinyMobile)  preview_mobile(appPath = system.file(\"examples/gallery/app.R\", package = \"shinyMobile\"), device = \"iphoneX\") # This also works with a remote app url hosted on shinyapps.io ..."},{"path":"/articles/shinyMobile-tools.html","id":"pull-to-refresh","dir":"Articles","previous_headings":"Tools for mobile development","what":"Pull to Refresh","title":"shinyMobile Tools","text":"shinyMobile introduces pull refresh feature. may used refresh page content pulling top bottom. feature disabled default passing pullToRefresh = TRUE f7Page() options activate . server side, input, namely input$ptr TRUE ptr refreshed becomes NULL end animation (may run app full screen mode hold left click mouse top bottom): Code","code":"library(shiny) library(shinyMobile)  shinyApp(   ui = f7Page(     title = \"My app\",     options = list(pullToRefresh = TRUE, dark = FALSE),     f7SingleLayout(       navbar = f7Navbar(         title = \"Pull to Refresh\",         hairline = FALSE       ),       toolbar = f7Toolbar(         position = \"bottom\",         f7Link(label = \"Link 1\", href = \"https://www.google.com\"),         f7Link(label = \"Link 2\", href = \"https://www.google.com\")       ),       # main content       f7List(         lapply(1:3, function(j) {           f7ListItem(             letters[j],             media = f7Icon(\"alarm_fill\"),             right = \"Right Text\",             header = \"Header\",             footer = \"Footer\"           )         })       )     )   ),   server = function(input, output, session) {     observe(print(input$ptr))          observeEvent(input$ptr, {       ptrStatus <- if (input$ptr) \"on\"       f7Dialog(         text = paste('ptr is', ptrStatus),         type = \"alert\"       )     })   } )"},{"path":"/articles/shinyMobile-tools.html","id":"predefined-input-values","dir":"Articles","previous_headings":"Tools for mobile development","what":"Predefined input values","title":"shinyMobile Tools","text":"shinyMobile contains functionality retrieve information device displaying app, last input used information running Shiny session. information helps set layout best possible.","code":""},{"path":"/articles/shinyMobile-tools.html","id":"information-about-your-current-device","dir":"Articles","previous_headings":"Tools for mobile development > Predefined input values","what":"Information about your current device","title":"shinyMobile Tools","text":"shinyMobile predefined input, namely input$deviceInfo. Code information related device running application. following information returned: input$deviceInfo$ios: TRUE iOS device input$deviceInfo$android: TRUE Android device input$deviceInfo$androidChrome: TRUE Android Chrome input$deviceInfo$desktop: TRUE desktop browser input$deviceInfo$iphone: TRUE iPhone input$deviceInfo$ipod: TRUE iPod input$deviceInfo$ipad: TRUE iPad input$deviceInfo$cordova: TRUE app running cordova environment input$deviceInfo$capacitor: TRUE app running capacitor environment input$deviceInfo$windows: TRUE desktop windows input$deviceInfo$macos: TRUE desktop macOS input$deviceInfo$ie: TRUE Internet Explorer browser input$deviceInfo$edge: TRUE MS Edge browser input$deviceInfo$firefox: TRUE FireFox browser input$deviceInfo$electron: TRUE app running Electron environment input$deviceInfo$nwjs: TRUE app running NW.js environment input$deviceInfo$webView: TRUE app runs web view - webapp installed home screen, valid desktop PWAs installed desktop input$deviceInfo$standalone: webView input$deviceInfo$os: Contains OS can ios, android, macos, windows input$deviceInfo$osVersion: Contains OS version, e.g. 11.2.0 input$deviceInfo$pixelRatio: Device pixel ratio example displays card app desktop: Code","code":"library(shiny) library(shinyMobile)  shinyApp(   ui = f7Page(     options = list(dark = FALSE),     title = \"My app\",     f7SingleLayout(       navbar = f7Navbar(         title = \"Access device info\",         hairline = FALSE       ),       # main content       verbatimTextOutput(\"info\")     )   ),   server = function(input, output) {     output$info <- renderPrint({       input$deviceInfo     })   } ) library(shiny) library(shinyMobile)  shinyApp(   ui = f7Page(     options = list(dark = FALSE),     title = \"My app\",     f7SingleLayout(       navbar = f7Navbar(         title = \"Access device info\",         hairline = FALSE       ),       # main content       uiOutput(\"card\"),       textOutput(\"userAgent\"),     )   ),   server = function(input, output) {          output$userAgent <- renderText(input$deviceInfo$desktop)          # generate a card only for desktop     output$card <- renderUI({       req(input$deviceInfo$desktop)       f7Card(         \"This is a simple card with plain text,         but cards can also contain their own header,         footer, list view, image, or any other element.\"       )     })   } )"},{"path":"/articles/shinyMobile-tools.html","id":"information-about-shiny-inputs","dir":"Articles","previous_headings":"Tools for mobile development > Predefined input values","what":"Information about Shiny inputs","title":"shinyMobile Tools","text":"shinyMobile input$lastInputChanged returns name, value type last changed input: Code convenient since usually, shortcut get last changed value needs done server side Shiny.","code":"library(shiny) library(shinyMobile)  shinyApp(   ui = f7Page(     options = list(dark = FALSE),     title = \"My app\",     f7SingleLayout(       navbar = f7Navbar(         title = \"Single Layout\",         hairline = FALSE       ),       toolbar = f7Toolbar(         position = \"bottom\",         f7Link(label = \"Link 1\", href = \"https://www.google.com\"),         f7Link(label = \"Link 2\", href = \"https://www.google.com\")       ),       # main content       f7Card(verbatimTextOutput(\"infos\")),       f7Card(         f7Text(inputId = \"text\", label = \"Text\"),         f7Slider(inputId = \"range1\", label = \"Range\", min = 0, max = 2, value = 1, step = 0.1),         f7Stepper(inputId = \"stepper1\", label = \"Stepper\", min = 0, max = 10, value = 5),         verbatimTextOutput(\"lastChanged\")       )     )   ),   server = function(input, output) {     output$infos <- renderPrint(input$shinyInfo)     output$lastChanged <- renderPrint(input$lastInputChanged)   } )"},{"path":"/articles/shinyMobile-tools.html","id":"other-information","dir":"Articles","previous_headings":"Tools for mobile development > Predefined input values","what":"Other information","title":"shinyMobile Tools","text":"input$shinyInfo gives current workerId (shinyapps.io, Shiny Server Pro, Posit Connect) unique sessionId (equal session$token server side).","code":""},{"path":"/articles/shinyMobile.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting Started","text":"shinyMobile built top Framework7 template (V8.3.3) different purposes: Develop mobile-ready Shiny applications Turn Shiny application progressive web app (PWA) goal developing mobile apps look feel like native apps.","code":""},{"path":"/articles/shinyMobile.html","id":"classic-web-apps-native-apps-and-pwas","dir":"Articles","previous_headings":"Introduction","what":"Classic web apps, native apps and PWAs","title":"Getting Started","text":"Classic web apps accessed via browser require internet connection. built HTML, CSS, JavaScript. cross-platform can accessed device browser, convenient. means work mobile device! shiny app also work perfectly fine mobile device. sounds nice, doesn’t give users wonderful experience: classic Shiny web app optimized mobile devices. name limitations:  ’s fullscreen option app always displayed browser surrounding browser UI consideration touch interfaces optimized small screens Can’t used offline  , native apps? Native apps built specific platform (iOS Android) installed device. developed platform-specific languages (Swift iOS, Kotlin Android) distributed via App Store, Google Play stores. Native apps fast responsive, can work offline. can also access device’s hardware software features (camera, GPS, etc.). However, expensive develop maintain: need know multiple languages maintain multiple codebases.  Luckily, middle ground: Progressive Web Apps (PWAs). PWAs web applications regular web pages websites, can appear user like traditional applications native mobile applications. combine best worlds: can installed device, provide offline features, can launched home screen, fullscreen display. just one codebase!  course, turning Shiny app PWA doesn’t get completely: also need UI components designed touch interfaces optimized small screens- something Framework7 provides. makes sense bring Framework7 PWA capabilities Shiny, ’s shinyMobile !","code":""},{"path":"/articles/shinyMobile.html","id":"themes","dir":"Articles","previous_headings":"Introduction","what":"Themes","title":"Getting Started","text":"shinyMobile offers 3 themes: ios md auto set auto, automatically detects app running Android (using Material Design, MD) iOS accordingly adapts layout. use MD theme devices. course possible apply iOS theme android device inversely, although recommended.  Besides themes, shinyMobile gives possibility choose light dark mode, can set app options ’ll come back later.","code":""},{"path":"/articles/shinyMobile.html","id":"layouts","dir":"Articles","previous_headings":"Introduction","what":"Layouts","title":"Getting Started","text":"shinyMobile brings 4 ---box layouts: f7SingleLayout(): develop simple apps (best choice iOS/android Apps). f7TabLayout(): develop complex multi-tabbed apps (best choice iOS/android Apps). f7SplitLayout(): tablets sidebar, navbar main panel f7MultiLayout(): layout consisting multiple pages allows beautiful transitions pages provide native like experience. layout experimental.","code":""},{"path":"/articles/shinyMobile.html","id":"ui-elements","dir":"Articles","previous_headings":"Introduction","what":"UI elements","title":"Getting Started","text":"50 core components, shinyMobile provides wide range UI elements build app. components designed mobile usage provide native app-like experience. include inputs, containers, buttons, lists, modals, popups, . ’ll pick highlight .","code":""},{"path":"/articles/shinyMobile.html","id":"inputs-brief-comparison-side-by-side-with-shiny","dir":"Articles","previous_headings":"Introduction > UI elements","what":"Inputs: brief comparison side by side with {shiny}","title":"Getting Started","text":"shinyMobile custom input widgets unique design theme (iOS/android). summarise known shiny inputs equivalent shinyMobile.","code":""},{"path":"/articles/shinyMobile.html","id":"containers","dir":"Articles","previous_headings":"Introduction > UI elements","what":"Containers","title":"Getting Started","text":"shinyMobile provides set containers organize content app, including: f7Accordion(): accordion container f7Block(): content block designed add extra formatting required spacing text content f7Card(): card container f7List(): list container f7Panel(): sidebar elements f7Popup(): popup window f7Sheet(): modal sheet f7Swiper(): swiper container (modern touch slider) f7Tab(): tab container, used combination f7Tabs()  containers, can organize content way makes sense app. Together layouts, can create wide variety app designs different purposes.","code":""},{"path":"/articles/shinyMobile.html","id":"notifications-progress","dir":"Articles","previous_headings":"Introduction > UI elements","what":"Notifications & progress","title":"Getting Started","text":"’s also set components available keep users informed: f7Dialog(): dialog window f7Notif(): notification f7Preloader(): preloader f7Progressbar(): progress bar f7Toast(): toast notification  components can used provide feedback user, ask input, display information. look feel components unique chosen theme (iOS/Android).","code":""},{"path":"/articles/shinyMobile.html","id":"gallery","dir":"Articles","previous_headings":"Introduction > UI elements","what":"Gallery","title":"Getting Started","text":"Curious see full-blown app built shinyMobile? Check demo gallery! can run gallery following code:","code":"f7Gallery()"},{"path":[]},{"path":"/articles/shinyMobile.html","id":"page","dir":"Articles","previous_headings":"Create your first App","what":"Page","title":"Getting Started","text":"Every shinyMobile app starts f7Page(). f7Page() accepts following shinyMobile layouts: f7SingleLayout(), f7TabLayout(), f7SplitLayout() experimental f7MultiLayout(), discuss Layouts section.  options sets app look feel, ’s plenty options choose , ’ll discuss .  allowPWA parameter allows add necessary PWA dependencies turn app PWA.","code":"f7Page(   ...,   options = list(...),   title = NULL,   allowPWA = FALSE )"},{"path":"/articles/shinyMobile.html","id":"app-options","dir":"Articles","previous_headings":"Create your first App","what":"App options","title":"Getting Started","text":"can customize global app behavior: default options set help f7DefaultOptions().  stated , may choose 3 themes (md, ios auto) support dark light mode. dark option supports 3 values: TRUE, FALSE \"auto\". case \"auto\", default, app automatically switch dark light mode based user’s system settings.  color options simply changes color elements buttons, panel triggers, tabs triggers, . Note behaviour different MD iOS themes: MD theme color gets “blended ” background, iOS theme color prominently visible elements. Another option get control colors app using filled. allows fill navbar toolbar chosen color enabled.  hideOnPageScroll allows hide/show navbar toolbar useful focus content. tapHold parameter ensure “long-press” feature activated. preloader useful case want display loading screen.  Framework7 many options can passed options parameter- ’re limited list .","code":"options <- list(   theme = c(\"auto\", \"ios\", \"md\"),   dark = TRUE,   skeletonsOnLoad = FALSE,   preloader = FALSE,   filled = FALSE,   color = \"#007aff\",   touch = list(     touchClicksDistanceThreshold = 5,     tapHold = TRUE,     tapHoldDelay = 750,     tapHoldPreventClicks = TRUE,     iosTouchRipple = FALSE,     mdTouchRipple = TRUE   ),   iosTranslucentBars = FALSE,   navbar = list(     iosCenterTitle = TRUE,     hideOnPageScroll = TRUE   ),   toolbar = list(     hideOnPageScroll = FALSE   ),   pullToRefresh = FALSE )"},{"path":"/articles/shinyMobile.html","id":"navbar","dir":"Articles","previous_headings":"Create your first App","what":"Navbar","title":"Getting Started","text":"dive different layouts, ’ll take look components necessary layout- starting navbar. navbar mandatory element shinyMobile layout. contains title, subtitle triggers (desired) right left panels (f7Panel()). complex apps, can even add sub-navbar f7SubNavbar(...), may contain element like f7Button() text. f7Navbar() exposes styling parameters hairline (subtle border), bigger (size navbar text) transparent(transparent navbar).","code":"f7Navbar(   ...,   subNavbar = NULL,   title = NULL,   hairline = TRUE,   bigger = FALSE,   transparent = FALSE,   leftPanel = FALSE,   rightPanel = FALSE )"},{"path":"/articles/shinyMobile.html","id":"toolbar","dir":"Articles","previous_headings":"Create your first App","what":"Toolbar","title":"Getting Started","text":"option decide embed f7SubNavbar() navbar, still like additional buttons text. toolbar right place add things like f7Button(), f7Link() f7Badge(). location controlled position parameter (either top bottom). Besides simply using \"top\" \"bottom\", can also use different positions iOS MD themes using: \"top-ios\", \"top-md\", \"bottom-ios\", \"bottom-md\".  hood, f7Tabs() custom f7Toolbar().","code":"f7Toolbar(   ...,   position = c(\"top\", \"bottom\"),   icons = FALSE,   scrollable = FALSE )"},{"path":"/articles/shinyMobile.html","id":"panels","dir":"Articles","previous_headings":"Create your first App","what":"Panels","title":"Getting Started","text":"Panels also called sidebars, f7Panel() corresponding function. f7Panel() can different behaviors controlled via effect argument: reveal makes body content move resize. cover covers body content. floating_ makes panel float body content. push pushes body content side.  resizable argument allows dynamically resize panel.  Note moment, option control width panel. stated previously f7SplitLayout(), f7Panel() may also considered sidebar. case, may include f7PanelMenu(). ’ll get details split layout dedicated section.","code":"f7Panel(   ...,   id = NULL,   title = NULL,   side = c(\"left\", \"right\"),   effect = c(\"reveal\", \"cover\", \"push\", \"floating\"),   resizable = FALSE )"},{"path":"/articles/shinyMobile.html","id":"layouts-1","dir":"Articles","previous_headings":"Create your first App","what":"Layouts","title":"Getting Started","text":"shinyMobile offers four layouts: f7SingleLayout() f7TabLayout() f7SplitLayout() f7MultiLayout() (experimental)  layout choice crucial developing app. depends complexity visualizations content. plan develop simple graph table, go f7SingleLayout() option. complex design, best f7TabLayout(). f7SplitLayout() specific tablets apps.","code":""},{"path":"/articles/shinyMobile.html","id":"single-layout","dir":"Articles","previous_headings":"Create your first App > Layouts","what":"Single Layout","title":"Getting Started","text":"f7SingleLayout() dedicated build simple, one-page apps gadgets. navbar mandatory, components toolbar optional f7SingleLayout(). app runs specific app options: Code","code":"f7SingleLayout(   ...,   navbar,   toolbar = NULL,   panels = NULL ) f7Page(   options = list(     dark = FALSE,     filled = FALSE,     theme = \"md\"   ),   ... ) library(shiny) library(shinyMobile) library(apexcharter) library(dplyr) library(ggplot2)  data(\"economics_long\") economics_long <- economics_long %>%   group_by(variable) %>%   slice((n() - 100):n())  shinyApp(   ui = f7Page(     options = list(dark = FALSE, filled = FALSE, theme = \"md\"),     title = \"My app\",     f7SingleLayout(       navbar = f7Navbar(title = \"Single Layout\"),       toolbar = f7Toolbar(         position = \"bottom\",         f7Link(label = \"Link 1\", href = \"https://www.google.com\"),         f7Link(label = \"Link 2\", href = \"https://www.google.com\")       ),       # main content       f7Card(         outline = TRUE,         raised = TRUE,         divider = TRUE,         title = \"Card header\",         apexchartOutput(\"areaChart\")       )     )   ),   server = function(input, output) {     output$areaChart <- renderApexchart({       apex(         data = economics_long,         type = \"area\",         mapping = aes(           x = date,           y = value01,           fill = variable         )       ) %>%         ax_yaxis(decimalsInFloat = 2) %>% # number of decimals to keep         ax_chart(stacked = TRUE) %>%         ax_yaxis(max = 4, tickAmount = 4)     })   } )"},{"path":"/articles/shinyMobile.html","id":"tab-layout","dir":"Articles","previous_headings":"Create your first App > Layouts","what":"Tab Layout","title":"Getting Started","text":"Choose layout develop complex multi-tabbed apps (best choice iOS/android Apps). … argument requires f7Tabs(..., id = NULL, swipeable = FALSE, animated = TRUE). id argument mandatory want exploit updateF7Tabs() function. f7Tabs() expect f7Tab(..., tabName, icon = NULL, active = FALSE) passed inside. app runs specific options: Code","code":"f7TabLayout(   ...,   navbar,   messagebar = NULL,   panels = NULL ) f7Page(   options = list(     dark = FALSE,     filled = FALSE,     theme = \"md\"   ),   ... ) library(shiny) library(shinyMobile) library(apexcharter)  poll <- data.frame(   answer = c(\"Yes\", \"No\"),   n = c(254, 238) )  shinyApp(   ui = f7Page(     options = list(dark = FALSE, filled = FALSE, theme = \"md\"),     title = \"My app\",     f7TabLayout(       panels = tagList(         f7Panel(           title = \"Left Panel\",           side = \"left\",           f7PanelMenu(             inset = TRUE,             outline = TRUE,             # Use items as tab navigation only             f7PanelItem(               tabName = \"tabset-Tab1\",               title = \"To Tab 1\",               icon = f7Icon(\"folder\"),               active = TRUE             ),             f7PanelItem(               tabName = \"tabset-Tab2\",               title = \"To Tab 2\",               icon = f7Icon(\"keyboard\")             ),             f7PanelItem(               tabName = \"tabset-Tab3\",               title = \"To Tab 3\",               icon = f7Icon(\"layers_alt\")             )           ),           effect = \"floating\"         ),         f7Panel(           title = \"Right Panel\",           side = \"right\",           f7Block(\"Blabla\"),           effect = \"floating\"         )       ),       navbar = f7Navbar(         title = \"Tabs Layout\",         hairline = TRUE,         leftPanel = TRUE,         rightPanel = TRUE       ),       f7Tabs(         animated = TRUE,         id = \"tabset\",         f7Tab(           title = \"Tab 1\",           tabName = \"Tab1\",           icon = f7Icon(\"folder\"),           active = TRUE,           f7Card(             outline = TRUE,             raised = TRUE,             divider = TRUE,             title = \"Card header\",             apexchartOutput(\"pie\")           )         ),         f7Tab(           title = \"Tab 2\",           tabName = \"Tab2\",           icon = f7Icon(\"keyboard\"),           f7Card(             outline = TRUE,             raised = TRUE,             divider = TRUE,             title = \"Card header\",             apexchartOutput(\"scatter\")           )         ),         f7Tab(           title = \"Tab 3\",           tabName = \"Tab3\",           icon = f7Icon(\"layers_alt\"),           f7Card(             outline = TRUE,             raised = TRUE,             divider = TRUE,             title = \"Card header\",             f7SmartSelect(               \"variable\",               \"Variables to show:\",               c(                 \"Cylinders\" = \"cyl\",                 \"Transmission\" = \"am\",                 \"Gears\" = \"gear\"               ),               openIn = \"sheet\",               multiple = TRUE             ),             tableOutput(\"data\")           )         )       )     )   ),   server = function(input, output, session) {     # river plot     dates <- reactive(seq.Date(Sys.Date() - 30, Sys.Date(), by = input$by))      output$pie <- renderApexchart({       apex(         data = poll,         type = \"pie\",         mapping = aes(x = answer, y = n)       )     })      output$scatter <- renderApexchart({       apex(         data = mtcars,         type = \"scatter\",         mapping = aes(           x = wt,           y = mpg,           fill = cyl         )       )     })      # datatable     output$data <- renderTable(       {         mtcars[, c(\"mpg\", input$variable), drop = FALSE]       },       rownames = TRUE     )   } )"},{"path":"/articles/shinyMobile.html","id":"split-layout","dir":"Articles","previous_headings":"Create your first App > Layouts","what":"Split Layout","title":"Getting Started","text":"f7SplitLayout() third layout introduced shinyMobile, similar sidebarLayout {shiny}. template focused tablet use. composed sidebar, main panel. main content goes … parameter. Navigation items gathered sidebar slot. sidebar visible certain visibleBreakpoint. default set 1024, meaning sidebar collapsed onscreen smaller 1024px. means don’t worry split layout opened smaller mobile phone.  sidebar composed f7Panel() f7PanelMenu() one f7PanelItem(): Two important notes: forget allow leftPanel navbar f7Navbar(leftPanel = TRUE)! f7Panel() side set left.  id argument f7PanelMenu() important want get currently selected item update select tab. f7PanelItem() mandatory tabName. associated input input$menu example, tab1 value since first tab set active state. adequately link body sidebar, must wrap body content f7Items() containing many f7Item() sidebar items. tabName must correspond. Code","code":"f7SplitLayout(   ...,   navbar,   sidebar,   toolbar = NULL,   panels = NULL ) f7Panel(   title = \"Sidebar\",   side = \"left\",   effect = \"push\",   options = list(     visibleBreakpoint = 1024   ),   f7PanelMenu(     id = \"menu\",     f7PanelItem(       tabName = \"tab1\",       title = \"Tab 1\",       icon = f7Icon(\"email\"),       active = TRUE     ),     f7PanelItem(       tabName = \"tab2\",       title = \"Tab 2\",       icon = f7Icon(\"home\")     )   ) ) library(shiny) library(ggplot2) library(shinyMobile) library(apexcharter) library(thematic)  fruits <- data.frame(   name = c(\"Apples\", \"Oranges\", \"Bananas\", \"Berries\"),   value = c(44, 55, 67, 83) )  thematic_shiny(font = \"auto\")  new_mtcars <- reshape(   data = head(mtcars),   idvar = \"model\",   varying = list(c(\"drat\", \"wt\")),   times = c(\"drat\", \"wt\"),   direction = \"long\",   v.names = \"value\",   drop = c(\"mpg\", \"cyl\", \"hp\", \"dist\", \"qsec\", \"vs\", \"am\", \"gear\", \"carb\") )  shinyApp(   ui = f7Page(     title = \"Split layout\",     f7SplitLayout(       sidebar = f7Panel(         title = \"Sidebar\",         side = \"left\",         effect = \"push\",         options = list(           visibleBreakpoint = 700         ),         f7PanelMenu(           id = \"menu\",           strong = TRUE,           f7PanelItem(             tabName = \"tab1\",             title = \"Tab 1\",             icon = f7Icon(\"equal_circle\"),             active = TRUE           ),           f7PanelItem(             tabName = \"tab2\",             title = \"Tab 2\",             icon = f7Icon(\"equal_circle\")           ),           f7PanelItem(             tabName = \"tab3\",             title = \"Tab 3\",             icon = f7Icon(\"equal_circle\")           )         ),         uiOutput(\"selected_tab\")       ),       navbar = f7Navbar(         title = \"Split Layout\",         hairline = FALSE,         leftPanel = TRUE       ),       toolbar = f7Toolbar(         position = \"bottom\",         f7Link(label = \"Link 1\", href = \"https://www.google.com\"),         f7Link(label = \"Link 2\", href = \"https://www.google.com\")       ),       # main content       f7Items(         f7Item(           tabName = \"tab1\",           f7Button(\"toggleSheet\", \"Plot parameters\"),           f7Sheet(             id = \"sheet1\",             label = \"Plot Parameters\",             orientation = \"bottom\",             swipeToClose = TRUE,             backdrop = TRUE,             f7Slider(               \"obs\",               \"Number of observations:\",               min = 0, max = 1000,               value = 500             )           ),           br(),           plotOutput(\"distPlot\")         ),         f7Item(           tabName = \"tab2\",           apexchartOutput(\"radar\")         ),         f7Item(           tabName = \"tab3\",           f7Toggle(             inputId = \"plot_show\",             label = \"Show Plot?\",             checked = TRUE           ),           apexchartOutput(\"multi_radial\")         )       )     )   ),   server = function(input, output, session) {     observeEvent(input$toggleSheet, {       updateF7Sheet(id = \"sheet1\")     })      observeEvent(input$obs, {       if (input$obs < 500) {         f7Notif(           text = paste0(             \"The slider value is only \", input$obs, \". Please             increase it\"           ),           icon = f7Icon(\"bolt_fill\"),           title = \"Alert\",           titleRightText = Sys.Date()         )       }     })      output$radar <- renderApexchart({       apex(         data = new_mtcars,         type = \"radar\",         mapping = aes(           x = model,           y = value,           group = time         )       )     })      output$selected_tab <- renderUI({       HTML(paste0(\"Currently selected tab: \", strong(input$menu)))     })      output$distPlot <- renderPlot({       dist <- rnorm(input$obs)       hist(dist)     })      output$multi_radial <- renderApexchart({       if (input$plot_show) {         apex(data = fruits, type = \"radialBar\", mapping = aes(x = name, y = value))       }     })   } )"},{"path":"/articles/shinyMobile.html","id":"multi-layout","dir":"Articles","previous_headings":"Create your first App > Layouts","what":"Multi Layout","title":"Getting Started","text":"layout multiple pages covered separate article.","code":""},{"path":"/articles/shinyMobile.html","id":"gadgets","dir":"Articles","previous_headings":"","what":"Gadgets","title":"Getting Started","text":"shinyMobile particularly well suited build shiny gadgets. Gadgets small, interactive tools can used part data analysis workflow R.  convert existing app gadget, wrap shiny::runGadget() function.","code":"library(shiny) library(shinyMobile) runGadget(shinyAppDir(system.file(\"examples/tab_layout\", package = \"shinyMobile\")))"},{"path":"/articles/update-app.html","id":"update-app-configuration-and-theme-at-runtime","dir":"Articles","previous_headings":"","what":"Update app configuration and theme at runtime","title":"Dynamic App Configuration","text":"Sometimes, want update configuration app runtime. Think changing global configuration one multiple components updating theme app.  shinyMobile, two functions can update (parts ) app: updateF7App(): injecting configuration inside current running instance, including theme, dark, color. updateF7Entity(): update subset Framework7 instances server.","code":""},{"path":"/articles/update-app.html","id":"updating-theme-dark-mode-and-color","dir":"Articles","previous_headings":"Update app configuration and theme at runtime","what":"Updating theme, dark mode and color","title":"Dynamic App Configuration","text":"essence, updateF7App() pretty simple function: takes list options passes running app instance. following example shows update theme, dark mode, color theme app: Code Note color can color getF7Colors() (like “primary”, “pink” “teal”) hexadecimal color representing colors. can call updateF7App multiple times, app update given configuration settings accordingly.","code":"updateF7App(   options = list(     theme = \"md\",     dark = TRUE,     color = \"#007aff\"     # any other options     # ...   ) ) library(shiny) library(shinyMobile)  colors <- c(   lightblue = \"#5ac8fa\",   pink = \"#ff2d55\",   teal = \"#009688\",   yellow = \"#ffcc00\" )  shinyApp(   ui = f7Page(     title = \"Update App\",     options = (       list(         color = \"#5ac8fa\"       )     ),     f7SingleLayout(       navbar = f7Navbar(title = \"Update App\"),       f7BlockTitle(\"Update theme\"),       f7Segment(         f7Button(           inputId = \"theme_ios\",           \"iOS theme\"         ),         f7Button(           inputId = \"theme_md\",           \"MD theme\"         )       ),       f7BlockTitle(\"Set dark mode\"),       f7Segment(         f7Button(           inputId = \"enable_darkmode\",           \"Enable darkmode\"         ),         f7Button(           inputId = \"disable_darkmode\",           \"Disable darkmode\"         )       ),       f7BlockTitle(\"Change color theme\"),       f7Segment(         tagList(           lapply(names(colors),                  function(color) {                    f7Button(                      inputId = paste0(\"color_\", color),                      label = color,                      color = color,                    )                  }           )         )       )     )   ),   server = function(input, output, session) {      observeEvent(input$theme_ios, {       updateF7App(         options = list(           theme = \"ios\"         )       )     })      observeEvent(input$theme_md, {       updateF7App(         options = list(           theme = \"md\"         )       )     })      observeEvent(input$enable_darkmode, {       updateF7App(         options = list(           dark = TRUE         )       )     })      observeEvent(input$disable_darkmode, {       updateF7App(         options = list(           dark = FALSE         )       )     })      lapply(names(colors), function(color) {       observeEvent(input[[paste0(\"color_\", color)]], {         updateF7App(           options = list(             color = colors[color]           )         )       })     })    } )"},{"path":"/articles/update-app.html","id":"updating-component-configuration","dir":"Articles","previous_headings":"Update app configuration and theme at runtime","what":"Updating component configuration","title":"Dynamic App Configuration","text":"Besides updating theme, dark mode, color, can also update configuration specific type component. example, can update configuration f7Dialog() components app: code update text shown dialog buttons. app, three f7Dialog()s updated “Update config” button clicked: Code many components can updated way. example: f7Card(): update card configuration f7Dialog(): update dialog configuration, like examples f7Panel(): update (part ) panel configuration f7PhotoBrowser(): update (part ) photo browser configuration f7Swipeout(): update swipeout configuration f7Toolbar(): update toolbar configuration  Basically, whenever component Framework7 documentation contains section “global app parameters”, can update parameters using updateF7App.","code":"updateF7App(   options = list(     dialog = list(       buttonOk = \"Yeaaaah!\",       buttonCancel = \"Ouuups!\"     )   ) ) library(shiny) library(shinyMobile)  shinyApp(   ui = f7Page(     title = \"Update App\",     f7SingleLayout(       navbar = f7Navbar(title = \"Update App\"),       f7BlockTitle(\"Update f7Dialog configuration\"),       f7Segment(         f7Button(           inputId = \"goButton\",           \"Show f7Dialog 1\"         ),         f7Button(           inputId = \"goButton2\",           \"Show f7Dialog 2\"         ),         f7Button(           inputId = \"update\",           \"Update config\"         )       ),     )   ),   server = function(input, output, session) {     observeEvent(input$goButton, {       f7Dialog(         id = \"dialog1\",         title = \"Dialog title\",         text = \"This is a confirm dialog\",         type = \"confirm\"       )     })          observeEvent(input$goButton2, {       f7Dialog(         title = \"Another dialog title\",         text = \"This is an alert\"       )     })      observeEvent(input$update, {       updateF7App(         options = list(           dialog = list(             buttonOk = \"Yeaaaah!\",             buttonCancel = \"Ouuups!\"           )         )       )              f7Dialog(         id = \"dialog2\",         title = \"Warning\",         type = \"confirm\",         text = \"Look at me, I have a new buttons!\"       )                  })        } )"},{"path":"/articles/update-app.html","id":"update-individual-components-at-runtime","dir":"Articles","previous_headings":"","what":"Update individual components at runtime","title":"Dynamic App Configuration","text":"’re looking update entire app particular group components, rather specific component, can use updateF7Entity. function allows update subset Framework7 instances server: components can updated way : f7ActionSheet() f7Gauge() f7ListIndex() f7PhotoBrowser() f7Popup() f7Searchbar() f7Swiper()  still specific update functions components (like updateF7ActionSheet() updateF7Gauge()), aim updateF7Entity() provide general way update without calling specific update function.  examples use updateF7Entity().","code":"updateF7Entity(   id = \"idtoupdate\",     options = list(       # your configuration here     ) )"},{"path":"/articles/update-app.html","id":"action-sheet","dir":"Articles","previous_headings":"Update individual components at runtime","what":"Action Sheet","title":"Dynamic App Configuration","text":"update (reset) content f7ActionSheet() like : Code example, update content buttons f7ActionSheet() id action1. way, can update component runtime.  similar result can achieved updateF7ActionSheet().","code":"library(shiny) library(shinyMobile)  shinyApp(   ui = f7Page(     title = \"Update Entity\",     f7SingleLayout(       navbar = f7Navbar(title = \"Update action sheet instance\"),       f7Segment(         f7Button(           inputId = \"goButton\",           label = \"Go!\"         ),         f7Button(           inputId = \"update\",           label = \"Update config\"         ),         f7Button(           inputId = \"reset\",           label = \"Reset\"         )       )     )   ),   server = function(input, output, session) {     observeEvent(input$goButton, {       f7ActionSheet(         grid = TRUE,         id = \"action1\",         buttons = list(           list(             text = \"Notification\",             icon = f7Icon(\"info\"),             color = NULL           ),           list(             text = \"Dialog\",             icon = f7Icon(\"lightbulb_fill\"),             color = NULL           )         )       )     })      observeEvent(input$update, {       updateF7Entity(         id = \"action1\",         options = list(           buttons = list(             list(               text = \"Notification\",               icon = f7Icon(\"info\"),               color = NULL             )           )         )       )     })      observeEvent(input$reset, {       updateF7Entity(         id = \"action1\",         options = list(           buttons = list(             list(               text = \"Notification\",               icon = f7Icon(\"info\"),               color = NULL             ),             list(               text = \"Dialog\",               icon = f7Icon(\"lightbulb_fill\"),               color = NULL             )           )         )       )     })   } )"},{"path":"/articles/update-app.html","id":"gauge","dir":"Articles","previous_headings":"Update individual components at runtime","what":"Gauge","title":"Dynamic App Configuration","text":"Changing value gauge common task perfectly possible updateF7Entity(): Code similar result can achieved updateF7Gauge().","code":"library(shiny) library(shinyMobile)  shinyApp(   ui = f7Page(     title = \"Gauges\",     f7SingleLayout(       navbar = f7Navbar(title = \"f7Gauge\"),       f7Segment(         f7Button(           inputId = \"update\",           label = \"Update Gauge\"           ),         f7Button(           inputId = \"reset\",           label = \"Reset\"           )       ),       f7Block(         f7Gauge(           id = \"mygauge\",           type = \"semicircle\",           value = 50,           borderColor = \"#2196f3\",           borderWidth = 10,           valueFontSize = 41,           valueTextColor = \"#2196f3\",           labelText = \"amount of something\"         )       )     )   ),   server = function(input, output, session) {     observeEvent(input$update, {       new_val <- 75       updateF7Entity(         id = \"mygauge\",         options = list(           # Must be between 0 and 1           value = new_val / 100,            valueText = paste0(new_val, \"%\"),           labelText = \"New label!\"         )       )     })          observeEvent(input$reset, {       updateF7Entity(         id = \"mygauge\",         options = list(           value = 50 / 100,           valueText = \"50%\",           labelText = \"amount of something\"         )       )     })   } )"},{"path":"/articles/update-app.html","id":"list-index","dir":"Articles","previous_headings":"Update individual components at runtime","what":"List Index","title":"Dynamic App Configuration","text":"f7ListIndex() component limited configuration options. default options make sense particular component. , update label (bubble selected index swipe list index) f7ListIndex() component like : Code","code":"library(shiny) library(shinyMobile)  shinyApp(   ui = f7Page(     title = \"My app\",     f7SingleLayout(       navbar = f7Navbar(title = \"f7List\"),       f7Segment(         f7Button(           inputId = \"update\",           label = \"Update\"         ),         f7Button(           inputId = \"reset\",           label = \"Reset\"         )       ),       f7List(             id = \"mycontacts\",             mode = \"contacts\",             lapply(1:3, function(i) {               f7ListGroup(                 title = LETTERS[i],                 lapply(1:10, function(j) f7ListItem(letters[j]))               )             })           )     )   ),   server = function(input, output, session) {     f7ListIndex(id = \"contacts\",                  target = \"#mycontacts\",                  label = TRUE)          observeEvent(input$update, {       updateF7Entity(         \"contacts\",         options = list(           label = FALSE         )       )     })          observeEvent(input$reset, {       updateF7Entity(         \"contacts\",         options = list(           label = TRUE         )       )     })        } )"},{"path":"/articles/update-app.html","id":"photo-browser","dir":"Articles","previous_headings":"Update individual components at runtime","what":"Photo Browser","title":"Dynamic App Configuration","text":"Using updateF7Entity(), can update photos displayed photo browser configuration: Code","code":"library(shiny) library(shinyMobile)  shinyApp(   ui = f7Page(     title = \"f7PhotoBrowser\",     f7SingleLayout(       navbar = f7Navbar(title = \"f7PhotoBrowser\"),       f7Segment(         f7Button(           inputId = \"togglePhoto\",           label = \"Open photo\"         ),         f7Button(           inputId = \"update\",           label = \"Update\"         )       )     )   ),   server = function(input, output, session) {     observeEvent(input$togglePhoto, {       f7PhotoBrowser(         id = \"photobrowser1\",         theme = \"dark\",         type = \"page\",         photos = list(           list(url = \"https://cdn.framework7.io/placeholder/sports-1024x1024-1.jpg\"),           list(url = \"https://cdn.framework7.io/placeholder/sports-1024x1024-2.jpg\"),           list(url = \"https://cdn.framework7.io/placeholder/sports-1024x1024-3.jpg\",                caption = \"Me cycling\")         ),         thumbs = c(           \"https://cdn.framework7.io/placeholder/sports-1024x1024-1.jpg\",           \"https://cdn.framework7.io/placeholder/sports-1024x1024-2.jpg\",           \"https://cdn.framework7.io/placeholder/sports-1024x1024-3.jpg\"         )       )     })      observeEvent(input$update, {       updateF7Entity(         \"photobrowser1\",         options = list(           type = \"popup\",           popupPush = TRUE,           toolbar = FALSE,           photos = list(           list(url = \"https://cdn.framework7.io/placeholder/sports-1024x1024-1.jpg\")           ),           thumbs = list(\"https://cdn.framework7.io/placeholder/sports-1024x1024-1.jpg\")         )       )     })   } )"},{"path":"/articles/update-app.html","id":"popup","dir":"Articles","previous_headings":"Update individual components at runtime","what":"Popup","title":"Dynamic App Configuration","text":"f7Popup() component, need bit code make updates. Within updateF7Entity(), need provide necessary HTML popup content: Code","code":"library(shiny) library(shinyMobile)  shinyApp(   ui = f7Page(     title = \"Popup\",     f7SingleLayout(       navbar = f7Navbar(         title = \"f7Popup\"       ),       f7Segment(         f7Button(           inputId = \"toggle\",            label = \"Toggle Popup\"         ),         f7Button(           inputId = \"update\",            label = \"Update Popup\")       )     )   ),   server = function(input, output, session) {     output$res <- renderPrint(input$text)          observeEvent(input$toggle, {       f7Popup(         id = \"popup\",         title = \"My first popup\",         f7Text(           \"text\", \"Popup content\",           \"This is my first popup ever, I swear!\"         ),         verbatimTextOutput(\"res\")       )     })          observeEvent(input$update, {       updateF7Entity(         id = \"popup\",         options = list(           swipeToClose = TRUE,           animate = FALSE,           closeOnEscape = TRUE,           # Content must contain the popup           # layout!!!           content = '<div class=\"popup\">             <div class=\"view\">               <div class=\"page\">                 <div class=\"navbar\">                   <div class=\"navbar-bg\"><\/div>                   <div class=\"navbar-inner\">                     <div class=\"title\">Popup<\/div>                     <div class=\"right\">                       <!-- Link to close popup -->                       <a class=\"link popup-close\">Close<\/a>                     <\/div>                   <\/div>                 <\/div>                 <div class=\"page-content\">                   <div class=\"block\">New content ...<\/div>                 <\/div>               <\/div>             <\/div>           <\/div>'         )       )     })   } )"},{"path":"/articles/update-app.html","id":"searchbar","dir":"Articles","previous_headings":"Update individual components at runtime","what":"Searchbar","title":"Dynamic App Configuration","text":"Searchbar, can disable button: “Cancel” (“Back”) button deactivate Searchbar, reset search results clear search field. example button excluded options(list(disableButton = FALSE)) update clicked: Code","code":"library(shiny) library(shinyMobile)  cities <- names(precip)  shinyApp(   ui = f7Page(     title = \"Expandable searchbar\",     f7SingleLayout(       navbar = f7Navbar(         title = \"f7Searchbar with trigger\",         subNavbar = f7SubNavbar(           f7Searchbar(             id = \"search1\",              expandable = TRUE           )         )       ),       f7Segment(         f7Button(           inputId = \"update\",           label = \"Update\"         ),         f7Button(           inputId = \"reset\",           label = \"Reset\"         )       ),       f7Block(         f7SearchbarTrigger(targetId = \"search1\")       ) %>% f7HideOnSearch(),       f7List(         lapply(seq_along(cities), function(i) {           f7ListItem(cities[i])         })       ) %>% f7Found(),       f7Block(         p(\"Nothing found\")       ) %>% f7NotFound()     )   ),   server = function(input, output) {     observeEvent(input$update, {       updateF7Entity(         id = \"search1\",         options = list(           disableButton = FALSE         )       )     })          observeEvent(input$reset, {       updateF7Entity(         id = \"search1\",         options = list(           disableButton = TRUE         )       )     })   } )"},{"path":"/articles/update-app.html","id":"swiper","dir":"Articles","previous_headings":"Update individual components at runtime","what":"Swiper","title":"Dynamic App Configuration","text":"many options customize f7Swiper() component. Note desktop need click hold swipe: Code","code":"library(shiny) library(shinyMobile)  shinyApp(   ui = f7Page(     title = \"Swiper\",     f7SingleLayout(       navbar = f7Navbar(title = \"f7Swiper\"),       f7Segment(         f7Button(           inputId = \"update\",           label = \"Update\"         ),         f7Button(           inputId = \"reset\",           label = \"Reset\"         )       ),       f7Swiper(         id = \"swiper\",         options = list(           navigation = list(             enabled = FALSE           ),           pagination = list(             enabled = TRUE,             el = \".swiper-pagination\",              clickable = TRUE           )         ),         lapply(1:20, function(c) {           f7Slide(             f7Card(               title = sprintf(\"Slide %s\", c)             )           )         })       )     )   ),   server = function(input, output) {     observeEvent(input$update, {       updateF7Entity(         \"swiper\",         options = list(           speed = 100,           slidesPerView = 2,           spaceBetween = 10,           autoplay = TRUE,           scrollbar = list(             enabled = FALSE           ),           pagination = list(             type = \"progressbar\",             enabled = TRUE           ),           grid = list(             fill = \"columns\",             rows = 4           )         )       )     })          observeEvent(input$reset, {       updateF7Entity(         \"swiper\",         options = list(           speed = 400,           slidesPerView = \"auto\",           spaceBetween = 50,           autoplay = FALSE,           scrollbar = list(             enabled = TRUE           ),           pagination = list(             type = \"bullets\",             enabled = TRUE           ),           grid = list(             fill = \"column\",             rows = 1           )         )       )     })   } )"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"David Granjon. Author, maintainer. Veerle van Leemput. Author. AthlyticZ. Funder. Victor Perrier. Author. John Coene. Contributor. Isabelle Rudolf. Author. Dieter Menne. Contributor. Marvelapp. Contributor, copyright holder.           device.css wrappers Vladimir Kharlampidi. Contributor, copyright holder.           Framework7 HTML template","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Granjon D, van Leemput V, Perrier V, Rudolf (2025). shinyMobile: Mobile Ready 'shiny' Apps Standalone Capabilities. R package version 2.0.1, https://rinterface.github.io/shinyMobile/, https://github.com/RinteRface/shinyMobile.","code":"@Manual{,   title = {shinyMobile: Mobile Ready 'shiny' Apps with Standalone Capabilities},   author = {David Granjon and Veerle {van Leemput} and Victor Perrier and Isabelle Rudolf},   year = {2025},   note = {R package version 2.0.1, https://rinterface.github.io/shinyMobile/},   url = {https://github.com/RinteRface/shinyMobile}, }"},{"path":"/index.html","id":"shinymobile-","dir":"","previous_headings":"","what":"Mobile Ready shiny Apps with Standalone Capabilities","title":"Mobile Ready shiny Apps with Standalone Capabilities","text":"Develop outstanding {shiny} apps iOS Android, well beautiful {shiny} gadgets. {shinyMobile} built top latest Framework7 template.","code":""},{"path":"/index.html","id":"sandbox","dir":"","previous_headings":"","what":"Sandbox","title":"Mobile Ready shiny Apps with Standalone Capabilities","text":"best way discover {shinyMobile} play . sandbox can test :","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Mobile Ready shiny Apps with Standalone Capabilities","text":"can install {shinyMobile} usual ways:","code":"# from CRAN install.packages(\"shinyMobile\")  # for the latest version devtools::install_github(\"RinteRface/shinyMobile\")"},{"path":"/index.html","id":"demo","dir":"","previous_headings":"","what":"Demo","title":"Mobile Ready shiny Apps with Standalone Capabilities","text":"{shinyMobile} knows three themes: ios: iOS md: Android auto: either iOS Android, depending device","code":""},{"path":"/index.html","id":"android","dir":"","previous_headings":"Demo","what":"Android","title":"Mobile Ready shiny Apps with Standalone Capabilities","text":"Using md theme:","code":""},{"path":"/index.html","id":"ios","dir":"","previous_headings":"Demo","what":"iOS","title":"Mobile Ready shiny Apps with Standalone Capabilities","text":"Using ios theme:","code":""},{"path":"/index.html","id":"sponsors","dir":"","previous_headings":"","what":"Sponsors","title":"Mobile Ready shiny Apps with Standalone Capabilities","text":"shinyMobile supported/funded AthlyticZ.  AthlyticZ offers top notch Shiny courses developed Veerle van Leemput: ProductioniZing Shiny Applications CustomiZing WidgetZ come …","code":""},{"path":"/index.html","id":"acknowledgement","dir":"","previous_headings":"","what":"Acknowledgement","title":"Mobile Ready shiny Apps with Standalone Capabilities","text":"special thanks Vladimir Kharlampidi creating amazing Framework7 HTML template.","code":""},{"path":"/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Mobile Ready shiny Apps with Standalone Capabilities","text":"Please note shinyMobile project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"/reference/accordion.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 accordion container — f7Accordion","title":"Framework7 accordion container — f7Accordion","text":"f7Accordion creates interactive accordion container. f7AccordionItem inserted f7Accordion. updateF7Accordion toggles f7Accordion client.","code":""},{"path":"/reference/accordion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 accordion container — f7Accordion","text":"","code":"f7Accordion(   ...,   id = NULL,   multiCollapse = deprecated(),   side = c(\"right\", \"left\") )  f7AccordionItem(..., title = NULL, open = FALSE)  updateF7Accordion(   id,   selected = NULL,   session = shiny::getDefaultReactiveDomain() )"},{"path":"/reference/accordion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 accordion container — f7Accordion","text":"... Item content f7Block f7 element. id Accordion instance. multiCollapse : removed Framework7. side Accordion collapse toggle side. Default right. title Item title. open Whether item open start. FALSE default. selected Index item select. session Shiny session object","code":""},{"path":"/reference/accordion.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Framework7 accordion container — f7Accordion","text":"David Granjon, dgranjon@ymail.com","code":""},{"path":"/reference/accordion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 accordion container — f7Accordion","text":"","code":"library(shiny) library(shinyMobile)  app <- shinyApp(   ui = f7Page(     title = \"Accordions\",     f7SingleLayout(       navbar = f7Navbar(\"Accordions\"),       f7Segment(f7Button(inputId = \"go\", \"Go\")),       f7Accordion(         id = \"myaccordion1\",         f7AccordionItem(           title = \"Item 1\",           f7Block(\"Item 1 content\"),           open = TRUE         ),         f7AccordionItem(           title = \"Item 2\",           f7Block(\"Item 2 content\")         )       )     )   ),   server = function(input, output, session) {     observeEvent(input$go, {       updateF7Accordion(id = \"myaccordion1\", selected = 2)     })   } )  if (interactive() || identical(Sys.getenv(\"TESTTHAT\"), \"true\")) app"},{"path":"/reference/actionsheet.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 action sheet — f7ActionSheet","title":"Framework7 action sheet — f7ActionSheet","text":"f7ActionSheet creates action sheet may contain multiple buttons. triggers action server side. may updated later updateF7ActionSheet. updateF7ActionSheet updates f7ActionSheet server.","code":""},{"path":"/reference/actionsheet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 action sheet — f7ActionSheet","text":"","code":"f7ActionSheet(   id,   buttons,   grid = FALSE,   ...,   session = shiny::getDefaultReactiveDomain() )  updateF7ActionSheet(id, options, session = shiny::getDefaultReactiveDomain())"},{"path":"/reference/actionsheet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 action sheet — f7ActionSheet","text":"id Unique id. gives state action sheet. input$id TRUE opened inversely. Importantly, action sheet never opened, input$id NULL. buttons list buttons currently selected button may accessed via input$<sheet_id>_button. value numeric. action sheet closed, input$<sheet_id>_button NULL. useful want trigger events specific button click. grid Whether display buttons grid. Default FALSE. ... options. See https://framework7.io/docs/action-sheet#action-sheet-parameters. session Shiny session object. options options. See https://framework7.io/docs/action-sheet#action-sheet-parameters.","code":"buttons <- list(   list(     text = \"Notification\",     icon = f7Icon(\"info\"),     color = NULL   ),   list(     text = \"Dialog\",     icon = f7Icon(\"lightbulb_fill\"),     color = NULL   )  )"},{"path":"/reference/actionsheet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 action sheet — f7ActionSheet","text":"","code":"library(shiny) library(shinyMobile)  sheetModuleUI <- function(id) {   ns <- NS(id)   f7Segment(     f7Button(inputId = ns(\"go\"), label = \"Show action sheet\", color = \"green\"),     f7Button(inputId = ns(\"update\"), label = \"Update action sheet\", color = \"red\")   ) }  sheetModule <- function(id) {   moduleServer(     id,     function(input, output, session) {       ns <- session$ns        observeEvent(input$action1_button, {         if (input$action1_button == 1) {           f7Notif(             text = \"You clicked on the first button\",             icon = f7Icon(\"bolt_fill\"),             title = \"Notification\",             titleRightText = \"now\"           )         } else if (input$action1_button == 2) {           f7Dialog(             id = ns(\"test\"),             title = \"Click me to launch a Toast!\",             type = \"confirm\",             text = \"You clicked on the second button\",           )         }       })        observeEvent(input$test, {         f7Toast(text = paste(\"Alert input is:\", input$test))       })        observeEvent(input$go, {         f7ActionSheet(           grid = TRUE,           id = ns(\"action1\"),           buttons = list(             list(               text = \"Notification\",               icon = f7Icon(\"info\"),               color = NULL             ),             list(               text = \"Dialog\",               icon = f7Icon(\"lightbulb_fill\"),               color = NULL             )           )         )       })        observeEvent(input$update, {         updateF7ActionSheet(           id = \"action1\",           options = list(             grid = TRUE,             buttons = list(               list(                 text = \"Plop\",                 icon = f7Icon(\"info\"),                 color = \"orange\"               )             )           )         )       })     }   ) }  app <- shinyApp(   ui = f7Page(     title = \"Action sheet\",     f7SingleLayout(       navbar = f7Navbar(\"Action sheet\"),       br(),       sheetModuleUI(id = \"sheet1\")     )   ),   server = function(input, output, session) {     sheetModule(\"sheet1\")   } )  if (interactive() || identical(Sys.getenv(\"TESTTHAT\"), \"true\")) app"},{"path":"/reference/add_dependencies.html","id":null,"dir":"Reference","previous_headings":"","what":"Attach all created dependencies in the ./R directory to the provided tag — add_dependencies","title":"Attach all created dependencies in the ./R directory to the provided tag — add_dependencies","text":"function works existing dependencies. Otherwise, error raised.","code":""},{"path":"/reference/add_dependencies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Attach all created dependencies in the ./R directory to the provided tag — add_dependencies","text":"","code":"add_dependencies(tag, deps = NULL)"},{"path":"/reference/add_dependencies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Attach all created dependencies in the ./R directory to the provided tag — add_dependencies","text":"tag Tag attach dependencies. deps Dependencies add. Expect vector names. NULL, dependencies added.","code":""},{"path":"/reference/add_f7icons_deps.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 icon dependencies — add_f7icons_deps","title":"Framework7 icon dependencies — add_f7icons_deps","text":"function attaches icon dependencies given tag.","code":""},{"path":"/reference/add_f7icons_deps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 icon dependencies — add_f7icons_deps","text":"","code":"add_f7icons_deps(tag)"},{"path":"/reference/add_f7icons_deps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 icon dependencies — add_f7icons_deps","text":"tag Element attach dependencies.","code":""},{"path":"/reference/add_pwa_deps.html","id":null,"dir":"Reference","previous_headings":"","what":"PWA dependencies utils — add_pwa_deps","title":"PWA dependencies utils — add_pwa_deps","text":"function attaches PWA manifest icons given tag","code":""},{"path":"/reference/add_pwa_deps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PWA dependencies utils — add_pwa_deps","text":"","code":"add_pwa_deps(tag)"},{"path":"/reference/add_pwa_deps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PWA dependencies utils — add_pwa_deps","text":"tag Element attach dependencies.","code":""},{"path":"/reference/add_pwacompat_deps.html","id":null,"dir":"Reference","previous_headings":"","what":"pwacompat dependencies utils — add_pwacompat_deps","title":"pwacompat dependencies utils — add_pwacompat_deps","text":"function attaches pwacompat. dependencies given tag","code":""},{"path":"/reference/add_pwacompat_deps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"pwacompat dependencies utils — add_pwacompat_deps","text":"","code":"add_pwacompat_deps(tag)"},{"path":"/reference/add_pwacompat_deps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"pwacompat dependencies utils — add_pwacompat_deps","text":"tag Element attach dependencies.","code":""},{"path":"/reference/add_shinyMobile_deps.html","id":null,"dir":"Reference","previous_headings":"","what":"shinyMobile dependencies utils — add_shinyMobile_deps","title":"shinyMobile dependencies utils — add_shinyMobile_deps","text":"function attaches shinyMobile dependencies given tag","code":""},{"path":"/reference/add_shinyMobile_deps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"shinyMobile dependencies utils — add_shinyMobile_deps","text":"","code":"add_shinyMobile_deps(tag)"},{"path":"/reference/add_shinyMobile_deps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"shinyMobile dependencies utils — add_shinyMobile_deps","text":"tag Element attach dependencies.","code":""},{"path":"/reference/app_container.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an iframe container for app demo — app_container","title":"Create an iframe container for app demo — app_container","text":"Create iframe container app demo","code":""},{"path":"/reference/app_container.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an iframe container for app demo — app_container","text":"","code":"app_container(url, deps = FALSE, skin, color = NULL, landscape = FALSE)"},{"path":"/reference/app_container.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an iframe container for app demo — app_container","text":"url app URL. deps Whether include marvel device assets. Default FALSE. first occurence must set deps TRUE CSS loaded page. skin Wrapper devices. color Wrapper color. iphone8 (black, silver, gold), iphone8+ (black, silver, gold), iphone5s (black, silver, gold), iphone5c (white,red , yellow, green, blue), iphone4s (black, silver), ipadMini (black, silver) galaxyS5 (black, white). landscape Whether put device wrapper landscape mode. Default FALSE.","code":""},{"path":"/reference/authentication.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 login screen — f7Login","title":"Framework7 login screen — f7Login","text":"Provide UI template authentication f7LoginServer demonstration module test f7Login page. recommend using production, since absolutely security passed credentials. JS side, login closed soon user password provided validity checks made. updateF7Login toggles login page.","code":""},{"path":"/reference/authentication.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 login screen — f7Login","text":"","code":"f7Login(   ...,   id,   title,   label = \"Sign In\",   footer = NULL,   startOpen = TRUE,   cancellable = FALSE )  f7LoginServer(id, ignoreInit = FALSE, trigger = NULL)  updateF7Login(   id = deprecated(),   user = NULL,   password = NULL,   cancel = FALSE,   session = shiny::getDefaultReactiveDomain() )"},{"path":"/reference/authentication.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 login screen — f7Login","text":"... Slot inputs like password, text, ... id . title Login page title. label Login confirm button label. footer Optional footer. startOpen Whether open login page start. Default TRUE. cases interesting set FALSE, instance want authentication specific tab app (See example 2). cancellable Whether show cancel button close login modal. Default FALSE. ignoreInit TRUE, , observeEvent first created/initialized, ignore handlerExpr (second argument), whether otherwise supposed run . default FALSE. trigger Reactive trigger toggle login page state. Useful, one wants set local authentication (specific section). See example 2. user Value user input. password Value password input. cancel Whether close login. Default FALSE. session Shiny session object.","code":""},{"path":"/reference/authentication.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Framework7 login screen — f7Login","text":"input associated login status, namely input$login. linked action button, input$submit, 0 application starts. soon button pressed, value incremented may used call updateF7Login. input$user input$password contains values passed user respective fields can forwarded updateF7Login. input$cancel increment whenever login closed cancellable. can access value trigger actions server, shown f7LoginServer.","code":""},{"path":"/reference/authentication.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 login screen — f7Login","text":"","code":"library(shiny) library(shinyMobile)  app <- shinyApp(   ui = f7Page(     title = \"Login module\",     f7SingleLayout(       navbar = f7Navbar(         title = \"Login Example\"       ),       toolbar = f7Toolbar(         position = \"bottom\",         f7Link(label = \"Link 1\", href = \"https://www.google.com\"),         f7Link(label = \"Link 2\", href = \"https://www.google.com\")       ),       f7Login(id = \"login\", title = \"Welcome\", cancellable = TRUE),       # main content       f7BlockTitle(         title = HTML(paste(\"Welcome\", textOutput(\"user\"))),         size = \"large\"       )     )   ),   server = function(input, output, session) {     loginData <- f7LoginServer(id = \"login\")      exportTestValues(       status = loginData$status(),       user = loginData$user(),       password = loginData$password(),       authenticated = loginData$authenticated(),       cancelled = loginData$cancelled()     )      output$user <- renderText({       req(loginData$user)       loginData$user()     })   } )  if (interactive() || identical(Sys.getenv(\"TESTTHAT\"), \"true\")) app"},{"path":"/reference/autocomplete.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 autocomplete input — f7AutoComplete","title":"Framework7 autocomplete input — f7AutoComplete","text":"f7AutoComplete generates Framework7 autocomplete input. updateF7AutoComplete changes value autocomplete input client.","code":""},{"path":"/reference/autocomplete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 autocomplete input — f7AutoComplete","text":"","code":"f7AutoComplete(   inputId,   label = NULL,   placeholder = NULL,   value = NULL,   choices,   openIn = c(\"popup\", \"page\", \"dropdown\"),   typeahead = TRUE,   expandInput = deprecated(),   closeOnSelect = FALSE,   dropdownPlaceholderText = NULL,   multiple = FALSE,   limit = NULL,   style = list(media = NULL, description = NULL, floating = FALSE, outline = FALSE),   ... )  updateF7AutoComplete(   inputId,   value = NULL,   choices = NULL,   ...,   session = shiny::getDefaultReactiveDomain() )"},{"path":"/reference/autocomplete.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 autocomplete input — f7AutoComplete","text":"inputId Autocomplete input id. label Autocomplete label. placeholder Text write container. value Autocomplete initial value, . choices Autocomplete choices. openIn Defines open Autocomplete, can page popup (Standalone) dropdown. typeahead Enables type ahead, prefill input value first item match. openIn \"dropdown\". expandInput : removed Framework7. closeOnSelect Set true autocomplete closed user picks value. available multiple enabled. works openIn 'popup' 'page'. dropdownPlaceholderText Specify dropdown placeholder text. openIn \"dropdown\". multiple Whether allow multiple value selection. works openIn 'popup' 'page'. limit Limit number maximum displayed items autocomplete per query. style Autocomplete styling parameters. available openIn \"dropdown\". ... Extra options. See https://framework7.io/docs/autocomplete#autocomplete-parameters session Shiny session object.","code":""},{"path":"/reference/autocomplete.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Framework7 autocomplete input — f7AutoComplete","text":"Contrary f7Text, input cleared.","code":""},{"path":"/reference/autocomplete.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Framework7 autocomplete input — f7AutoComplete","text":"David Granjon, dgranjon@ymail.com","code":""},{"path":"/reference/autocomplete.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 autocomplete input — f7AutoComplete","text":"","code":"library(shiny) library(shinyMobile)  app <- shinyApp(   ui = f7Page(     title = \"My app\",     f7SingleLayout(       navbar = f7Navbar(title = \"Update autocomplete\"),       f7Block(f7Button(inputId = \"update\", label = \"Update autocomplete\")),       f7Block(         inset = TRUE,         strong = TRUE,         f7BlockTitle(\"Autocomplete input\"),         f7AutoComplete(           inputId = \"myautocomplete\",           placeholder = \"Some text here!\",           openIn = \"dropdown\",           label = \"Type a fruit name\",           choices = c(             \"Apple\", \"Apricot\", \"Avocado\", \"Banana\", \"Melon\",             \"Orange\", \"Peach\", \"Pear\", \"Pineapple\"           ),           style = list(             outline = TRUE,             media = f7Icon(\"house\"),             description = \"typeahead input\",             floating = TRUE           )         )       ),       f7Block(verbatimTextOutput(\"autocompleteval\"))     )   ),   server = function(input, output, session) {     output$autocompleteval <- renderText(input$myautocomplete)      observeEvent(input$update, {       updateF7AutoComplete(         inputId = \"myautocomplete\",         value = \"plip\",         choices = c(\"plip\", \"plap\", \"ploup\")       )     })   } )  if (interactive() || identical(Sys.getenv(\"TESTTHAT\"), \"true\")) app"},{"path":"/reference/block.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 block — f7Block","title":"Framework7 block — f7Block","text":"f7Block creates block container. f7BlockTitle creates title f7Block. f7BlockHeader creates header content f7Block. f7BlockFooter creates footer content f7Block.","code":""},{"path":"/reference/block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 block — f7Block","text":"","code":"f7Block(   ...,   hairlines = deprecated(),   strong = FALSE,   inset = FALSE,   tablet = FALSE,   outline = FALSE )  f7BlockTitle(title, size = NULL)  f7BlockHeader(text)  f7BlockFooter(text)"},{"path":"/reference/block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 block — f7Block","text":"... Block content. Also f7BlockHeader f7BlockFooter. hairlines : removed Framework7. strong Add white background text highlighted. FALSE default. inset Whether set block inset. FALSE default. Works strong TRUE. tablet Whether make block inset large screens. FALSE default. outline Block border. Default FALSE. title Block title. size Block title size. NULL default \"medium\", \"large\". text text.","code":""},{"path":"/reference/block.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Framework7 block — f7Block","text":"David Granjon, dgranjon@ymail.com","code":""},{"path":"/reference/block.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 block — f7Block","text":"","code":"if (interactive()) {   library(shiny)   library(shinyMobile)    shinyApp(     ui = f7Page(       title = \"Blocks\",       f7SingleLayout(         navbar = f7Navbar(title = \"f7Block\"),         f7BlockTitle(title = \"A large title\", size = \"large\"),         f7Block(           f7BlockHeader(text = \"Header\"),           \"Here comes paragraph within content block.      Donec et nulla auctor massa pharetra      adipiscing ut sit amet sem. Suspendisse      molestie velit vitae mattis tincidunt.      Ut sit amet quam mollis, vulputate      turpis vel, sagittis felis.\",           f7BlockFooter(text = \"Footer\")         ),         f7BlockTitle(title = \"A medium title\", size = \"medium\"),         f7Block(           strong = TRUE,           outline = TRUE,           f7BlockHeader(text = \"Header\"),           \"Here comes paragraph within content block.      Donec et nulla auctor massa pharetra      adipiscing ut sit amet sem. Suspendisse      molestie velit vitae mattis tincidunt.      Ut sit amet quam mollis, vulputate      turpis vel, sagittis felis.\",           f7BlockFooter(text = \"Footer\")         ),         f7BlockTitle(title = \"A normal title\", size = NULL),         f7Block(           inset = TRUE,           strong = TRUE,           f7BlockHeader(text = \"Header\"),           \"Here comes paragraph within content block.      Donec et nulla auctor massa pharetra      adipiscing ut sit amet sem. Suspendisse      molestie velit vitae mattis tincidunt.      Ut sit amet quam mollis, vulputate      turpis vel, sagittis felis.\",           f7BlockFooter(text = \"Footer\")         ),         f7Block(           inset = TRUE,           tablet = TRUE,           strong = TRUE,           f7BlockHeader(text = \"Header\"),           \"Here comes paragraph within content block.      Donec et nulla auctor massa pharetra      adipiscing ut sit amet sem. Suspendisse      molestie velit vitae mattis tincidunt.      Ut sit amet quam mollis, vulputate      turpis vel, sagittis felis.\",           f7BlockFooter(text = \"Footer\")         ),         f7Block(           inset = TRUE,           strong = TRUE,           outline = TRUE,           f7BlockHeader(text = \"Header\"),           \"Here comes paragraph within content block.      Donec et nulla auctor massa pharetra      adipiscing ut sit amet sem. Suspendisse      molestie velit vitae mattis tincidunt.      Ut sit amet quam mollis, vulputate      turpis vel, sagittis felis.\",           f7BlockFooter(text = \"Footer\")         )       )     ),     server = function(input, output) {}   ) }"},{"path":"/reference/buildConfig.html","id":null,"dir":"Reference","previous_headings":"","what":"Build config tag for JavaScript — buildConfig","title":"Build config tag for JavaScript — buildConfig","text":"See https://unleash-shiny.rinterface.com/shiny-input-system#boxes--steroids-","code":""},{"path":"/reference/buildConfig.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build config tag for JavaScript — buildConfig","text":"","code":"buildConfig(id, config)"},{"path":"/reference/buildPickerInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Build input tag for picker elements — buildPickerInput","title":"Build input tag for picker elements — buildPickerInput","text":"Build input tag picker elements","code":""},{"path":"/reference/buildPickerInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build input tag for picker elements — buildPickerInput","text":"","code":"buildPickerInput(id, label, config, class, placeholder = NULL, style = NULL)"},{"path":"/reference/button.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 action button — f7Button","title":"Framework7 action button — f7Button","text":"f7Button generates Framework7 action button. updateF7Button updates f7Button. Framework7 segmented button container f7Button.","code":""},{"path":"/reference/button.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 action button — f7Button","text":"","code":"f7Button(   inputId = NULL,   label = NULL,   href = NULL,   color = NULL,   fill = TRUE,   outline = FALSE,   shadow = FALSE,   rounded = FALSE,   size = NULL,   active = FALSE,   tonal = FALSE,   icon = NULL )  updateF7Button(   inputId,   label = NULL,   color = NULL,   fill = NULL,   outline = NULL,   shadow = NULL,   rounded = NULL,   size = NULL,   tonal = NULL,   icon = NULL,   session = shiny::getDefaultReactiveDomain() )  f7Segment(   ...,   container = deprecated(),   shadow = FALSE,   rounded = FALSE,   strong = FALSE )"},{"path":"/reference/button.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 action button — f7Button","text":"inputId input slot used access value. label contents button link–usually text label, also use HTML, like image f7Icon. href Button link. color Button color. compatible outline. See valid colors https://framework7.io/docs/badge.html. fill Fill style. TRUE default. compatible outline outline Outline style. FALSE default. compatible fill. shadow Button shadow. FALSE default. material design. rounded Round style. FALSE default. size Button size. NULL default also \"large\" \"small\". active Button active state. Default FALSE. useful used f7Segment strong parameter set TRUE. tonal Button tonal style. Default FALSE icon Button icon. Expect f7Icon. session Shiny session object, usually default value suffice. ... Slot f7Button. container : removed Framework7. strong Add white background text highlighted. FALSE default.","code":""},{"path":"/reference/button.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Framework7 action button — f7Button","text":"David Granjon, dgranjon@ymail.com","code":""},{"path":"/reference/button.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 action button — f7Button","text":"","code":"library(shiny) library(shinyMobile)  app <- shiny::shinyApp(   ui = f7Page(     title = \"Update f7Button\",     f7SingleLayout(       navbar = f7Navbar(title = \"Update f7Button\"),       f7Block(f7Button(\"update\", \"Update Button\")),       f7Block(         f7Button(           \"button\",           \"My button\",           color = \"orange\",           outline = FALSE,           fill = TRUE,           shadow = FALSE,           rounded = FALSE,           icon = f7Icon(\"speedometer\")         )       )     )   ),   server = function(input, output, session) {     observeEvent(input$update, {       updateF7Button(         inputId = \"button\",         label = \"Updated label\",         color = \"purple\",         shadow = TRUE,         rounded = TRUE,         outline = TRUE,         fill = FALSE,         tonal = TRUE,         size = \"large\",         icon = f7Icon(\"speaker_zzz\")       )     })   } )  if (interactive() || identical(Sys.getenv(\"TESTTHAT\"), \"true\")) app if (interactive()) {   library(shiny)   library(shinyMobile)    shinyApp(     ui = f7Page(       options = list(dark = FALSE),       title = \"Button Segments\",       f7SingleLayout(         navbar = f7Navbar(title = \"f7Segment, f7Button\"),         f7BlockTitle(title = \"Simple Buttons in a segment\"),         f7Segment(           f7Button(color = \"blue\", label = \"My button\", fill = FALSE),           f7Button(color = \"green\", label = \"My button\", fill = FALSE),           f7Button(color = \"yellow\", label = \"My button\", fill = FALSE)         ),         f7BlockTitle(title = \"Tonal buttons\"),         f7Segment(           f7Button(color = \"blue\", label = \"My button\", tonal = TRUE),           f7Button(color = \"green\", label = \"My button\", tonal = TRUE),           f7Button(color = \"yellow\", label = \"My button\", tonal = TRUE)         ),         f7BlockTitle(title = \"Filled Buttons in a segment/rounded container\"),         f7Segment(           rounded = TRUE,           f7Button(color = \"black\", label = \"My button\"),           f7Button(color = \"green\", label = \"My button\"),           f7Button(color = \"yellow\", label = \"My button\")         ),         f7BlockTitle(title = \"Outline Buttons in a segment/shadow container\"),         f7Segment(           shadow = TRUE,           f7Button(label = \"My button\", outline = TRUE, fill = FALSE),           f7Button(label = \"My button\", outline = TRUE, fill = FALSE),           f7Button(label = \"My button\", outline = TRUE, fill = FALSE)         ),         f7BlockTitle(title = \"Buttons in a segment/strong container\"),         f7Segment(           strong = TRUE,           f7Button(label = \"My button\", fill = FALSE),           f7Button(label = \"My button\", fill = FALSE),           f7Button(label = \"My button\", fill = FALSE, active = TRUE)         )       )     ),     server = function(input, output) {}   ) }"},{"path":"/reference/card.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 card — f7Card","title":"Framework7 card — f7Card","text":"f7Card creates simple card container. f7ExpandableCard card can expand. Ideal gallery. updateF7Card maximizes f7ExpandableCard client.","code":""},{"path":"/reference/card.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 card — f7Card","text":"","code":"f7Card(   ...,   image = NULL,   title = NULL,   footer = NULL,   outline = FALSE,   height = NULL,   raised = FALSE,   divider = FALSE )  f7ExpandableCard(   ...,   id = NULL,   title = NULL,   subtitle = NULL,   color = NULL,   image = NULL,   fullBackground = FALSE,   buttonColor = \"white\" )  updateF7Card(id, session = shiny::getDefaultReactiveDomain())"},{"path":"/reference/card.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 card — f7Card","text":"... Card content. image Card background image url. Tje JPG format prefered. compatible color argument. title Card title. footer Footer content, . Must wrapped tagList. outline Outline style. FALSE default. height Card height. NULL default. raised Card shadow. FALSE default. divider Card header/footer dividers. FALSE default. id Card id. subtitle Card subtitle. color Card background color. See https://framework7.io/docs/cards.html. compatible img argument. fullBackground Whether image cover entire card. buttonColor Color close button. Default \"white\". session Shiny session object.","code":""},{"path":"/reference/card.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Framework7 card — f7Card","text":"f7ExpandableCard, image color compatible. Choose one .","code":""},{"path":"/reference/card.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Framework7 card — f7Card","text":"David Granjon, dgranjon@ymail.com","code":""},{"path":"/reference/card.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 card — f7Card","text":"","code":"# Simple card if (interactive()) {   library(shiny)   library(shinyMobile)    shinyApp(     ui = f7Page(       title = \"Cards\",       options = list(dark = FALSE),       f7SingleLayout(         navbar = f7Navbar(title = \"f7Card\"),         f7Card(\"This is a simple card with plain text,       but cards can also contain their own header,       footer, list view, image, or any other element.\"),         f7Card(           title = \"Card header\",           raised = TRUE,           outline = TRUE,           divider = TRUE,           div(class = \"date\", \"March 16, 2024\"),           \"This is a simple card with plain text,        but cards can also contain their own header,        footer, list view, image, or any other element.\",           footer = \"Card footer\"         ),         f7Card(           title = \"Card header\",           image = \"https://cdn.framework7.io/placeholder/nature-1000x600-3.jpg\",           \"This is a simple card with plain text,        but cards can also contain their own header,        footer, list view, image, or any other element.\",           footer = tagList(             f7Link(\"Link 1\", href = \"https://google.com\"),             f7Badge(\"Badge\", color = \"green\")           )         )       )     ),     server = function(input, output) {}   ) }  library(shiny) library(shinyMobile)  app <- shinyApp(   ui = f7Page(     title = \"Expandable Cards\",     f7SingleLayout(       navbar = f7Navbar(title = \"Expandable Cards\"),       f7ExpandableCard(         id = \"card1\",         title = \"Expandable Card 1\",         image = \"https://i.pinimg.com/originals/73/38/6e/73386e0513d4c02a4fbb814cadfba655.jpg\",         \"Framework7 - is a free and open source HTML mobile framework          to develop hybrid mobile apps or web apps with iOS or Android          native look and feel. It is also an indispensable prototyping apps tool          to show working app prototype as soon as possible in case you need to.\"       ),       hr(),       f7BlockTitle(title = \"Click below to expand the card!\") %>% f7Align(side = \"center\"),       f7Button(inputId = \"go\", label = \"Go\"),       br(),       f7ExpandableCard(         id = \"card2\",         title = \"Expandable Card 2\",         fullBackground = TRUE,         image = \"https://cdn.pixabay.com/photo/2017/10/03/18/55/mountain-2813667_960_720.png\",         \"Framework7 - is a free and open source HTML mobile framework         to develop hybrid mobile apps or web apps with iOS or Android         native look and feel. It is also an indispensable prototyping apps tool         to show working app prototype as soon as possible in case you need to.\"       )     )   ),   server = function(input, output, session) {     observeEvent(input$go, {       updateF7Card(id = \"card2\")     })   } )  if (interactive() || identical(Sys.getenv(\"TESTTHAT\"), \"true\")) app"},{"path":"/reference/checkbox.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 checkbox — f7Checkbox","title":"Framework7 checkbox — f7Checkbox","text":"f7Checkbox creates checkbox input. updateF7Checkbox changes value checkbox input client.","code":""},{"path":"/reference/checkbox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 checkbox — f7Checkbox","text":"","code":"f7Checkbox(inputId, label, value = FALSE)  updateF7Checkbox(   inputId,   label = NULL,   value = NULL,   session = shiny::getDefaultReactiveDomain() )"},{"path":"/reference/checkbox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 checkbox — f7Checkbox","text":"inputId input slot used access value. label Display label control, NULL label. value Initial value (TRUE FALSE). session Shiny session object.","code":""},{"path":"/reference/checkbox.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 checkbox — f7Checkbox","text":"","code":"library(shiny) library(shinyMobile)  app <- shinyApp(   ui = f7Page(     f7SingleLayout(       navbar = f7Navbar(title = \"updateF7Checkbox\"),       f7Block(f7Button(\"update\", \"Toggle checkbox\")),       f7Checkbox(         inputId = \"checkbox\",         label = \"Checkbox\",         value = FALSE       )     )   ), server = function(input, output, session) {     observeEvent(input$update, {       updateF7Checkbox(\"checkbox\", value = !input$checkbox)     })   } )  if (interactive() || identical(Sys.getenv(\"TESTTHAT\"), \"true\")) app"},{"path":"/reference/checkboxgroup.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 checkbox group — f7CheckboxGroup","title":"Framework7 checkbox group — f7CheckboxGroup","text":"f7CheckboxGroup creates checkbox group input Custom choice item f7CheckboxGroup.","code":""},{"path":"/reference/checkboxgroup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 checkbox group — f7CheckboxGroup","text":"","code":"f7CheckboxGroup(   inputId,   label,   choices = NULL,   selected = NULL,   position = c(\"left\", \"right\"),   style = list(inset = FALSE, outline = FALSE, dividers = FALSE, strong = FALSE) )  f7CheckboxChoice(..., title, subtitle = NULL, after = NULL)"},{"path":"/reference/checkboxgroup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 checkbox group — f7CheckboxGroup","text":"inputId Input id. label Input label choices List choices. Can simple vector named list list f7RadioChoice f7CheckboxChoice selected Selected element. NULL default. pass f7RadioChoice f7CheckboxChoice choices, selected must numeric value corresponding index element select. position Check mark side. \"left\" \"right\". style Input style. Inherit f7List options outline, inset, strong dividers. ... Choice content. Text striped long. title Item title. subtitle Item subtitle. Display right title.","code":""},{"path":"/reference/checkboxgroup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 checkbox group — f7CheckboxGroup","text":"","code":"library(shiny) library(shinyMobile)  app <- shinyApp(   ui = f7Page(     title = \"My app\",     f7SingleLayout(       navbar = f7Navbar(title = \"f7CheckboxGroup\"),       f7BlockTitle(\"Simple choices\", size = \"large\"),       f7CheckboxGroup(         inputId = \"checkboxgroup\",         label = \"Choose a variable:\",         choices = colnames(mtcars)[-1],         selected = \"disp\",         position = \"right\"       ),       tableOutput(\"data\"),       f7BlockTitle(\"Custom choices: f7CheckboxChoice\", size = \"large\"),       f7CheckboxGroup(         inputId = \"checkboxgroup2\",         label = \"Custom choices\",         choices = list(           f7CheckboxChoice(             \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.             Nulla sagittis tellus ut turpis condimentum,             ut dignissim lacus tincidunt\",             title = \"Choice 1\",             subtitle = \"David\",             after = \"March 16, 2024\"           ),           f7CheckboxChoice(             \"Cras dolor metus, ultrices condimentum sodales sit             amet, pharetra sodales eros. Phasellus vel felis tellus.             Mauris rutrum ligula nec dapibus feugiat\",             title = \"Choice 2\",             subtitle = \"Veerle\",             after = \"March 17, 2024\"           )         ),         selected = 2,         style = list(           inset = TRUE,           outline = TRUE,           dividers = TRUE,           strong = TRUE         )       ),       textOutput(\"selected\")     )   ),   server = function(input, output) {     output$data <- renderTable(       {         mtcars[, c(\"mpg\", input$checkboxgroup), drop = FALSE]       },       rownames = TRUE     )     output$selected <- renderText(input$checkboxgroup2)   } )  if (interactive() || identical(Sys.getenv(\"TESTTHAT\"), \"true\")) app"},{"path":"/reference/class2f7.html","id":null,"dir":"Reference","previous_headings":"","what":"Get CSS class based on cell class — class2f7","title":"Get CSS class based on cell class — class2f7","text":"Get CSS class based cell class","code":""},{"path":"/reference/class2f7.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get CSS class based on cell class — class2f7","text":"","code":"class2f7(x)"},{"path":"/reference/class2f7.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get CSS class based on cell class — class2f7","text":"x Value.","code":""},{"path":"/reference/createInputLayout.html","id":null,"dir":"Reference","previous_headings":"","what":"Create common input layout — createInputLayout","title":"Create common input layout — createInputLayout","text":"See https://framework7.io/docs/inputs#inputs-layout.","code":""},{"path":"/reference/createInputLayout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create common input layout — createInputLayout","text":"","code":"createInputLayout(..., label = NULL, style, dropdown = FALSE)"},{"path":"/reference/createInputTag.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an input tag — createInputTag","title":"Create an input tag — createInputTag","text":"Useful text inputs, password input ...","code":""},{"path":"/reference/createInputTag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an input tag — createInputTag","text":"","code":"createInputTag(inputId, value = NULL, type, placeholder, ...)"},{"path":"/reference/createOptions.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates a list of option — createOptions","title":"Generates a list of option — createOptions","text":"f7Radio f7CheckboxGroup","code":""},{"path":"/reference/createOptions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates a list of option — createOptions","text":"","code":"createOptions(   inputId,   choices,   selected,   position = \"start\",   has_media_list = FALSE,   type )"},{"path":"/reference/createOptions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates a list of option — createOptions","text":"inputId Radio input id. choices List choices. selected Selected value position Check mark position. has_media_list custom choices. type Choose either \"checkbox\" \"radio\"","code":""},{"path":"/reference/createSelectOptions.html","id":null,"dir":"Reference","previous_headings":"","what":"Create option html tag based on choice input — createSelectOptions","title":"Create option html tag based on choice input — createSelectOptions","text":"Used f7SmartSelect f7Select","code":""},{"path":"/reference/createSelectOptions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create option html tag based on choice input — createSelectOptions","text":"","code":"createSelectOptions(choices, selected)"},{"path":"/reference/createSelectOptions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create option html tag based on choice input — createSelectOptions","text":"choices Vector possibilities. selected Default selected value.","code":""},{"path":"/reference/create_app_link.html","id":null,"dir":"Reference","previous_headings":"","what":"Create shinylive iframe — create_app_link","title":"Create shinylive iframe — create_app_link","text":"Create shinylive iframe","code":""},{"path":"/reference/create_app_link.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create shinylive iframe — create_app_link","text":"","code":"create_app_link(   app_code,   mode = c(\"app\", \"editor\"),   header = TRUE,   height = \"852\" )"},{"path":"/reference/create_app_link.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create shinylive iframe — create_app_link","text":"app_code base64 app code. can create https://shinylive.io/r writing code click share copy link. code located end url. mode display shinylive app. Default app mode. header Whether display shinylive header. Default TRUE. height iframe height. Useful setup custom viewport dimensions. Default iphone15 height.","code":""},{"path":"/reference/create_app_ui.html","id":null,"dir":"Reference","previous_headings":"","what":"Create the app UI — create_app_ui","title":"Create the app UI — create_app_ui","text":"Create app UI","code":""},{"path":"/reference/create_app_ui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create the app UI — create_app_ui","text":"","code":"create_app_ui(iframe, device, color, landscape)"},{"path":"/reference/create_app_ui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create the app UI — create_app_ui","text":"iframe iframe tag designed preview_mobile. device See preview_mobile input. color See preview_mobile input. landscape See preview_mobile input.","code":""},{"path":"/reference/create_manifest.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a manifest for your shiny app — create_manifest","title":"Create a manifest for your shiny app — create_manifest","text":". create_manifest creates manifest shiny App. Please use workflow instead: https://unleash-shiny.rinterface.com/mobile-pwa.html#charpente--pwa-tools.","code":""},{"path":"/reference/create_manifest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a manifest for your shiny app — create_manifest","text":"","code":"create_manifest(   path,   name = \"My App\",   shortName = \"My App\",   description = \"What it does!\",   lang = \"en-US\",   startUrl,   display = c(\"minimal-ui\", \"standalone\", \"fullscreen\", \"browser\"),   background_color = \"#000000\",   theme_color = \"#0000ffff\",   icon )"},{"path":"/reference/create_manifest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a manifest for your shiny app — create_manifest","text":"path package path. name App name. shortName App short name. description App description lang App language (en-US default). startUrl Page open start. display Display mode. Choose among c(\"minimal-ui\", \"standalone\", \"fullscreen\", \"browser\"). practice, want standalone mode app looks like native app. background_color background_color property used splash screen application first launched. theme_color theme_color sets color tool bar, may reflected app's preview task switchers. icon Dataframe containing icon specs. src gives icon path (www folder instance), sizes gives size types type.","code":""},{"path":"/reference/create_manifest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a manifest for your shiny app — create_manifest","text":"function creates www folder shiny app. Must specify path. creates 1 folders contain icons manifest.json file.","code":""},{"path":"/reference/create_manifest.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create a manifest for your shiny app — create_manifest","text":"See https://developer.mozilla.org/en-US/docs/Web/Manifest informations.","code":""},{"path":"/reference/datepicker.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 date picker — f7DatePicker","title":"Framework7 date picker — f7DatePicker","text":"f7DatePicker creates Framework7 date picker input. updateF7DatePicker changes value date picker input client.","code":""},{"path":"/reference/datepicker.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 date picker — f7DatePicker","text":"","code":"f7DatePicker(   inputId,   label,   value = NULL,   multiple = FALSE,   direction = c(\"horizontal\", \"vertical\"),   minDate = NULL,   maxDate = NULL,   dateFormat = \"yyyy-mm-dd\",   openIn = c(\"auto\", \"popover\", \"sheet\", \"customModal\"),   scrollToInput = FALSE,   closeByOutsideClick = TRUE,   toolbar = TRUE,   toolbarCloseText = \"Done\",   header = FALSE,   headerPlaceholder = \"Select date\",   style = list(outline = FALSE, inset = FALSE, strong = FALSE, dividers = FALSE),   ... )  updateF7DatePicker(   inputId,   value = NULL,   ...,   session = shiny::getDefaultReactiveDomain() )"},{"path":"/reference/datepicker.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 date picker — f7DatePicker","text":"inputId Date input id. label Input label. value Array initial selected dates. array item represents selected date. timePicker enabled, value needs object type POSIXct. multiple TRUE allow select multiple dates. direction Months layout direction, 'horizontal' 'vertical'. minDate Minimum allowed date. maxDate Maximum allowed date. dateFormat Date format: \"yyyy-mm-dd\", instance. openIn Can auto, popover (open calendar popover), sheet (open sheet modal) customModal (open custom Calendar modal overlay). case auto open sheet modal small screens popover large screens. scrollToInput Scroll viewport (page-content) input calendar opened. closeByOutsideClick enabled, picker closed clicking outside picker related input element. toolbar Enables calendar toolbar. toolbarCloseText Text Done/Close toolbar button. header Enables calendar header. headerPlaceholder Default calendar header placeholder text. style Input style. Inherit f7List options outline, inset, strong dividers. ... options pass picker. See https://framework7.io/docs/calendar#calendar-parameters. session Shiny session object, usually default value suffice.","code":""},{"path":"/reference/datepicker.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Framework7 date picker — f7DatePicker","text":"Date vector.","code":""},{"path":"/reference/datepicker.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 date picker — f7DatePicker","text":"","code":"library(shiny) library(shinyMobile)  app <- shinyApp(   ui = f7Page(     title = \"My app\",     f7SingleLayout(       navbar = f7Navbar(title = \"Update date picker\"),       f7Segment(         f7Button(inputId = \"update\", label = \"Update\"),         f7Button(inputId = \"rmToolbar\", label = \"Remove toolbar\"),         f7Button(inputId = \"addToolbar\", label = \"Add toolbar\")       ),       f7Segment(         f7Button(inputId = \"removeTime\", label = \"Remove time\"),         f7Button(inputId = \"addTime\", label = \"Add time\")       ),       f7DatePicker(         inputId = \"picker\",         label = \"Choose a date and time\",         value = as.POSIXct(\"2024-03-24 09:00:00 UTC\"),         openIn = \"auto\",         direction = \"horizontal\",         timePicker = TRUE,         dateFormat = \"yyyy-mm-dd, HH::mm\"       ),       f7Block(verbatimTextOutput(\"pickerval\"))     )   ),   server = function(input, output, session) {     output$pickerval <- renderPrint(input$picker)      observeEvent(input$update, {       updateF7DatePicker(         inputId = \"picker\",         value = as.POSIXct(\"2024-03-23 10:00:00 UTC\"),         timePicker = TRUE,         dateFormat = \"yyyy-mm-dd, HH::mm\" # preserve date format       )     })      observeEvent(input$rmToolbar, {       updateF7DatePicker(         inputId = \"picker\",         timePicker = TRUE,         toolbar = FALSE,         dateFormat = \"yyyy-mm-dd, HH::mm\" # preserve date format       )     })      observeEvent(input$addToolbar, {       updateF7DatePicker(         inputId = \"picker\",         timePicker = TRUE,         toolbar = TRUE,         dateFormat = \"yyyy-mm-dd, HH::mm\" # preserve date format       )     })      observeEvent(input$removeTime, {       updateF7DatePicker(         inputId = \"picker\",         value = as.Date(input$picker),         timePicker = FALSE,         dateFormat = \"yyyy-mm-dd\" # new date format       )     })      observeEvent(input$addTime, {       updateF7DatePicker(         inputId = \"picker\",         value = as.POSIXct(input$picker),         timePicker = TRUE,         dateFormat = \"yyyy-mm-dd, HH::mm\" # preserve date format       )     })   } )  if (interactive() || identical(Sys.getenv(\"TESTTHAT\"), \"true\")) app"},{"path":"/reference/f7Align.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 align utility — f7Align","title":"Framework7 align utility — f7Align","text":"f7Align alignment utility items.","code":""},{"path":"/reference/f7Align.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 align utility — f7Align","text":"","code":"f7Align(tag, side = c(\"left\", \"center\", \"right\", \"justify\"))"},{"path":"/reference/f7Align.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 align utility — f7Align","text":"tag Tag align. side Side align: \"left\", \"center\", \"right\" \"justify\".","code":""},{"path":"/reference/f7Align.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Framework7 align utility — f7Align","text":"David Granjon, dgranjon@ymail.com","code":""},{"path":"/reference/f7Align.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 align utility — f7Align","text":"","code":"if(interactive()){  library(shiny)  library(shinyMobile)   shinyApp(    ui = f7Page(     title = \"Align\",     f7SingleLayout(      navbar = f7Navbar(title = \"f7Align\"),      f7Row(       f7Align(h1(\"Left\"), side = \"left\"),       f7Align(h1(\"Center\"), side = \"center\"),       f7Align(h1(\"Right\"), side = \"right\")      )     )    ),    server = function(input, output) {}  ) }"},{"path":"/reference/f7Back.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 back button — f7Back","title":"Framework7 back button — f7Back","text":"f7Back button go back f7Tabs.","code":""},{"path":"/reference/f7Back.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 back button — f7Back","text":"","code":"f7Back(targetId)"},{"path":"/reference/f7Back.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 back button — f7Back","text":"targetId f7Tabs id.","code":""},{"path":"/reference/f7Badge.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 badge — f7Badge","title":"Framework7 badge — f7Badge","text":"Container highlight important information color.","code":""},{"path":"/reference/f7Badge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 badge — f7Badge","text":"","code":"f7Badge(..., color = NULL)"},{"path":"/reference/f7Badge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 badge — f7Badge","text":"... Badge content. Avoid long text. color Badge color: see valid colors https://framework7.io/docs/badge.html.","code":""},{"path":"/reference/f7Badge.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Framework7 badge — f7Badge","text":"David Granjon, dgranjon@ymail.com","code":""},{"path":"/reference/f7Badge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 badge — f7Badge","text":"","code":"if (interactive()) {   library(shiny)   library(shinyMobile)    colors <- getF7Colors()    shinyApp(     ui = f7Page(       title = \"Badges\",       f7SingleLayout(         navbar = f7Navbar(title = \"f7Badge\"),         f7Block(           strong = TRUE,           f7Badge(\"Default\"),           lapply(seq_along(colors), function(i) {             f7Badge(colors[[i]], color = colors[[i]])           })         )       )     ),     server = function(input, output) {}   ) }"},{"path":"/reference/f7Chip.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 chips — f7Chip","title":"Framework7 chips — f7Chip","text":"f7Chip improved badge container.","code":""},{"path":"/reference/f7Chip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 chips — f7Chip","text":"","code":"f7Chip(   label = NULL,   image = NULL,   icon = NULL,   outline = FALSE,   status = NULL,   iconStatus = NULL,   closable = FALSE )"},{"path":"/reference/f7Chip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 chips — f7Chip","text":"label Chip label. image Chip image, . icon Icon, . IOS Material icons available. outline Whether outline chip. FALSE default. status Chip color: see valid colors https://framework7.io/docs/chips.html. iconStatus Chip icon color: see valid colors https://framework7.io/docs/chips.html. closable Whether close chip. FALSE default.","code":""},{"path":"/reference/f7Chip.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Framework7 chips — f7Chip","text":"David Granjon, dgranjon@ymail.com","code":""},{"path":"/reference/f7Chip.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 chips — f7Chip","text":"","code":"if(interactive()){  library(shiny)  library(shinyMobile)   shinyApp(   ui = f7Page(     title = \"Chips\",     f7SingleLayout(       navbar = f7Navbar(title = \"f7Chip\"),       f7Block(         strong = TRUE,         f7Chip(label = \"simple Chip\"),         f7Chip(label = \"outline Chip\", outline = TRUE),         f7Chip(label = \"icon Chip\", icon = f7Icon(\"plus_circle_fill\"), iconStatus = \"pink\"),         f7Chip(label = \"image Chip\", image = \"https://loremflickr.com/g/320/240/london\"),         f7Chip(label = \"closable Chip\", closable = TRUE),         f7Chip(label = \"colored Chip\", status = \"green\"),         f7Chip(label = \"colored outline Chip\", status = \"green\", outline = TRUE)       )     )   ),   server = function(input, output) {}  ) }"},{"path":"/reference/f7Col.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 column container — f7Col","title":"Framework7 column container — f7Col","text":"f7Grid replacement","code":""},{"path":"/reference/f7Col.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 column container — f7Col","text":"","code":"f7Col(...)"},{"path":"/reference/f7Col.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 column container — f7Col","text":"... Column content. width automatically handled depending number columns.","code":""},{"path":"/reference/f7Col.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Framework7 column container — f7Col","text":"dark theme work items embedded column. Use f7Flex instead.","code":""},{"path":"/reference/f7Col.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Framework7 column container — f7Col","text":"David Granjon, dgranjon@ymail.com","code":""},{"path":"/reference/f7ColorPicker.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Framework7 color picker input — f7ColorPicker","title":"Create a Framework7 color picker input — f7ColorPicker","text":"Create Framework7 color picker input","code":""},{"path":"/reference/f7ColorPicker.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Framework7 color picker input — f7ColorPicker","text":"","code":"f7ColorPicker(   inputId,   label,   value = \"#ff0000\",   placeholder = NULL,   modules = f7ColorPickerModules,   palettes = f7ColorPickerPalettes,   sliderValue = TRUE,   sliderValueEditable = TRUE,   sliderLabel = TRUE,   hexLabel = TRUE,   hexValueEditable = TRUE,   groupedModules = TRUE,   style = list(outline = FALSE, inset = FALSE, strong = FALSE, dividers = FALSE),   ... )"},{"path":"/reference/f7ColorPicker.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Framework7 color picker input — f7ColorPicker","text":"inputId Color picker input. label Color picker label. value Initial picker value hex. placeholder Color picker placeholder. modules Picker color modules. Choose least one. palettes Picker color predefined palettes. Must list color vectors, value specified HEX string. sliderValue enabled, display sliders values. sliderValueEditable enabled, display sliders values  elements edit directly. sliderLabel enabled, display sliders labels text. hexLabel enabled, display HEX module label text, e.g. HEX. hexValueEditable enabled, display HEX module value  element edit directly. groupedModules enabled add exposure sliders modules make look separated. style Input style. Inherit f7List options outline, inset, strong dividers. ... options pass picker. See https://framework7.io/docs/color-picker#color-picker-parameters.","code":""},{"path":"/reference/f7ColorPicker.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Framework7 color picker input — f7ColorPicker","text":"return value list includes hex, rgb, hsl, hsb, alpha, hue, rgba, hsla values. See https://framework7.io/docs/color-picker#color-picker-value.","code":""},{"path":"/reference/f7ColorPicker.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Framework7 color picker input — f7ColorPicker","text":"","code":"library(shiny) library(shinyMobile)  app <- shinyApp(   ui = f7Page(     title = \"My app\",     f7SingleLayout(       navbar = f7Navbar(title = \"f7ColorPicker\"),       f7ColorPicker(         inputId = \"mycolorpicker\",         placeholder = \"Some text here!\",         label = \"Select a color\"       ),       \"The picker hex value is:\",       textOutput(\"colorPickerVal\"),       \"The picker rgb value is:\",       textOutput(\"colorPickerValRgb\")     )   ),   server = function(input, output) {     output$colorPickerVal <- renderText(input$mycolorpicker$hex)     output$colorPickerValRgb <- renderText(unlist(paste(input$mycolorpicker$rgb, collapse = \",\")))   } )  if (interactive() || identical(Sys.getenv(\"TESTTHAT\"), \"true\")) app"},{"path":"/reference/f7DefaultOptions.html","id":null,"dir":"Reference","previous_headings":"","what":"shinyMobile app default options — f7DefaultOptions","title":"shinyMobile app default options — f7DefaultOptions","text":"List default custom options.","code":""},{"path":"/reference/f7DefaultOptions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"shinyMobile app default options — f7DefaultOptions","text":"","code":"f7DefaultOptions()"},{"path":"/reference/f7DefaultOptions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"shinyMobile app default options — f7DefaultOptions","text":"list options pass f7Page.","code":""},{"path":"/reference/f7Dialog.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 dialog window — f7Dialog","title":"Framework7 dialog window — f7Dialog","text":"f7Dialog generates modal window.","code":""},{"path":"/reference/f7Dialog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 dialog window — f7Dialog","text":"","code":"f7Dialog(   id = NULL,   title = NULL,   text,   type = c(\"alert\", \"confirm\", \"prompt\", \"login\"),   session = shiny::getDefaultReactiveDomain() )"},{"path":"/reference/f7Dialog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 dialog window — f7Dialog","text":"id Input associated alert. Works type one \"confirm\", \"prompt\" \"login\". title Dialog title text Dialog text. type Dialog type: c(\"alert\", \"confirm\", \"prompt\", \"login\"). session shiny session.","code":""},{"path":"/reference/f7Dialog.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 dialog window — f7Dialog","text":"","code":"library(shiny) library(shinyMobile)  app <- shinyApp(   ui = f7Page(     title = \"Dialogs\",     f7SingleLayout(       navbar = f7Navbar(title = \"f7Dialog\"),       f7Block(         f7Grid(           cols = 4,           f7Button(inputId = \"alert\", \"Alert\"),           f7Button(inputId = \"confirm\", \"Confirm\"),           f7Button(inputId = \"prompt\", \"Prompt\"),           f7Button(inputId = \"login\", \"Login\")         ),         f7Grid(           cols = 2,           uiOutput(\"prompt_res\"),           uiOutput(\"login_res\")         )       )     )   ),   server = function(input, output, session) {     observeEvent(input$alert, {       f7Dialog(         title = \"Dialog title\",         text = \"This is an alert dialog\"       )     })      observeEvent(input$confirm, {       f7Dialog(         id = \"comfirm_dialog\",         title = \"Dialog title\",         type = \"confirm\",         text = \"This is an alert dialog\"       )     })      observeEvent(input$comfirm_dialog, {       f7Toast(text = paste(\"Alert input is:\", input$comfirm_dialog))     })      observeEvent(input$prompt, {       f7Dialog(         id = \"prompt_dialog\",         title = \"Dialog title\",         type = \"prompt\",         text = \"This is a prompt dialog\"       )     })     output$prompt_res <- renderText({       req(input$prompt_dialog)       input$prompt_dialog     })      observeEvent(input$login, {       f7Dialog(         id = \"login_dialog\",         title = \"Dialog title\",         type = \"login\",         text = \"This is an login dialog\"       )     })      output$login_res <- renderUI({       req(input$login_dialog$user, input$login_dialog$password)       img(src = \"https://media2.giphy.com/media/12gfL8Xxrhv7C1fXiV/giphy.gif\")     })   } )  if (interactive() || identical(Sys.getenv(\"TESTTHAT\"), \"true\")) app"},{"path":"/reference/f7DownloadButton.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a download button — f7DownloadButton","title":"Create a download button — f7DownloadButton","text":"Use functions create download button; clicked, initiate browser download. filename contents specified corresponding shiny downloadHandler() defined server function.","code":""},{"path":"/reference/f7DownloadButton.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a download button — f7DownloadButton","text":"","code":"f7DownloadButton(outputId, label = \"Download\", class = NULL, ...)"},{"path":"/reference/f7DownloadButton.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a download button — f7DownloadButton","text":"outputId name output slot downloadHandler assigned . label label appear button. class Additional CSS classes apply tag, . ... arguments pass container tag function.","code":""},{"path":"/reference/f7DownloadButton.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a download button — f7DownloadButton","text":"","code":"if (interactive()) {  library(shiny)  library(shinyMobile)  ui = f7Page(   f7SingleLayout(     navbar = f7Navbar(title = \"File handling\"),     f7Block(f7DownloadButton(\"download\",\"Download!\"))   )  )   server = function(input, output, session) {    # Our dataset    data <- mtcars     output$download = downloadHandler(      filename = function() {        paste(\"data-\", Sys.Date(), \".csv\", sep=\"\")      },      content = function(file) {        write.csv(data, file)      }    )  }   shinyApp(ui, server) }"},{"path":"/reference/f7FabClose.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 FAB close — f7FabClose","title":"Framework7 FAB close — f7FabClose","text":"f7FabClose indicates current tag close f7Fabs.","code":""},{"path":"/reference/f7FabClose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 FAB close — f7FabClose","text":"","code":"f7FabClose(tag)"},{"path":"/reference/f7FabClose.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 FAB close — f7FabClose","text":"tag Target tag.","code":""},{"path":"/reference/f7File.html","id":null,"dir":"Reference","previous_headings":"","what":"File Upload Control — f7File","title":"File Upload Control — f7File","text":"Create file upload control can used upload one files.","code":""},{"path":"/reference/f7File.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"File Upload Control — f7File","text":"","code":"f7File(   inputId,   label,   multiple = FALSE,   accept = NULL,   width = NULL,   buttonLabel = \"Browse...\",   placeholder = \"No file selected\" )"},{"path":"/reference/f7File.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"File Upload Control — f7File","text":"inputId input slot used access value. label Display label control, NULL label. multiple Whether user allowed select upload multiple files . work older browsers, including Internet Explorer 9 earlier. accept character vector MIME types; gives browser hint kind files server expecting. width width input, e.g. 400px. buttonLabel label used button. Can text HTML tag object. placeholder text show file uploaded.","code":""},{"path":"/reference/f7File.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"File Upload Control — f7File","text":"","code":"if (interactive()) {   library(shiny)   library(shinyMobile)    ui <- f7Page(     f7SingleLayout(       navbar = f7Navbar(title = \"File handling\"),       f7Block(f7File(\"up\", \"Upload!\"))     )   )    server <- function(input, output) {     data <- reactive(input$up)     observe(print(data()))   }    shinyApp(ui, server) }"},{"path":"/reference/f7Flex.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 flex container — f7Flex","title":"Framework7 flex container — f7Flex","text":"f7Grid replacement","code":""},{"path":"/reference/f7Flex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 flex container — f7Flex","text":"","code":"f7Flex(...)"},{"path":"/reference/f7Flex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 flex container — f7Flex","text":"... Items.","code":""},{"path":"/reference/f7Flex.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Framework7 flex container — f7Flex","text":"David Granjon, dgranjon@ymail.com","code":""},{"path":"/reference/f7Float.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 float utility — f7Float","title":"Framework7 float utility — f7Float","text":"f7Float alignment utility items.","code":""},{"path":"/reference/f7Float.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 float utility — f7Float","text":"","code":"f7Float(tag, side = c(\"left\", \"right\"))"},{"path":"/reference/f7Float.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 float utility — f7Float","text":"tag Tag float. side Side float: \"left\" \"right\".","code":""},{"path":"/reference/f7Float.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Framework7 float utility — f7Float","text":"David Granjon, dgranjon@ymail.com","code":""},{"path":"/reference/f7Float.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 float utility — f7Float","text":"","code":"if(interactive()){  library(shiny)  library(shinyMobile)   shinyApp(    ui = f7Page(     title = \"Float\",     f7SingleLayout(      navbar = f7Navbar(title = \"f7Float\"),      f7Float(h1(\"Left\"), side = \"left\"),     f7Float(h1(\"Right\"), side = \"right\")     )    ),    server = function(input, output) {}  ) }"},{"path":"/reference/f7Gallery.html","id":null,"dir":"Reference","previous_headings":"","what":"Launch the shinyMobile Gallery — f7Gallery","title":"Launch the shinyMobile Gallery — f7Gallery","text":"gallery components available shinyMobile.","code":""},{"path":"/reference/f7Gallery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Launch the shinyMobile Gallery — f7Gallery","text":"","code":"f7Gallery()"},{"path":"/reference/f7Gallery.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Launch the shinyMobile Gallery — f7Gallery","text":"","code":"if (interactive()) {   f7Gallery()  }"},{"path":"/reference/f7Grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 grid container — f7Grid","title":"Framework7 grid container — f7Grid","text":"Grid container elements","code":""},{"path":"/reference/f7Grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 grid container — f7Grid","text":"","code":"f7Grid(..., cols, gap = TRUE, responsiveCl = NULL)"},{"path":"/reference/f7Grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 grid container — f7Grid","text":"... Row content. cols Columns number. Numeric 1 20. gap Whether display gap columns. TRUE default. responsiveCl Class responsive behavior. format must <SIZE-NCOLS> <medium-4>, <large-3>. SIZE must one c(\"xsmall\", \"small\", \"medium\", \"large\", \"xlarge\"). NCOLS 1 20.","code":""},{"path":"/reference/f7Grid.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Framework7 grid container — f7Grid","text":"David Granjon, dgranjon@ymail.com","code":""},{"path":"/reference/f7GroupInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 group input — f7GroupInput","title":"Framework7 group input — f7GroupInput","text":"Useful create f7Radio f7CheckboxGroup.","code":""},{"path":"/reference/f7GroupInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 group input — f7GroupInput","text":"","code":"f7GroupInput(type, inputId, label, choices, selected, position, style)"},{"path":"/reference/f7GroupInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 group input — f7GroupInput","text":"inputId Input id. label Input label choices List choices. Can simple vector named list list f7RadioChoice f7CheckboxChoice selected Selected element. NULL default. pass f7RadioChoice f7CheckboxChoice choices, selected must numeric value corresponding index element select. position Check mark side. \"left\" \"right\". style Input style. Inherit f7List options outline, inset, strong dividers.","code":""},{"path":"/reference/f7Icon.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 icons — f7Icon","title":"Framework7 icons — f7Icon","text":"Use Framework7 icons shiny applications, see complete list icons : https://framework7.io/icons/.","code":""},{"path":"/reference/f7Icon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 icons — f7Icon","text":"","code":"f7Icon(..., lib = NULL, color = NULL, style = NULL)"},{"path":"/reference/f7Icon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 icons — f7Icon","text":"... Icon name f7Badge. lib Library use: NULL, \"ios\" \"md\". Leave NULL default. Specify, md ios want hide/show icons specific devices. choose \"md\" sure include corresponding fonts provided shinyMobile. can get https://github.com/marella/material-icons/. color Icon color, . style CSS styles applied icon, example use font-size: 56px; bigger icon.","code":""},{"path":"/reference/f7Icon.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Framework7 icons — f7Icon","text":"David Granjon, dgranjon@ymail.com","code":""},{"path":"/reference/f7Icon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 icons — f7Icon","text":"","code":"if (interactive()) {   library(shiny)   library(shinyMobile)    shinyApp(     ui = f7Page(       title = \"Icons\",       f7SingleLayout(         navbar = f7Navbar(title = \"icons\"),         f7List(           f7ListItem(             title = tagList(               f7Icon(\"envelope\")             )           ),           f7ListItem(             title = tagList(               f7Icon(\"envelope_fill\", color = \"green\")             )           ),           f7ListItem(             title = f7Icon(\"house\", f7Badge(\"1\", color = \"red\"))           ),           f7ListItem(             title = f7Icon(\"home\", lib = \"md\"),             \"Only for material design\"           )         )       )     ),     server = function(input, output) {}   ) }"},{"path":"/reference/f7Item.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 body item — f7Item","title":"Framework7 body item — f7Item","text":"Similar  f7Tab f7SplitLayout.","code":""},{"path":"/reference/f7Item.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 body item — f7Item","text":"","code":"f7Item(..., tabName)"},{"path":"/reference/f7Item.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 body item — f7Item","text":"... Item content. tabName Item id. Must unique, without space punctuation symbols.","code":""},{"path":"/reference/f7Item.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Framework7 body item — f7Item","text":"David Granjon, dgranjon@ymail.com","code":""},{"path":"/reference/f7Items.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 item container — f7Items","title":"Framework7 item container — f7Items","text":"Build Framework7 wrapper f7Item","code":""},{"path":"/reference/f7Items.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 item container — f7Items","text":"","code":"f7Items(...)"},{"path":"/reference/f7Items.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 item container — f7Items","text":"... Slot wrapper f7Item.","code":""},{"path":"/reference/f7Items.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Framework7 item container — f7Items","text":"David Granjon, dgranjon@ymail.com","code":""},{"path":"/reference/f7Link.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 link — f7Link","title":"Framework7 link — f7Link","text":"Link point toward external content.","code":""},{"path":"/reference/f7Link.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 link — f7Link","text":"","code":"f7Link(label = NULL, href, icon = NULL, routable = FALSE)"},{"path":"/reference/f7Link.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 link — f7Link","text":"label Optional link text. href Link source, url. icon Link icon, . Must pass f7Icon. routable Whether make link handled framework 7 router. Default FALSE opens new page new tab.","code":""},{"path":"/reference/f7Link.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Framework7 link — f7Link","text":"David Granjon, dgranjon@ymail.com","code":""},{"path":"/reference/f7Link.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 link — f7Link","text":"","code":"if (interactive()) {   library(shiny)   library(shinyMobile)    shinyApp(     ui = f7Page(       title = \"Links\",       f7SingleLayout(         navbar = f7Navbar(title = \"f7Link\"),         f7Link(label = \"Google\", href = \"https://www.google.com\"),         f7Link(href = \"https://www.twitter.com\", icon = f7Icon(\"bolt_fill\"))       )     ),     server = function(input, output) {}   ) }"},{"path":"/reference/f7List.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a framework 7 list view — f7List","title":"Create a framework 7 list view — f7List","text":"Create framework 7 list view","code":""},{"path":"/reference/f7List.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a framework 7 list view — f7List","text":"","code":"f7List(   ...,   mode = NULL,   inset = FALSE,   outline = FALSE,   dividers = FALSE,   strong = FALSE,   id = NULL )"},{"path":"/reference/f7List.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a framework 7 list view — f7List","text":"... Slot f7ListGroup f7ListItem. mode List mode. NULL, \"simple\", \"links\", \"media\" \"contacts\". inset Whether display card border. FALSE default. outline Outline style. Default FALSE. dividers Dividers style. Default FALSE. strong Strong style. Default FALSE. id Optional id, can used target f7ListIndex.","code":""},{"path":"/reference/f7List.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a framework 7 list view — f7List","text":"","code":"library(shiny) library(shinyMobile)  app <- shinyApp(   ui = f7Page(     title = \"My app\",     f7TabLayout(       navbar = f7Navbar(title = \"f7List\"),        f7Tabs(         f7Tab(           title = \"Lists\",           tabName = \"list\",            # simple list           f7List(             mode = \"simple\",             lapply(1:3, function(j) tags$li(letters[j]))           ),            # list with complex items           f7List(             strong = TRUE,             outline = TRUE,             inset = TRUE,             lapply(1:3, function(j) {               f7ListItem(                 letters[j],                 media = f7Icon(\"alarm_fill\"),                 header = \"Header\",                 footer = \"Footer\"               )             })           ),            # list with complex items           f7List(             mode = \"media\",             lapply(1:3, function(j) {               f7ListItem(                 title = letters[j],                 subtitle = \"subtitle\",                 \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.             Nulla sagittis tellus ut turpis condimentum, ut dignissim             lacus tincidunt. Cras dolor metus, ultrices condimentum sodales             sit amet, pharetra sodales eros. Phasellus vel felis tellus.             Mauris rutrum ligula nec dapibus feugiat. In vel dui laoreet,             commodo augue id, pulvinar lacus.\",                 media = tags$img(                   src = paste0(                     \"https://cdn.framework7.io/placeholder/people-160x160-\", j, \".jpg\"                   )                 ),                 right = \"Right Text\"               )             })           ),            # list with links           f7List(             mode = \"links\",             lapply(1:3, function(j) {               tags$li(                 f7Link(label = letters[j], href = \"https://google.com\")               )             })           )         ),         f7Tab(           title = \"Group\",           tabName = \"groupedlists\",            # grouped lists           f7List(             id = \"mycontacts\",             mode = \"contacts\",             lapply(1:3, function(i) {               f7ListGroup(                 title = LETTERS[i],                 lapply(1:10, function(j) f7ListItem(letters[j]))               )             })           )         ),         f7Tab(           title = \"Other group\",           tabName = \"groupedlists2\",            # grouped lists           f7List(             id = \"myothercontacts\",             mode = \"contacts\",             lapply(4:6, function(i) {               f7ListGroup(                 title = LETTERS[i],                 lapply(10:20, function(j) f7ListItem(letters[j]))               )             })           )         )       )      )   ),   server = function(input, output) {     f7ListIndex(id = \"contacts\", target = \"#mycontacts\", label = TRUE)     f7ListIndex(id = \"othercontacts\", target = \"#myothercontacts\", label = TRUE)    } )  if (interactive() || identical(Sys.getenv(\"TESTTHAT\"), \"true\")) app"},{"path":"/reference/f7ListGroup.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a framework 7 group of contacts — f7ListGroup","title":"Create a framework 7 group of contacts — f7ListGroup","text":"Create framework 7 group contacts","code":""},{"path":"/reference/f7ListGroup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a framework 7 group of contacts — f7ListGroup","text":"","code":"f7ListGroup(..., title)"},{"path":"/reference/f7ListGroup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a framework 7 group of contacts — f7ListGroup","text":"... slot f7ListItem. title Group title.","code":""},{"path":"/reference/f7ListIndex.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Framework 7 list index — f7ListIndex","title":"Create a Framework 7 list index — f7ListIndex","text":"List index must attached existing list view.","code":""},{"path":"/reference/f7ListIndex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Framework 7 list index — f7ListIndex","text":"","code":"f7ListIndex(id, target, ..., session = shiny::getDefaultReactiveDomain())"},{"path":"/reference/f7ListIndex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Framework 7 list index — f7ListIndex","text":"id Unique id. target Related list element. CSS selector like .class, #id, ... ... options (see https://framework7.io/docs/list-index#list-index-parameters). session Shiny session object.","code":""},{"path":"/reference/f7ListIndex.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create a Framework 7 list index — f7ListIndex","text":"can also supply class target, advise use id avoid conflicts.","code":""},{"path":"/reference/f7ListIndex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Framework 7 list index — f7ListIndex","text":"","code":"library(shiny) library(shinyMobile)  app <- shinyApp(   ui = f7Page(     title = \"My app\",     f7TabLayout(       navbar = f7Navbar(title = \"f7List\"),        f7Tabs(         f7Tab(           title = \"Lists\",           tabName = \"list\",            # simple list           f7List(             mode = \"simple\",             lapply(1:3, function(j) tags$li(letters[j]))           ),            # list with complex items           f7List(             strong = TRUE,             outline = TRUE,             inset = TRUE,             lapply(1:3, function(j) {               f7ListItem(                 letters[j],                 media = f7Icon(\"alarm_fill\"),                 header = \"Header\",                 footer = \"Footer\"               )             })           ),            # list with complex items           f7List(             mode = \"media\",             lapply(1:3, function(j) {               f7ListItem(                 title = letters[j],                 subtitle = \"subtitle\",                 \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.             Nulla sagittis tellus ut turpis condimentum, ut dignissim             lacus tincidunt. Cras dolor metus, ultrices condimentum sodales             sit amet, pharetra sodales eros. Phasellus vel felis tellus.             Mauris rutrum ligula nec dapibus feugiat. In vel dui laoreet,             commodo augue id, pulvinar lacus.\",                 media = tags$img(                   src = paste0(                     \"https://cdn.framework7.io/placeholder/people-160x160-\", j, \".jpg\"                   )                 ),                 right = \"Right Text\"               )             })           ),            # list with links           f7List(             mode = \"links\",             lapply(1:3, function(j) {               tags$li(                 f7Link(label = letters[j], href = \"https://google.com\")               )             })           )         ),         f7Tab(           title = \"Group\",           tabName = \"groupedlists\",            # grouped lists           f7List(             id = \"mycontacts\",             mode = \"contacts\",             lapply(1:3, function(i) {               f7ListGroup(                 title = LETTERS[i],                 lapply(1:10, function(j) f7ListItem(letters[j]))               )             })           )         ),         f7Tab(           title = \"Other group\",           tabName = \"groupedlists2\",            # grouped lists           f7List(             id = \"myothercontacts\",             mode = \"contacts\",             lapply(4:6, function(i) {               f7ListGroup(                 title = LETTERS[i],                 lapply(10:20, function(j) f7ListItem(letters[j]))               )             })           )         )       )      )   ),   server = function(input, output) {     f7ListIndex(id = \"contacts\", target = \"#mycontacts\", label = TRUE)     f7ListIndex(id = \"othercontacts\", target = \"#myothercontacts\", label = TRUE)    } )  if (interactive() || identical(Sys.getenv(\"TESTTHAT\"), \"true\")) app"},{"path":"/reference/f7ListItem.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Framework 7 contact item — f7ListItem","title":"Create a Framework 7 contact item — f7ListItem","text":"Create Framework 7 contact item","code":""},{"path":"/reference/f7ListItem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Framework 7 contact item — f7ListItem","text":"","code":"f7ListItem(   ...,   id = NULL,   title = NULL,   subtitle = NULL,   header = NULL,   footer = NULL,   href = NULL,   media = NULL,   right = NULL,   routable = FALSE )"},{"path":"/reference/f7ListItem.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Framework 7 contact item — f7ListItem","text":"... Item text. id Optional id item. title Item title. subtitle Item subtitle. work f7List mode media. header Item header. use f7List mode NULL. footer Item footer. use f7List mode NULL. href Item external link. media Expect f7Icon img. right Right content . routable Works href NULL. Default FALSE. TRUE, list item may point another page. See f7MultiLayout. Can also used combination href = \"#\" make items appear links, actually navigate anywhere, useful custom click events.","code":""},{"path":"/reference/f7Margin.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 margin utility — f7Margin","title":"Framework7 margin utility — f7Margin","text":"f7Margin adds margin given tag.","code":""},{"path":"/reference/f7Margin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 margin utility — f7Margin","text":"","code":"f7Margin(tag, side = NULL)"},{"path":"/reference/f7Margin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 margin utility — f7Margin","text":"tag Tag apply margin. side margin side: \"left\", \"right\", \"top\", \"bottom\", \"vertical\" (top bottom), \"horizontal\" (left right). Leave NULL apply sides.","code":""},{"path":"/reference/f7Margin.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Framework7 margin utility — f7Margin","text":"David Granjon, dgranjon@ymail.com","code":""},{"path":"/reference/f7Margin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 margin utility — f7Margin","text":"","code":"if(interactive()){  library(shiny)  library(shinyMobile)   cardTag <- f7Card(   title = \"Card header\",   \"This is a simple card with plain text,   but cards can also contain their own header,   footer, list view, image, or any other element.\",   footer = tagList(     f7Button(color = \"blue\", label = \"My button\", href = \"https://www.google.com\"),     f7Badge(\"Badge\", color = \"green\")   )  )   shinyApp(    ui = f7Page(     title = \"Margins\",     f7SingleLayout(      navbar = f7Navbar(title = \"f7Margin\"),      f7Margin(cardTag),      cardTag     )    ),    server = function(input, output) {}  ) }"},{"path":"/reference/f7MultiLayout.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 multi pages layout — f7MultiLayout","title":"Framework7 multi pages layout — f7MultiLayout","text":"Experimental multi pages layout. used brochure R package. See corresponding pkgdown article.","code":""},{"path":"/reference/f7MultiLayout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 multi pages layout — f7MultiLayout","text":"","code":"f7MultiLayout(   ...,   toolbar = NULL,   title = NULL,   options = f7DefaultOptions(),   allowPWA = FALSE,   basepath = \"/\" )"},{"path":"/reference/f7MultiLayout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 multi pages layout — f7MultiLayout","text":"... Pages. Must element like shiny::tags$div(class = \"page\", ...) toolbar Contrary f7SingleLayout layout, multi page layout can common toolbar pages. See https://framework7.io/docs/toolbar-tabbar#common-toolbar. can pass f7Toolbar slot f7Tabs , pass toolbar different pages elements. title Page title. options shinyMobile configuration. See f7DefaultOptions https://framework7.io/docs/app.html. notable options. General options: theme: App skin: \"ios\", \"md\", \"auto\". dark: Dark layout. TRUE, FALSE, \"auto\". default \"auto\". set \"auto\" automatically enables dark theme based user system color scheme preference. skeletonsOnLoad: Whether display skeletons load. preloading effect. compatible preloader. preloader: Loading spinner. compatible skeletonsOnLoad. filled: Whether fill f7Navbar f7Toolbar current selected color. FALSE default. color: Color theme: See https://framework7.io/docs/color-themes.html. Expect name like blue, red hex code like #FF0000. NULL, use default color. name specified must accepted either col2hex getF7Colors (valid Framework 7 color names). pullToRefresh: Whether active pull refresh feature. Default FALSE. See https://framework7.io/docs/pull--refresh#examples. iosTranslucentBars: Enable translucent effect (blur background) navigation bars iOS theme (iOS devices). FALSE default. Touch module options https://framework7.io/docs/app#param-touch: touchClicksDistanceThreshold: Distance threshold (px) prevent short swipes. tap/move distance larger value \"click\" triggered. tapHold: triggers (enabled) sustained, complete touch event. default enabled. See f7TapHold usage. tapHoldDelay: Determines long (ms) user must hold tap taphold event fired target element. Default 750 ms. tapHoldPreventClicks: enabled (default), click event fired tap hold event. iosTouchRipple: Default FALSE. Enables touch ripple effect iOS theme. mdTouchRipple: Default TRUE. Enables touch ripple effect MD theme. Navbar options https://framework7.io/docs/navbar#navbar-app-parameters: iosCenterTitle: Default TRUE. enabled try position title center iOS theme. Sometime (custom design) may needed. hideOnPageScroll: Default FALSE. hide Navbars page scroll. Toolbar options https://framework7.io/docs/toolbar-tabbar#toolbar-app-parameters: hideOnPageScroll: Default FALSE. hide tabs page scroll. case, must follow structure provided function arguments. allowPWA Whether include PWA dependencies. Default FALSE. basepath Useful app deployed server like https://user.shinyapps.io/base_path.","code":""},{"path":"/reference/f7Next.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 next button — f7Next","title":"Framework7 next button — f7Next","text":"f7Next button go next f7Tabs.","code":""},{"path":"/reference/f7Next.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 next button — f7Next","text":"","code":"f7Next(targetId)"},{"path":"/reference/f7Next.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 next button — f7Next","text":"targetId f7Tabs id.","code":""},{"path":"/reference/f7Notif.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 notification — f7Notif","title":"Framework7 notification — f7Notif","text":"Notification title, text, icon .","code":""},{"path":"/reference/f7Notif.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 notification — f7Notif","text":"","code":"f7Notif(   text,   icon = NULL,   title = NULL,   titleRightText = NULL,   subtitle = NULL,   closeTimeout = 5000,   closeButton = FALSE,   closeOnClick = TRUE,   swipeToClose = TRUE,   ...,   session = shiny::getDefaultReactiveDomain() )"},{"path":"/reference/f7Notif.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 notification — f7Notif","text":"text Notification content. icon Notification icon. title Notification title. titleRightText Notification right text. subtitle Notification subtitle closeTimeout Time notification closes. closeButton Whether display close button. FALSE default. closeOnClick Whether close notification click. TRUE default. swipeToClose enabled, notification can closed swipe gesture. ... options. See https://framework7.io/docs/notification.html. session shiny session.","code":""},{"path":"/reference/f7Notif.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 notification — f7Notif","text":"","code":"if (interactive()) {   library(shiny)   library(shinyMobile)   shinyApp(     ui = f7Page(       title = \"My app\",       f7SingleLayout(         navbar = f7Navbar(title = \"f7Notif\"),         f7Block(f7Button(inputId = \"goButton\", \"Go!\"))       )     ),     server = function(input, output, session) {       observeEvent(input$goButton, {         f7Notif(           text = \"test\",           icon = f7Icon(\"bolt_fill\"),           title = \"Notification\",           subtitle = \"A subtitle\",           titleRightText = \"now\"         )       })     }   ) }"},{"path":"/reference/f7Padding.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 padding utility — f7Padding","title":"Framework7 padding utility — f7Padding","text":"f7Padding adds padding given tag.","code":""},{"path":"/reference/f7Padding.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 padding utility — f7Padding","text":"","code":"f7Padding(tag, side = NULL)"},{"path":"/reference/f7Padding.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 padding utility — f7Padding","text":"tag Tag apply padding. side padding side: \"left\", \"right\", \"top\", \"bottom\", \"vertical\" (top bottom), \"horizontal\" (left right). Leave NULL apply sides.","code":""},{"path":"/reference/f7Padding.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Framework7 padding utility — f7Padding","text":"David Granjon, dgranjon@ymail.com","code":""},{"path":"/reference/f7Padding.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 padding utility — f7Padding","text":"","code":"if(interactive()){  library(shiny)  library(shinyMobile)   cardTag <- f7Card(   title = \"Card header\",   f7Padding(    p(\"The padding is applied here.\")   ),   footer = tagList(     f7Button(color = \"blue\", label = \"My button\", href = \"https://www.google.com\"),     f7Badge(\"Badge\", color = \"green\")   )  )   shinyApp(    ui = f7Page(     title = \"Padding\",     f7SingleLayout(navbar = f7Navbar(title = \"f7Padding\"), cardTag)    ),    server = function(input, output) {}  ) }"},{"path":"/reference/f7Page.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 page container — f7Page","title":"Framework7 page container — f7Page","text":"f7Page main app container.","code":""},{"path":"/reference/f7Page.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 page container — f7Page","text":"","code":"f7Page(..., title = NULL, options = f7DefaultOptions(), allowPWA = FALSE)"},{"path":"/reference/f7Page.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 page container — f7Page","text":"... Slot shinyMobile skeleton elements: f7SingleLayout, f7TabLayout, f7SplitLayout. title Page title. options shinyMobile configuration. See f7DefaultOptions https://framework7.io/docs/app.html. notable options. General options: theme: App skin: \"ios\", \"md\", \"auto\". dark: Dark layout. TRUE, FALSE, \"auto\". default \"auto\". set \"auto\" automatically enables dark theme based user system color scheme preference. skeletonsOnLoad: Whether display skeletons load. preloading effect. compatible preloader. preloader: Loading spinner. compatible skeletonsOnLoad. filled: Whether fill f7Navbar f7Toolbar current selected color. FALSE default. color: Color theme: See https://framework7.io/docs/color-themes.html. Expect name like blue, red hex code like #FF0000. NULL, use default color. name specified must accepted either col2hex getF7Colors (valid Framework 7 color names). pullToRefresh: Whether active pull refresh feature. Default FALSE. See https://framework7.io/docs/pull--refresh#examples. iosTranslucentBars: Enable translucent effect (blur background) navigation bars iOS theme (iOS devices). FALSE default. Touch module options https://framework7.io/docs/app#param-touch: touchClicksDistanceThreshold: Distance threshold (px) prevent short swipes. tap/move distance larger value \"click\" triggered. tapHold: triggers (enabled) sustained, complete touch event. default enabled. See f7TapHold usage. tapHoldDelay: Determines long (ms) user must hold tap taphold event fired target element. Default 750 ms. tapHoldPreventClicks: enabled (default), click event fired tap hold event. iosTouchRipple: Default FALSE. Enables touch ripple effect iOS theme. mdTouchRipple: Default TRUE. Enables touch ripple effect MD theme. Navbar options https://framework7.io/docs/navbar#navbar-app-parameters: iosCenterTitle: Default TRUE. enabled try position title center iOS theme. Sometime (custom design) may needed. hideOnPageScroll: Default FALSE. hide Navbars page scroll. Toolbar options https://framework7.io/docs/toolbar-tabbar#toolbar-app-parameters: hideOnPageScroll: Default FALSE. hide tabs page scroll. case, must follow structure provided function arguments. allowPWA Whether include PWA dependencies. Default FALSE.","code":""},{"path":"/reference/f7Page.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Framework7 page container — f7Page","text":"David Granjon, dgranjon@ymail.com","code":""},{"path":"/reference/f7PhotoBrowser.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 photo browser — f7PhotoBrowser","title":"Framework7 photo browser — f7PhotoBrowser","text":"nice photo browser.","code":""},{"path":"/reference/f7PhotoBrowser.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 photo browser — f7PhotoBrowser","text":"","code":"f7PhotoBrowser(   photos,   theme = c(\"light\", \"dark\"),   type = c(\"popup\", \"standalone\", \"page\"),   ...,   id = NULL,   session = shiny::getDefaultReactiveDomain() )"},{"path":"/reference/f7PhotoBrowser.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 photo browser — f7PhotoBrowser","text":"photos List photos theme Browser theme: choose either light dark. type Browser type: choose among c(\"popup\", \"standalone\", \"page\"). ... options pass photo browser. See https://framework7.io/docs/photo-browser#photo-browser-parameters details. id Unique id. Useful leverage updateF7Entity server. session Shiny session object.","code":""},{"path":"/reference/f7PhotoBrowser.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 photo browser — f7PhotoBrowser","text":"","code":"library(shiny) library(shinyMobile)  app <- shinyApp(   ui = f7Page(     title = \"f7PhotoBrowser\",     f7SingleLayout(       navbar = f7Navbar(title = \"f7PhotoBrowser\"),       f7Block(         f7Button(inputId = \"togglePhoto\", \"Open photo\")       )     )   ),   server = function(input, output, session) {     observeEvent(input$togglePhoto, {       f7PhotoBrowser(         id = \"photobrowser1\",         theme = \"dark\",         type = \"page\",         photos = list(           list(url = \"https://cdn.framework7.io/placeholder/sports-1024x1024-1.jpg\"),           list(url = \"https://cdn.framework7.io/placeholder/sports-1024x1024-2.jpg\"),           list(url = \"https://cdn.framework7.io/placeholder/sports-1024x1024-3.jpg\",                caption = \"Me cycling\")         ),         thumbs = c(           \"https://cdn.framework7.io/placeholder/sports-1024x1024-1.jpg\",           \"https://cdn.framework7.io/placeholder/sports-1024x1024-2.jpg\",           \"https://cdn.framework7.io/placeholder/sports-1024x1024-3.jpg\"         )       )     })   } )  if (interactive() || identical(Sys.getenv(\"TESTTHAT\"), \"true\")) app"},{"path":"/reference/f7Popup.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 popup — f7Popup","title":"Framework7 popup — f7Popup","text":"f7Popup creates popup window UI content pops App's main content. Popup overlays part called \"Temporary Views\".","code":""},{"path":"/reference/f7Popup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 popup — f7Popup","text":"","code":"f7Popup(   ...,   id,   title = NULL,   backdrop = TRUE,   closeByBackdropClick = TRUE,   closeOnEscape = FALSE,   animate = TRUE,   swipeToClose = FALSE,   fullsize = FALSE,   closeButton = TRUE,   push = TRUE,   page = FALSE,   session = shiny::getDefaultReactiveDomain() )"},{"path":"/reference/f7Popup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 popup — f7Popup","text":"... UI elements body popup window. id Popup unique id. Useful want access popup state. input$<id> TRUE popup opened inversely. title Title popup window, use NULL title. backdrop Enables Popup backdrop (dark semi transparent layer behind). Default TRUE. closeByBackdropClick enabled, popup closed backdrop click. Default TRUE. closeOnEscape enabled, popup closed ESC keyboard key press. Default FALSE. animate Whether Popup opened/closed animation . Default TRUE. swipeToClose Whether Popup can closed swipe gesture. Can true allow close popup swipes top bottom. Default FALSE. fullsize Open popup full width . Default FALSE. closeButton Add button easily close popup. Default TRUE. push Push effect. Default TRUE. page Allow content scrollable, page. Default FALSE. session Shiny session object.","code":""},{"path":"/reference/f7Popup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 popup — f7Popup","text":"","code":"library(shiny) library(shinyMobile)  app <- shinyApp(   ui = f7Page(     title = \"Popup\",     f7SingleLayout(       navbar = f7Navbar(         title = \"f7Popup\"       ),       f7Block(f7Button(\"toggle1\", \"Toggle Popup\")),       br(),       f7Block(f7Button(\"toggle2\", \"Toggle Page Popup\"))     )   ),   server = function(input, output, session) {      output$res1 <- renderPrint(input$text)     output$res2 <- renderPrint(input$text2)      observeEvent(input$toggle1, {       f7Popup(         id = \"popup1\",         title = \"My first popup\",         f7Text(           \"text1\", \"Popup content\",           \"This is my first popup ever, I swear!\"         ),         verbatimTextOutput(\"res1\")       )     })      observeEvent(input$toggle2, {       f7Popup(         id = \"popup2\",         title = \"My first popup\",         page = TRUE,         f7Text(           \"text2\", \"Popup content\",           \"Look at me, I can scroll!\"         ),         verbatimTextOutput(\"res2\"),         p(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse             hendrerit magna non sem iaculis, ac rhoncus est pulvinar. Interdum et             malesuada fames ac ante ipsum primis in faucibus. In sagittis vel lacus             ac bibendum. Maecenas mollis, diam nec fermentum sollicitudin, massa             lectus ullamcorper orci, in laoreet lectus quam nec lacus.             Nulla sollicitudin imperdiet metus, quis mollis justo finibus varius.             In mattis malesuada enim in tincidunt. Nulla vehicula dui lacus,             iaculis condimentum dui dapibus ac. Cras elit nunc, auctor vestibulum             odio id, iaculis posuere arcu. Mauris dignissim id lectus sit amet             vestibulum. Nam rutrum sit amet augue vel interdum. Donec sed orci vitae             eros eleifend posuere vitae id nibh. Donec faucibus erat in placerat             feugiat. Sed sodales facilisis eros, porta viverra purus pretium eu.             Morbi vehicula metus lacus, id commodo mauris posuere nec. Vivamus             ornare et lacus et lobortis. Etiam tristique elit id eros ornare,             vel faucibus mauris hendrerit. Nulla elit nulla, consequat sit amet             neque et, ultrices elementum diam. Etiam dignissim elit a arcu pulvinar,             ut dapibus elit maximus. Mauris ultricies nulla in mauris laoreet, at             lacinia lorem maximus. Nulla sed enim diam. In ac felis dignissim,             euismod augue nec, tempus augue. Maecenas eget aliquam mi.             In tincidunt massa a velit suscipit, ac dapibus mi laoreet. Vestibulum             lacinia nulla lorem, nec blandit quam sollicitudin at. Pellentesque             in vehicula lacus. Etiam vitae lectus malesuada, hendrerit mauris eu,             placerat elit. Mauris vehicula dictum pharetra. Etiam interdum vehicula             urna, ac blandit lectus posuere id. Nullam facilisis tincidunt sem et             pretium. Praesent pulvinar feugiat augue, quis pretium nunc vestibulum a.             Morbi id eros eget lectus placerat placerat. Morbi dapibus viverra             orci nec pellentesque. Vestibulum mollis gravida sem, quis tincidunt             sem maximus gravida. Nam id egestas augue, sit amet egestas orci. Duis             porttitor lectus sit amet efficitur auctor. Quisque dui ante, eleifend             eget nibh a, tincidunt interdum nisi. Integer varius tempor erat, in             commodo neque elementum ut. Maecenas eu lorem ultrices, posuere neque ac,             aliquam ante. Maecenas eu volutpat arcu. Morbi hendrerit sem sed vehicula             sodales. Quisque ultrices massa erat, vel accumsan risus vehicula eu.             Donec laoreet aliquet est, a consequat odio viverra lacinia. Suspendisse             id iaculis risus. Vestibulum posuere dignissim lacus quis ornare. Nam             dapibus efficitur neque sed tristique.\"         )       )     })      observeEvent(input$popup1, {       popupStatus <- if (input$popup1) \"opened\" else \"closed\"        f7Toast(         position = \"top\",         text = paste(\"Popup1 is\", popupStatus)       )     })   } )  if (interactive() || identical(Sys.getenv(\"TESTTHAT\"), \"true\")) app"},{"path":"/reference/f7Row.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 row container — f7Row","title":"Framework7 row container — f7Row","text":"f7Grid replacement","code":""},{"path":"/reference/f7Row.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 row container — f7Row","text":"","code":"f7Row(..., gap = TRUE)"},{"path":"/reference/f7Row.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 row container — f7Row","text":"... Row content. gap Whether display gap columns. TRUE default.","code":""},{"path":"/reference/f7Row.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Framework7 row container — f7Row","text":"David Granjon, dgranjon@ymail.com","code":""},{"path":"/reference/f7Shadow.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 shadow effect — f7Shadow","title":"Framework7 shadow effect — f7Shadow","text":". Creates shadow effect apply UI elements like f7Card.","code":""},{"path":"/reference/f7Shadow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 shadow effect — f7Shadow","text":"","code":"f7Shadow(tag, intensity, hover = FALSE, pressed = FALSE)"},{"path":"/reference/f7Shadow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 shadow effect — f7Shadow","text":"tag Tag apply shadow . intensity Shadow intensity. Numeric 1 24. 24 highest elevation. hover Whether display shadow hover. FALSE default. pressed Whether display shadow click. FALSE default.","code":""},{"path":"/reference/f7SingleLayout.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 single layout — f7SingleLayout","title":"Framework7 single layout — f7SingleLayout","text":"f7SingleLayout provides simple page layout.","code":""},{"path":"/reference/f7SingleLayout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 single layout — f7SingleLayout","text":"","code":"f7SingleLayout(..., navbar, toolbar = NULL, panels = NULL)"},{"path":"/reference/f7SingleLayout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 single layout — f7SingleLayout","text":"... Content. navbar Slot f7Navbar. toolbar Slot f7Toolbar. panels Slot f7Panel. Wrap tagList multiple panels.","code":""},{"path":"/reference/f7SingleLayout.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Framework7 single layout — f7SingleLayout","text":"David Granjon, dgranjon@ymail.com","code":""},{"path":"/reference/f7SingleLayout.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 single layout — f7SingleLayout","text":"","code":"if (interactive()) {   library(shiny)   library(shinyMobile)   shinyApp(     ui = f7Page(       title = \"Single layout\",       f7SingleLayout(         navbar = f7Navbar(           title = \"Single Layout\"         ),         toolbar = f7Toolbar(           position = \"bottom\",           f7Link(label = \"Link 1\", href = \"https://www.google.com\"),           f7Link(label = \"Link 2\", href = \"https://www.google.com\")         ),         # main content         f7Card(           title = \"Card header\",           f7Slider(\"obs\", \"Number of observations\", 0, 1000, 500),           plotOutput(\"distPlot\"),           footer = tagList(             f7Button(               color = \"blue\",               label = \"My button\",               href = \"https://www.google.com\"             ),             f7Badge(\"Badge\", color = \"green\")           )         )       )     ),     server = function(input, output) {       output$distPlot <- renderPlot({         dist <- rnorm(input$obs)         hist(dist)       })     }   ) }"},{"path":"/reference/f7Skeleton.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework 7 skeleton effect — f7Skeleton","title":"Framework 7 skeleton effect — f7Skeleton","text":"Nice loading overlay UI elements. can also set skeletonsOnLoad TRUE app main options (see example) show skeletons load.","code":""},{"path":"/reference/f7Skeleton.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework 7 skeleton effect — f7Skeleton","text":"","code":"f7Skeleton(   target,   effect = c(\"fade\", \"blink\", \"pulse\"),   duration = NULL,   session = shiny::getDefaultReactiveDomain() )"},{"path":"/reference/f7Skeleton.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework 7 skeleton effect — f7Skeleton","text":"target CSS selector apply effect. general, apply effect wrapper card, nested elements receive skeleton. effect Choose \"fade\", \"blink\" \"pulse\". duration Effect duration. NULL default. know exactly much time time consuming output takes render, can pass explicit duration. cases, leave NULL. session Shiny session object.","code":""},{"path":"/reference/f7Skeleton.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Framework 7 skeleton effect — f7Skeleton","text":"function expected called observeEvent, may also increase observer priority (see example).","code":""},{"path":"/reference/f7Skeleton.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework 7 skeleton effect — f7Skeleton","text":"","code":"if (interactive()) {   library(shiny)   library(shinyMobile)    shinyApp(     ui = f7Page(       title = \"Skeletons\",       options = list(skeletonsOnLoad = TRUE),       f7SingleLayout(         navbar = f7Navbar(title = \"f7Skeleton\"),         f7Block(           f7Button(\"update\", \"Update card\")         ),         f7Card(           title = \"Card header\",           textOutput(\"test\"),         ),         f7List(           f7ListItem(             href = \"https://www.google.com\",             title = \"Item 1\"           ),           f7ListItem(             href = \"https://www.google.com\",             title = \"Item 2\"           )         )       )     ),     server = function(input, output, session) {       txt <- eventReactive(input$update,         {           Sys.sleep(3)           \"This is a simple card with plain text,         but cards can also contain their own header,         footer, list view, image, or any other element.\"         },         ignoreNULL = FALSE       )       output$test <- renderText(txt())       observeEvent(input$update,         {           f7Skeleton(\".card\", \"fade\")         },         priority = 1000       )     }   ) }"},{"path":"/reference/f7SocialCard.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 social card — f7SocialCard","title":"Framework7 social card — f7SocialCard","text":". f7SocialCard special card social content.","code":""},{"path":"/reference/f7SocialCard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 social card — f7SocialCard","text":"","code":"f7SocialCard(..., image = NULL, author = NULL, date = NULL, footer = NULL)"},{"path":"/reference/f7SocialCard.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 social card — f7SocialCard","text":"... Card content. image Author img. author Author. date Date. footer Footer content, . Must wrapped tagList.","code":""},{"path":"/reference/f7SplitLayout.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 split layout — f7SplitLayout","title":"Framework7 split layout — f7SplitLayout","text":"modified version f7SingleLayout. intended used tablets.","code":""},{"path":"/reference/f7SplitLayout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 split layout — f7SplitLayout","text":"","code":"f7SplitLayout(..., navbar, sidebar, toolbar = NULL, panel = NULL)"},{"path":"/reference/f7SplitLayout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 split layout — f7SplitLayout","text":"... Content. navbar Slot f7Navbar. expect following: f7Navbar(title = \"Navbar\", leftPanel = TRUE) sidebar Slot f7Panel. Particularly expect following: f7Panel(title = \"Sidebar\", side = \"left\", theme = \"light\", \"Blabla\", effect = \"reveal\"). minimal app width (1024 px) sidebar becomes always visible. can override behavior setting options = list(visibleBreakpoint = 1024) desired width f7Panel. toolbar Slot f7Toolbar. panel Slot f7Panel. Expect right panel, instance: f7Panel(title = \"Right Panel\", side = \"right\", theme = \"light\", \"Blabla\", effect = \"cover\")","code":""},{"path":"/reference/f7SplitLayout.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Framework7 split layout — f7SplitLayout","text":"David Granjon, dgranjon@ymail.com","code":""},{"path":"/reference/f7SplitLayout.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 split layout — f7SplitLayout","text":"","code":"library(shiny) library(ggplot2) library(shinyMobile) library(apexcharter) library(thematic)  fruits <- data.frame(   name = c(\"Apples\", \"Oranges\", \"Bananas\", \"Berries\"),   value = c(44, 55, 67, 83) )  thematic_shiny(font = \"auto\")  new_mtcars <- reshape(   data = head(mtcars),   idvar = \"model\",   varying = list(c(\"drat\", \"wt\")),   times = c(\"drat\", \"wt\"),   direction = \"long\",   v.names = \"value\",   drop = c(\"mpg\", \"cyl\", \"hp\", \"dist\", \"qsec\", \"vs\", \"am\", \"gear\", \"carb\") )  app <- shinyApp(   ui = f7Page(     title = \"Split layout\",     options = list(       dark = FALSE     ),     f7SplitLayout(       sidebar = f7Panel(         title = \"Sidebar\",         side = \"left\",         effect = \"push\",         options = list(           visibleBreakpoint = 1024         ),         f7PanelMenu(           id = \"menu\",           strong = TRUE,           f7PanelItem(             tabName = \"tab1\",             title = \"Tab 1\",             icon = f7Icon(\"equal_circle\"),             active = TRUE           ),           f7PanelItem(             tabName = \"tab2\",             title = \"Tab 2\",             icon = f7Icon(\"equal_circle\")           ),           f7PanelItem(             tabName = \"tab3\",             title = \"Tab 3\",             icon = f7Icon(\"equal_circle\")           )         ),         uiOutput(\"selected_tab\")       ),       panel = f7Panel(         side = \"right\",         effect = \"floating\",         \"Blablabla\"       ),       navbar = f7Navbar(         title = \"Split Layout\",         hairline = FALSE,         leftPanel = TRUE,         rightPanel = TRUE       ),       toolbar = f7Toolbar(         position = \"bottom\",         f7Link(label = \"Link 1\", href = \"https://www.google.com\"),         f7Link(label = \"Link 2\", href = \"https://www.google.com\")       ),       # main content       f7Items(         f7Item(           tabName = \"tab1\",           f7Button(\"toggleSheet\", \"Plot parameters\"),           f7Sheet(             id = \"sheet1\",             label = \"Plot Parameters\",             orientation = \"bottom\",             swipeToClose = TRUE,             backdrop = TRUE,             f7Slider(               \"obs\",               \"Number of observations:\",               min = 0, max = 1000,               value = 500             )           ),           br(),           plotOutput(\"distPlot\")         ),         f7Item(           tabName = \"tab2\",           apexchartOutput(\"radar\")         ),         f7Item(           tabName = \"tab3\",           f7Toggle(             inputId = \"plot_show\",             label = \"Show Plot?\",             checked = TRUE           ),           apexchartOutput(\"multi_radial\")         )       )     )   ),   server = function(input, output, session) {     observeEvent(input$toggleSheet, {       updateF7Sheet(id = \"sheet1\")     })      observeEvent(input$obs, {       if (input$obs < 500) {         f7Notif(           text = paste0(             \"The slider value is only \", input$obs, \". Please             increase it\"           ),           icon = f7Icon(\"bolt_fill\"),           title = \"Alert\",           titleRightText = Sys.Date()         )       }     })       output$radar <- renderApexchart({       apex(         data = new_mtcars,         type = \"radar\",         mapping = aes(           x = model,           y = value,           group = time         )       )     })      output$selected_tab <- renderUI({       HTML(paste0(\"Currently selected tab: \", strong(input$menu)))     })      output$distPlot <- renderPlot({       dist <- rnorm(input$obs)       hist(dist)     })      output$multi_radial <- renderApexchart({       if (input$plot_show) {         apex(data = fruits, type = \"radialBar\", mapping = aes(x = name, y = value))       }     })   } )  if (interactive() || identical(Sys.getenv(\"TESTTHAT\"), \"true\")) app"},{"path":"/reference/f7SubNavbar.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 sub navbar — f7SubNavbar","title":"Framework7 sub navbar — f7SubNavbar","text":"f7SubNavbar creates nested navbar component f7Navbar.","code":""},{"path":"/reference/f7SubNavbar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 sub navbar — f7SubNavbar","text":"","code":"f7SubNavbar(...)"},{"path":"/reference/f7SubNavbar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 sub navbar — f7SubNavbar","text":"... elements.","code":""},{"path":"/reference/f7SubNavbar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 sub navbar — f7SubNavbar","text":"","code":"library(shiny) library(shinyMobile)  app <- shinyApp(   ui = f7Page(     title = \"Sub Navbar\",     options = list(       dark = FALSE,       navbar = list(         hideOnPageScroll = TRUE,         mdCenterTitle = TRUE       )     ),     f7SingleLayout(       panels = tagList(         f7Panel(           title = \"Left Panel\",           side = \"left\",           f7Block(\"Blabla\"),           effect = \"cover\"         ),         f7Panel(           title = \"Right Panel\",           side = \"right\",           f7Block(\"Blabla\"),           effect = \"cover\"         )       ),       navbar = f7Navbar(         subNavbar = f7SubNavbar(           f7Button(label = \"My button\"),           f7Button(label = \"My button\"),           f7Button(label = \"My button\")         ),         title = \"Title\",         leftPanel = TRUE,         rightPanel = TRUE       ),       f7Block(f7Button(inputId = \"toggle\", \"Toggle navbar\")),       f7Block(         lapply(1:20, f7Card)       )     )   ),   server = function(input, output, session) {     observeEvent(input$toggle, {       updateF7Navbar()     })   } )  if (interactive() || identical(Sys.getenv(\"TESTTHAT\"), \"true\")) app"},{"path":"/reference/f7Tab.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Framework7 tab item — f7Tab","title":"Create a Framework7 tab item — f7Tab","text":"Build Framework7 tab item","code":""},{"path":"/reference/f7Tab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Framework7 tab item — f7Tab","text":"","code":"f7Tab(..., title = NULL, tabName, icon = NULL, active = FALSE, hidden = FALSE)"},{"path":"/reference/f7Tab.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Framework7 tab item — f7Tab","text":"... Item content. title Tab title (name). tabName Item id. Must unique, without space punctuation symbols. icon Item icon. Expect f7Icon function suitable lib argument (either md ios NULL native f7 icons). active Whether tab active start. select multiple tabs, first one set active. hidden Whether hide tab. useful want add invisible tabs (appear tabbar) can still navigate updateF7Tabs.","code":""},{"path":"/reference/f7Tab.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a Framework7 tab item — f7Tab","text":"David Granjon, dgranjon@ymail.com","code":""},{"path":"/reference/f7TabLayout.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 tab layout — f7TabLayout","title":"Framework7 tab layout — f7TabLayout","text":"f7TabLayout create single page app multiple tabs, giving illusion multi pages experience.","code":""},{"path":"/reference/f7TabLayout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 tab layout — f7TabLayout","text":"","code":"f7TabLayout(..., navbar, messagebar = NULL, panels = NULL)"},{"path":"/reference/f7TabLayout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 tab layout — f7TabLayout","text":"... Slot f7Tabs. navbar Slot f7Navbar. messagebar Slot f7MessageBar. panels Slot f7Panel. Wrap tagList multiple panels.","code":""},{"path":"/reference/f7TabLayout.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Framework7 tab layout — f7TabLayout","text":"David Granjon, dgranjon@ymail.com","code":""},{"path":"/reference/f7TabLayout.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 tab layout — f7TabLayout","text":"","code":"library(shiny) library(shinyMobile) library(apexcharter) library(shinyWidgets)  poll <- data.frame(   answer = c(\"Yes\", \"No\"),   n = c(254, 238) )  app <- shinyApp(   ui = f7Page(     title = \"Tabs layout\",     f7TabLayout(       panels = tagList(         f7Panel(title = \"Left Panel\", side = \"left\", \"Blabla\", effect = \"cover\"),         f7Panel(title = \"Right Panel\", side = \"right\", \"Blabla\", effect = \"cover\")       ),       navbar = f7Navbar(         title = \"Tabs\",         leftPanel = TRUE,         rightPanel = TRUE       ),       f7Tabs(         animated = TRUE,         # swipeable = TRUE,         f7Tab(           title = \"Tab 1\",           tabName = \"Tab1\",           icon = f7Icon(\"folder\"),           active = TRUE,           f7List(             strong = TRUE,             prettyRadioButtons(               inputId = \"theme\",               label = \"Select a theme:\",               thick = TRUE,               inline = TRUE,               selected = \"md\",               choices = c(\"ios\", \"md\"),               animation = \"pulse\",               status = \"info\"             ),             prettyRadioButtons(               inputId = \"dark\",               label = \"Select a color:\",               thick = TRUE,               inline = TRUE,               selected = \"dark\",               choices = c(\"light\", \"dark\"),               animation = \"pulse\",               status = \"info\"             )           ),           f7Card(             title = \"Card header\",             apexchartOutput(\"pie\")           )         ),         f7Tab(           title = \"Tab 2\",           tabName = \"Tab2\",           icon = f7Icon(\"keyboard\"),           f7Card(             title = \"Card header\",             apexchartOutput(\"scatter\")           )         ),         f7Tab(           title = \"Tab 3\",           tabName = \"Tab3\",           icon = f7Icon(\"layers_alt\"),           f7Card(             title = \"Card header\",             f7SmartSelect(               \"variable\",               \"Variables to show:\",               c(                 \"Cylinders\" = \"cyl\",                 \"Transmission\" = \"am\",                 \"Gears\" = \"gear\"               ),               openIn = \"sheet\",               multiple = TRUE             ),             tableOutput(\"data\")           )         )       )     )   ),   server = function(input, output, session) {     # river plot     dates <- reactive(seq.Date(Sys.Date() - 30, Sys.Date(), by = input$by))      output$pie <- renderApexchart({       apex(         data = poll,         type = \"pie\",         mapping = aes(x = answer, y = n)       )     })      output$scatter <- renderApexchart({       apex(         data = mtcars,         type = \"scatter\",         mapping = aes(           x = wt,           y = mpg,           fill = cyl         )       )     })       # datatable     output$data <- renderTable(       {         mtcars[, c(\"mpg\", input$variable), drop = FALSE]       },       rownames = TRUE     )       # theme changes     observe({       updateF7App(         options =list(           theme = input$theme,           dark = ifelse(input$dark == \"dark\", TRUE, FALSE)         )       )     })    } )  if (interactive() || identical(Sys.getenv(\"TESTTHAT\"), \"true\")) app"},{"path":"/reference/f7TabLink.html","id":null,"dir":"Reference","previous_headings":"","what":"Special button/link to insert in the tabbar — f7TabLink","title":"Special button/link to insert in the tabbar — f7TabLink","text":"Use .items slot f7Tabs.","code":""},{"path":"/reference/f7TabLink.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Special button/link to insert in the tabbar — f7TabLink","text":"","code":"f7TabLink(..., icon = NULL, label = NULL)"},{"path":"/reference/f7TabLink.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Special button/link to insert in the tabbar — f7TabLink","text":"... attribute like `data-sheet`, id, ... icon Expect f7Icon. label Button label.","code":""},{"path":"/reference/f7Table.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 table — f7Table","title":"Framework7 table — f7Table","text":"Creates table container.","code":""},{"path":"/reference/f7Table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 table — f7Table","text":"","code":"f7Table(data, colnames = NULL, card = FALSE)"},{"path":"/reference/f7Table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 table — f7Table","text":"data data.frame. colnames Column names use, NULL uses data column names. card Whether use card.","code":""},{"path":"/reference/f7Table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 table — f7Table","text":"","code":"library(shiny) library(shinyMobile)  app <- shinyApp(   ui = f7Page(     title = \"My app\",     f7SingleLayout(       navbar = f7Navbar(         title = \"f7Table\"       ),       uiOutput(\"table\")     )   ),   server = function(input, output) {     output$table <- renderUI({       f7Table(mtcars)     })   } )  if (interactive() || identical(Sys.getenv(\"TESTTHAT\"), \"true\")) app"},{"path":"/reference/f7TapHold.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 tapHold module — f7TapHold","title":"Framework7 tapHold module — f7TapHold","text":"Framework7 called \"tap hold\" event. tapHold enabled f7Page, triggers sustained, complete touch event. f7TapHold triggered server.","code":""},{"path":"/reference/f7TapHold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 tapHold module — f7TapHold","text":"","code":"f7TapHold(target, callback, session = shiny::getDefaultReactiveDomain())"},{"path":"/reference/f7TapHold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 tapHold module — f7TapHold","text":"target Element apply tapHold event . Must jQuery selector, \"#id\" \".class\", \".class1, .class2\", \"\"... callback Javascript callback. session Shiny session object.","code":""},{"path":"/reference/f7TapHold.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 tapHold module — f7TapHold","text":"","code":"library(shiny) library(shinyMobile)  app <- shinyApp(   ui = f7Page(     title = \"Taphold\",     f7SingleLayout(       navbar = f7Navbar(title = \"f7TapHold\"),       f7Button(inputId = \"pressme\", label = \"Press me\")     )   ),   server = function(input, output, session) {     observe({       f7TapHold(         target = \"#pressme\",         callback = \"app.dialog.alert('Tap hold fired!')\"       )     })   } )  if (interactive() || identical(Sys.getenv(\"TESTTHAT\"), \"true\")) app"},{"path":"/reference/f7Toast.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 toast — f7Toast","title":"Framework7 toast — f7Toast","text":"f7Toast creates small toast notification server side.","code":""},{"path":"/reference/f7Toast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 toast — f7Toast","text":"","code":"f7Toast(   text,   position = c(\"bottom\", \"top\", \"center\"),   closeButton = TRUE,   closeButtonText = \"close\",   closeButtonColor = \"red\",   closeTimeout = 3000,   icon = NULL,   ...,   session = shiny::getDefaultReactiveDomain() )"},{"path":"/reference/f7Toast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 toast — f7Toast","text":"text Toast content. position Toast position c(\"bottom\", \"top\", \"center\"). closeButton Whether close toast button. TRUE default. closeButtonText Close button text. closeButtonColor Close button color. closeTimeout Time toast closes. icon Optional. Expect f7Icon. Warning: Adding icon hide close button. ... options. See https://framework7.io/docs/toast.html#toast-parameters. session Shiny session.","code":""},{"path":"/reference/f7Toast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 toast — f7Toast","text":"","code":"library(shiny) library(shinyMobile)  app <- shinyApp(   ui = f7Page(     title = \"Toast\",     f7SingleLayout(       navbar = f7Navbar(title = \"f7Toast\"),       f7Button(inputId = \"toast\", label = \"Open Toast\")     )   ),   server = function(input, output, session) {     observeEvent(input$toast, {       f7Toast(         position = \"top\",         text = \"I am a toast. Eat me!\"       )     })   } )  if (interactive() || identical(Sys.getenv(\"TESTTHAT\"), \"true\")) app"},{"path":"/reference/f7Toolbar.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 Toolbar — f7Toolbar","title":"Framework7 Toolbar — f7Toolbar","text":"f7Toolbar layout element located bottom top. internally used f7Tabs can used toolbar slot f7Page.","code":""},{"path":"/reference/f7Toolbar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 Toolbar — f7Toolbar","text":"","code":"f7Toolbar(   ...,   position = c(\"bottom\", \"top\"),   hairline = deprecated(),   shadow = deprecated(),   icons = FALSE,   scrollable = FALSE )"},{"path":"/reference/f7Toolbar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 Toolbar — f7Toolbar","text":"... Slot f7Link element. position Tabs position: \"top\" \"bottom\". use different positions iOS, MD themes using: \"top-ios\", \"top-md\", \"bottom-ios\", \"bottom-md\". hairline : removed Framework7. shadow : removed Framework7. icons Whether use icons instead text. Either ios md icons. scrollable Whether allow scrolling. FALSE default.","code":""},{"path":"/reference/f7Toolbar.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Framework7 Toolbar — f7Toolbar","text":"David Granjon, dgranjon@ymail.com","code":""},{"path":"/reference/f7Toolbar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 Toolbar — f7Toolbar","text":"","code":"library(shiny) library(shinyMobile)  app <- shinyApp(   ui = f7Page(     title = \"Toolbar\",     toolbar = f7Toolbar(       icons = TRUE,       f7Link(         label = \"Link 1\",         href = \"https://www.google.com\",         icon = f7Icon(\"link_circle_fill\")       ),       f7Link(         label = \"Link 2\",         href = \"https://maps.google.com\",         icon = f7Icon(\"location_circle_fill\")       )     )   ),   server = function(input, output, session) {   } )  if (interactive() || identical(Sys.getenv(\"TESTTHAT\"), \"true\")) app"},{"path":"/reference/f7Treeview.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Framework 7 Treeview layout — f7Treeview","title":"Create a Framework 7 Treeview layout — f7Treeview","text":"Create Framework 7 Treeview layout","code":""},{"path":"/reference/f7Treeview.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Framework 7 Treeview layout — f7Treeview","text":"","code":"f7Treeview(   ...,   id,   selectable = FALSE,   withCheckbox = FALSE,   startExpanded = FALSE )"},{"path":"/reference/f7Treeview.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Framework 7 Treeview layout — f7Treeview","text":"... Slot f7TreeviewGroup f7TreeviewItem. id Treeview unique id. selectable Make treeview items selectable. Default FALSE. withCheckbox Add checkbox item. Default FALSE. startExpanded Whether expand treeview start.","code":""},{"path":"/reference/f7Treeview.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Framework 7 Treeview layout — f7Treeview","text":"","code":"library(shiny) library(shinyMobile)  app <- shinyApp(   ui = f7Page(     title = \"My app\",     f7SingleLayout(       navbar = f7Navbar(title = \"f7Treeview\"),        # simple treeview       f7BlockTitle(\"Simple\"),       f7Block(         f7Treeview(           id = \"simple\",           lapply(1:3, function(i) f7TreeviewItem(label = paste0(\"Item \", letters[i])))         )       ),        # simple treeview with icons       f7BlockTitle(\"Icons\"),       f7Block(         f7Treeview(           id = \"icons\",           lapply(1:3, function(i) f7TreeviewItem(label = paste0(\"Item \", letters[i]),                                                  icon = f7Icon(\"folder_fill\")))         )       ),        # group treeview with icons       f7BlockTitle(\"Group\"),       f7Block(         f7Treeview(           id = \"group\",           startExpanded = TRUE,           f7TreeviewGroup(             title = \"Images\",             icon = f7Icon(\"folder_fill\"),             toggleButton = TRUE,             lapply(1:3, function(i) f7TreeviewItem(label = paste0(\"image\", i, \".png\"),                                                    icon = f7Icon(\"photo_fill\")))           )         )       ),        # group treeview with selectable items       f7BlockTitle(\"Selectable items\"),       f7Block(         f7Treeview(           id = \"selectable\",           selectable = TRUE,           f7TreeviewGroup(             title = \"Selected images\",             icon = f7Icon(\"folder_fill\"),             itemToggle = TRUE,             lapply(1:3, function(i) f7TreeviewItem(label = paste0(\"image\", i, \".png\"),                                                    icon = f7Icon(\"photo_fill\")))           )         )       ),        # group treeview with checkbox items       f7BlockTitle(\"Checkbox\"),       f7Block(         f7Treeview(           id = \"checkbox\",           withCheckbox = TRUE,           f7TreeviewGroup(             title = \"Selected images\",             icon = f7Icon(\"folder_fill\"),             itemToggle = TRUE,             lapply(1:3, function(i) f7TreeviewItem(label = paste0(\"image\", i, \".png\"),                                                    icon = f7Icon(\"photo_fill\")))           )         )       ),        # group treeview with checkbox items       f7BlockTitle(\"With links\"),       f7Block(         f7Treeview(           id = \"links\",           f7TreeviewGroup(             title = \"Links\",             icon = f7Icon(\"link\"),             itemToggle = TRUE,             f7TreeviewItem(label = \"GitHub\",                            icon = f7Icon(\"logo_github\"),                            href = \"https://github.com/\"),             f7TreeviewItem(label = \"CRAN\",                            icon = f7Icon(\"link\"),                            href = \"https://cran.r-project.org/\")),         )       )     )   ),   server = function(input, output) {      observe({       req(input$selectable)       print(input$selectable)     })      observe({       req(input$checkbox)       print(input$checkbox)     })    } )  if (interactive() || identical(Sys.getenv(\"TESTTHAT\"), \"true\")) app"},{"path":"/reference/f7TreeviewGroup.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Framework 7 group for treeview items — f7TreeviewGroup","title":"Create a Framework 7 group for treeview items — f7TreeviewGroup","text":"Create Framework 7 group treeview items","code":""},{"path":"/reference/f7TreeviewGroup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Framework 7 group for treeview items — f7TreeviewGroup","text":"","code":"f7TreeviewGroup(..., title, icon, toggleButton = TRUE, itemToggle = FALSE)"},{"path":"/reference/f7TreeviewGroup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Framework 7 group for treeview items — f7TreeviewGroup","text":"... slot f7TreeviewItem. title Group title. icon Expect f7Icon. toggleButton Whether display toggle button. set FALSE itemToggle TRUE. itemToggle addition (instead ) toggle button, whole group can work like toggle. default behaviour disabled. @example inst/examples/treeview/app.R","code":""},{"path":"/reference/f7TreeviewItem.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Framework 7 Treeview item — f7TreeviewItem","title":"Create a Framework 7 Treeview item — f7TreeviewItem","text":"Create Framework 7 Treeview item","code":""},{"path":"/reference/f7TreeviewItem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Framework 7 Treeview item — f7TreeviewItem","text":"","code":"f7TreeviewItem(label, icon = NULL, href = NULL)"},{"path":"/reference/f7TreeviewItem.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Framework 7 Treeview item — f7TreeviewItem","text":"label Item label icon Expect f7Icon. href Item external link.","code":""},{"path":"/reference/f7TreeviewItem.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Framework 7 Treeview item — f7TreeviewItem","text":"","code":"library(shiny) library(shinyMobile)  app <- shinyApp(   ui = f7Page(     title = \"My app\",     f7SingleLayout(       navbar = f7Navbar(title = \"f7Treeview\"),        # simple treeview       f7BlockTitle(\"Simple\"),       f7Block(         f7Treeview(           id = \"simple\",           lapply(1:3, function(i) f7TreeviewItem(label = paste0(\"Item \", letters[i])))         )       ),        # simple treeview with icons       f7BlockTitle(\"Icons\"),       f7Block(         f7Treeview(           id = \"icons\",           lapply(1:3, function(i) f7TreeviewItem(label = paste0(\"Item \", letters[i]),                                                  icon = f7Icon(\"folder_fill\")))         )       ),        # group treeview with icons       f7BlockTitle(\"Group\"),       f7Block(         f7Treeview(           id = \"group\",           startExpanded = TRUE,           f7TreeviewGroup(             title = \"Images\",             icon = f7Icon(\"folder_fill\"),             toggleButton = TRUE,             lapply(1:3, function(i) f7TreeviewItem(label = paste0(\"image\", i, \".png\"),                                                    icon = f7Icon(\"photo_fill\")))           )         )       ),        # group treeview with selectable items       f7BlockTitle(\"Selectable items\"),       f7Block(         f7Treeview(           id = \"selectable\",           selectable = TRUE,           f7TreeviewGroup(             title = \"Selected images\",             icon = f7Icon(\"folder_fill\"),             itemToggle = TRUE,             lapply(1:3, function(i) f7TreeviewItem(label = paste0(\"image\", i, \".png\"),                                                    icon = f7Icon(\"photo_fill\")))           )         )       ),        # group treeview with checkbox items       f7BlockTitle(\"Checkbox\"),       f7Block(         f7Treeview(           id = \"checkbox\",           withCheckbox = TRUE,           f7TreeviewGroup(             title = \"Selected images\",             icon = f7Icon(\"folder_fill\"),             itemToggle = TRUE,             lapply(1:3, function(i) f7TreeviewItem(label = paste0(\"image\", i, \".png\"),                                                    icon = f7Icon(\"photo_fill\")))           )         )       ),        # group treeview with checkbox items       f7BlockTitle(\"With links\"),       f7Block(         f7Treeview(           id = \"links\",           f7TreeviewGroup(             title = \"Links\",             icon = f7Icon(\"link\"),             itemToggle = TRUE,             f7TreeviewItem(label = \"GitHub\",                            icon = f7Icon(\"logo_github\"),                            href = \"https://github.com/\"),             f7TreeviewItem(label = \"CRAN\",                            icon = f7Icon(\"link\"),                            href = \"https://cran.r-project.org/\")),         )       )     )   ),   server = function(input, output) {      observe({       req(input$selectable)       print(input$selectable)     })      observe({       req(input$checkbox)       print(input$checkbox)     })    } )  if (interactive() || identical(Sys.getenv(\"TESTTHAT\"), \"true\")) app"},{"path":"/reference/fab.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 floating action button (FAB) — f7Fab","title":"Framework7 floating action button (FAB) — f7Fab","text":"f7Fab generates nice button put f7Fabs. updateF7Fab changes label f7Fab input client.","code":""},{"path":"/reference/fab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 floating action button (FAB) — f7Fab","text":"","code":"f7Fab(inputId, label, width = NULL, ..., flag = NULL)  updateF7Fab(inputId, label = NULL, session = shiny::getDefaultReactiveDomain())"},{"path":"/reference/fab.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 floating action button (FAB) — f7Fab","text":"inputId input slot used access value. label contents button link–usually text label, also use HTML, like image. width width input, e.g. '400px', '100%'; see validateCssUnit(). ... Named attributes applied button link. flag Additional text displayed next button content. works f7Fabs position parameter starting center-... session Shiny session object, usually default value suffice.","code":""},{"path":"/reference/fab.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Framework7 floating action button (FAB) — f7Fab","text":"David Granjon, dgranjon@ymail.com","code":""},{"path":"/reference/fabs.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 container for floating action button (FAB) — f7Fabs","title":"Framework7 container for floating action button (FAB) — f7Fabs","text":"f7Fabs hosts multiple f7Fab. updateF7Fabs toggles f7Fabs server side. f7FabMorphTarget convert tag target morphing. See https://framework7.io/docs/floating-action-button#fab-morph.","code":""},{"path":"/reference/fabs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 container for floating action button (FAB) — f7Fabs","text":"","code":"f7Fabs(   ...,   id = NULL,   position = c(\"right-top\", \"right-center\", \"right-bottom\", \"left-top\", \"left-center\",     \"left-bottom\", \"center-center\", \"center-top\", \"center-bottom\"),   color = NULL,   extended = FALSE,   label = NULL,   sideOpen = c(\"left\", \"right\", \"top\", \"bottom\", \"center\"),   morph = deprecated(),   morphTarget = NULL,   global = FALSE )  updateF7Fabs(id, session = shiny::getDefaultReactiveDomain())  f7FabMorphTarget(tag)"},{"path":"/reference/fabs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 container for floating action button (FAB) — f7Fabs","text":"... Slot f7Fab. id Optional: access current state f7Fabs container. position Container position. color Container color. extended TRUE, FAB wider. allows use label (see ). label Container label. extended TRUE. sideOpen container pressed, indicate buttons displayed. morph : removed Framework7. morphTarget CSS selector morph target: \".toolbar\" instance. global FABs used f7TabLayout argument set TRUE, FAB displayed tabs. FALSE, default, displayed tab called . session Shiny session object, usually default value suffice. tag Target tag.","code":""},{"path":"/reference/fabs.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Framework7 container for floating action button (FAB) — f7Fabs","text":"background color might issue depending parent container. Consider experimental.","code":""},{"path":"/reference/fabs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Framework7 container for floating action button (FAB) — f7Fabs","text":"David Granjon, dgranjon@ymail.com","code":""},{"path":"/reference/fabs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 container for floating action button (FAB) — f7Fabs","text":"","code":"library(shiny) library(shinyMobile)  app <- shinyApp(   ui = f7Page(     title = \"Update f7Fabs\",     f7SingleLayout(       navbar = f7Navbar(title = \"Update f7Fabs\"),       toolbar = f7Toolbar(         position = \"bottom\",         lapply(1:3, function(i) f7Link(label = i, href = \"#\") |> f7FabClose())       ) |> f7FabMorphTarget(),       # put an empty f7Fabs container       f7Fabs(         id = \"fabsMorph\",         extended = TRUE,         label = \"Open\",         position = \"center-bottom\",         color = \"yellow\",         sideOpen = \"right\",         morphTarget = \".toolbar\"       ),       f7Block(f7Button(inputId = \"toggle\", label = \"Toggle Fabs\")),       f7Fabs(         position = \"center-center\",         id = \"fabs\",         lapply(1:3, function(i) f7Fab(inputId = i, label = i))       ),       f7BlockTitle(\"Output\"),       f7Block(         textOutput(\"res\")       ),       f7BlockTitle(\"Page Content\"),       f7Block(         p(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse             hendrerit magna non sem iaculis, ac rhoncus est pulvinar. Interdum et             malesuada fames ac ante ipsum primis in faucibus. In sagittis vel lacus             ac bibendum. Maecenas mollis, diam nec fermentum sollicitudin, massa             lectus ullamcorper orci, in laoreet lectus quam nec lacus.             Nulla sollicitudin imperdiet metus, quis mollis justo finibus varius.             In mattis malesuada enim in tincidunt. Nulla vehicula dui lacus,             iaculis condimentum dui dapibus ac. Cras elit nunc, auctor vestibulum             odio id, iaculis posuere arcu. Mauris dignissim id lectus sit amet             vestibulum. Nam rutrum sit amet augue vel interdum. Donec sed orci vitae             eros eleifend posuere vitae id nibh. Donec faucibus erat in placerat             feugiat. Sed sodales facilisis eros, porta viverra purus pretium eu.             Morbi vehicula metus lacus, id commodo mauris posuere nec. Vivamus             ornare et lacus et lobortis. Etiam tristique elit id eros ornare,             vel faucibus mauris hendrerit. Nulla elit nulla, consequat sit amet             neque et, ultrices elementum diam. Etiam dignissim elit a arcu pulvinar,             ut dapibus elit maximus. Mauris ultricies nulla in mauris laoreet, at             lacinia lorem maximus. Nulla sed enim diam. In ac felis dignissim,             euismod augue nec, tempus augue. Maecenas eget aliquam mi.             In tincidunt massa a velit suscipit, ac dapibus mi laoreet. Vestibulum             lacinia nulla lorem, nec blandit quam sollicitudin at. Pellentesque             in vehicula lacus. Etiam vitae lectus malesuada, hendrerit mauris eu,             placerat elit. Mauris vehicula dictum pharetra. Etiam interdum vehicula             urna, ac blandit lectus posuere id. Nullam facilisis tincidunt sem et             pretium. Praesent pulvinar feugiat augue, quis pretium nunc vestibulum a.             Morbi id eros eget lectus placerat placerat. Morbi dapibus viverra             orci nec pellentesque. Vestibulum mollis gravida sem, quis tincidunt             sem maximus gravida. Nam id egestas augue, sit amet egestas orci. Duis             porttitor lectus sit amet efficitur auctor. Quisque dui ante, eleifend             eget nibh a, tincidunt interdum nisi. Integer varius tempor erat, in             commodo neque elementum ut. Maecenas eu lorem ultrices, posuere neque ac,             aliquam ante. Maecenas eu volutpat arcu. Morbi hendrerit sem sed vehicula             sodales. Quisque ultrices massa erat, vel accumsan risus vehicula eu.             Donec laoreet aliquet est, a consequat odio viverra lacinia. Suspendisse             id iaculis risus. Vestibulum posuere dignissim lacus quis ornare. Nam             dapibus efficitur neque sed tristique.\"         )       )     )   ),   server = function(input, output, session) {     output$res <- renderText(input[[\"1\"]])      observeEvent(input$toggle, {       updateF7Fabs(id = \"fabs\")     })   } )  if (interactive() || identical(Sys.getenv(\"TESTTHAT\"), \"true\")) app"},{"path":"/reference/form-inputs.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates an input form — f7Form","title":"Creates an input form — f7Form","text":"Instead shiny return one input time, form collection related inputs. form returns list sub-inputs elements. avoids deal many inputs. updateF7Form update form inputs server.","code":""},{"path":"/reference/form-inputs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates an input form — f7Form","text":"","code":"f7Form(id, ...)  updateF7Form(id, data, session = shiny::getDefaultReactiveDomain())"},{"path":"/reference/form-inputs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates an input form — f7Form","text":"id Form unique id. Using input$<id> gives form result. ... list input elements. data New form data. session Shiny session objects.","code":""},{"path":"/reference/form-inputs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Creates an input form — f7Form","text":"works elements input HTML tag.","code":""},{"path":"/reference/form-inputs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates an input form — f7Form","text":"","code":"library(shiny) library(shinyMobile)  app <- shinyApp(   ui = f7Page(     f7SingleLayout(       navbar = f7Navbar(title = \"Inputs form\"),       f7Block(f7Button(\"update\", \"Click me\")),       f7BlockTitle(\"A list of inputs in a form\"),       f7List(         inset = TRUE,         dividers = FALSE,         strong = TRUE,         f7Form(           id = \"myform\",           f7Text(             inputId = \"text\",             label = \"Text input\",             value = \"Some text\",             placeholder = \"Your text here\",             style = list(               description = \"A cool text input\",               outline = TRUE,               media = f7Icon(\"house\"),               clearable = TRUE,               floating = TRUE             )           ),           f7TextArea(             inputId = \"textarea\",             label = \"Text Area\",             value = \"Lorem ipsum dolor sit amet, consectetur               adipiscing elit, sed do eiusmod tempor incididunt ut               labore et dolore magna aliqua\",             placeholder = \"Your text here\",             resize = TRUE,             style = list(               description = \"A cool text input\",               outline = TRUE,               media = f7Icon(\"house\"),               clearable = TRUE,               floating = TRUE             )           ),           f7Password(             inputId = \"password\",             label = \"Password:\",             placeholder = \"Your password here\",             style = list(               description = \"A cool text input\",               outline = TRUE,               media = f7Icon(\"house\"),               clearable = TRUE,               floating = TRUE             )           )         )       ),       verbatimTextOutput(\"form\")     )   ),   server = function(input, output, session) {     output$form <- renderPrint(input$myform)      observeEvent(input$update, {       updateF7Form(         \"myform\",         data = list(           \"text\" = \"New text\",           \"textarea\" = \"New text area\",           \"password\" = \"New password\"         )       )     })   } )  if (interactive() || identical(Sys.getenv(\"TESTTHAT\"), \"true\")) app"},{"path":"/reference/gauge.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 gauge — f7Gauge","title":"Framework7 gauge — f7Gauge","text":"f7Gauge creates gauge instance. updateF7Gauge updates framework7 gauge server side.","code":""},{"path":"/reference/gauge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 gauge — f7Gauge","text":"","code":"f7Gauge(   id,   type = \"circle\",   value,   size = 200,   bgColor = \"transparent\",   borderBgColor = \"#eeeeee\",   borderColor = \"#000000\",   borderWidth = \"10\",   valueText = NULL,   valueTextColor = \"#000000\",   valueFontSize = \"31\",   valueFontWeight = \"500\",   labelText = NULL,   labelTextColor = \"#888888\",   labelFontSize = \"14\",   labelFontWeight = \"400\" )  updateF7Gauge(   id,   value = NULL,   labelText = NULL,   size = NULL,   bgColor = NULL,   borderBgColor = NULL,   borderColor = NULL,   borderWidth = NULL,   valueText = NULL,   valueTextColor = NULL,   valueFontSize = NULL,   valueFontWeight = NULL,   labelTextColor = NULL,   labelFontSize = NULL,   labelFontWeight = NULL,   session = shiny::getDefaultReactiveDomain() )"},{"path":"/reference/gauge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 gauge — f7Gauge","text":"id Gauge ID. type Gauge type. Can \"circle\" \"semicircle\". Default \"circle.\" value Gauge value/percentage. Must number 0 100. size Generated SVG image size (px). Default 200. bgColor Gauge background color. Can valid color string, e.g. #ff00ff, rgb(0,0,255), etc. Default \"transparent\". borderBgColor Main border/stroke background color. borderColor Main border/stroke color. borderWidth Main border/stroke width. valueText Gauge value text (large text center gauge). valueTextColor Value text color. valueFontSize Value text font size. valueFontWeight Value text font weight. labelText Gauge additional label text. labelTextColor Label text color. labelFontSize Label text font size. labelFontWeight Label text font weight. session Shiny session object.","code":""},{"path":"/reference/gauge.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Framework7 gauge — f7Gauge","text":"David Granjon dgranjon@ymail.com","code":""},{"path":"/reference/gauge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 gauge — f7Gauge","text":"","code":"library(shiny) library(shinyMobile)  app <- shinyApp(   ui = f7Page(     title = \"Gauges\",     f7SingleLayout(       navbar = f7Navbar(title = \"f7Gauge\"),       f7Block(         f7Gauge(           id = \"mygauge\",           type = \"semicircle\",           value = 50,           borderColor = \"#2196f3\",           borderWidth = 10,           valueFontSize = 41,           valueTextColor = \"#2196f3\",           labelText = \"amount of something\"         )       ),       f7Block(f7Button(\"update\", \"Update Gauge\"))     )   ),   server = function(input, output, session) {     observeEvent(input$update, {       updateF7Gauge(id = \"mygauge\", value = 75, labelText = \"New label!\")     })   } )  if (interactive() || identical(Sys.getenv(\"TESTTHAT\"), \"true\")) app"},{"path":"/reference/getF7Colors.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to get all colors available in shinyMobile — getF7Colors","title":"Function to get all colors available in shinyMobile — getF7Colors","text":"Function get colors available shinyMobile","code":""},{"path":"/reference/getF7Colors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to get all colors available in shinyMobile — getF7Colors","text":"","code":"getF7Colors()"},{"path":"/reference/getF7Colors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to get all colors available in shinyMobile — getF7Colors","text":"vector containing colors","code":""},{"path":"/reference/groupInputDefaults.html","id":null,"dir":"Reference","previous_headings":"","what":"Group input default options — groupInputDefaults","title":"Group input default options — groupInputDefaults","text":"Group input default options","code":""},{"path":"/reference/groupInputDefaults.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Group input default options — groupInputDefaults","text":"","code":"groupInputDefaults()"},{"path":"/reference/inputLayoutDefaults.html","id":null,"dir":"Reference","previous_headings":"","what":"Input layout default options — inputLayoutDefaults","title":"Input layout default options — inputLayoutDefaults","text":"Input layout default options","code":""},{"path":"/reference/inputLayoutDefaults.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Input layout default options — inputLayoutDefaults","text":"","code":"inputLayoutDefaults()"},{"path":"/reference/inserttab.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 tab insertion — insertF7Tab","title":"Framework7 tab insertion — insertF7Tab","text":"insertF7Tab inserts f7Tab f7Tabs.","code":""},{"path":"/reference/inserttab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 tab insertion — insertF7Tab","text":"","code":"insertF7Tab(   id,   tab,   target = NULL,   position = c(\"before\", \"after\"),   select = FALSE,   session = shiny::getDefaultReactiveDomain() )"},{"path":"/reference/inserttab.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 tab insertion — insertF7Tab","text":"id f7Tabs id. tab f7Tab insert. target f7Tab new tab inserted. position Insert : c(\"\", \"\"). select Whether select newly inserted tab. FALSE default. session Shiny session object.","code":""},{"path":[]},{"path":"/reference/is_wrapped.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if f7List is in call stack — is_wrapped","title":"Check if f7List is in call stack — is_wrapped","text":"Check f7List call stack","code":""},{"path":"/reference/is_wrapped.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if f7List is in call stack — is_wrapped","text":"","code":"is_wrapped()"},{"path":"/reference/listify.html","id":null,"dir":"Reference","previous_headings":"","what":"Listify a tag — listify","title":"Listify a tag — listify","text":"Listify tag","code":""},{"path":"/reference/listify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Listify a tag — listify","text":"","code":"listify(tag, style = NULL)"},{"path":"/reference/menu.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 menu container — f7Menu","title":"Framework7 menu container — f7Menu","text":". f7Menu container f7MenuItem /f7MenuDropdown. f7MenuItem creates special action button f7Menu. f7MenuDropdown creates dropdown menu f7Menu. f7MenuDropdownDivider creates dropdown divider f7MenuDropdown. updateF7MenuDropdown toggles f7MenuDropdown client.","code":""},{"path":"/reference/menu.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 menu container — f7Menu","text":"","code":"f7Menu(...)  f7MenuItem(inputId, label)  f7MenuDropdown(..., id = NULL, label, side = c(\"left\", \"center\", \"right\"))  f7MenuDropdownDivider()  updateF7MenuDropdown(id, session = shiny::getDefaultReactiveDomain())"},{"path":"/reference/menu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 menu container — f7Menu","text":"... Slot f7MenuItem f7MenuDropdownDivider. inputId Menu item input id. label Button label. id Menu target. side Dropdown opening side. Choose among c(\"left\", \"center\", \"right\"). session Shiny session object.","code":""},{"path":"/reference/messagebar.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 message bar. — f7MessageBar","title":"Framework7 message bar. — f7MessageBar","text":"f7MessageBar creates message text container type new messages. Insert f7Messages. See examples. updateF7MessageBar updates message bar content server side.","code":""},{"path":"/reference/messagebar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 message bar. — f7MessageBar","text":"","code":"f7MessageBar(inputId, placeholder = \"Message\")  updateF7MessageBar(   inputId,   value = NULL,   placeholder = NULL,   session = shiny::getDefaultReactiveDomain() )"},{"path":"/reference/messagebar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 message bar. — f7MessageBar","text":"inputId f7MessageBar unique id. placeholder New placeholder value. value New value. session Shiny session object.","code":""},{"path":"/reference/messagebar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 message bar. — f7MessageBar","text":"","code":"library(shiny) library(shinyMobile)  app <- shinyApp(   ui = f7Page(     title = \"Update message bar\",     f7SingleLayout(       navbar = f7Navbar(         title = \"Message bar\",         hairline = FALSE       ),       toolbar = f7Toolbar(         position = \"bottom\",         f7Link(label = \"Link 1\", href = \"https://www.google.com\"),         f7Link(label = \"Link 2\", href = \"https://www.google.com\")       ),       # main content       f7Segment(         f7Button(\"updateMessageBar\", \"Update value\"),         f7Button(\"updateMessageBarPlaceholder\", \"Update placeholder\")       ),       f7Block(         title = \"Message bar\",         f7MessageBar(inputId = \"mymessagebar\", placeholder = \"Message\")       ),       uiOutput(\"messageContent\")     )   ),   server = function(input, output, session) {     output$messageContent <- renderUI({       req(input$mymessagebar)       tagList(         f7BlockTitle(\"Message Content\", size = \"large\"),         f7Block(strong = TRUE, inset = TRUE, input$mymessagebar)       )     })     observeEvent(input$updateMessageBar, {       updateF7MessageBar(         inputId = \"mymessagebar\",         value = \"sjsjsj\"       )     })     observeEvent(input$updateMessageBarPlaceholder, {       updateF7MessageBar(         inputId = \"mymessagebar\",         placeholder = \"Enter your message\"       )     })   } )  if (interactive() || identical(Sys.getenv(\"TESTTHAT\"), \"true\")) app"},{"path":"/reference/messages.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 messages container — f7Messages","title":"Framework7 messages container — f7Messages","text":"f7Messages empty container targeted updateF7Messages include multiple f7Message. f7Message creates message item inserted f7Messages updateF7Messages. updateF7Messages add messages f7Messages container.","code":""},{"path":"/reference/messages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 messages container — f7Messages","text":"","code":"f7Messages(   id,   title = NULL,   autoLayout = TRUE,   newMessagesFirst = FALSE,   scrollMessages = TRUE,   scrollMessagesOnEdge = TRUE )  f7Message(   text,   name,   type = c(\"sent\", \"received\"),   header = NULL,   footer = NULL,   avatar = NULL,   textHeader = NULL,   textFooter = NULL,   image = NULL,   imageSrc = NULL,   cssClass = NULL )  updateF7Messages(   id,   messages,   showTyping = FALSE,   session = shiny::getDefaultReactiveDomain() )"},{"path":"/reference/messages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 messages container — f7Messages","text":"id Reference f7Messages container. title Optional messages title. autoLayout Enable Auto Layout add required additional classes automatically based passed conditions. newMessagesFirst Enable want use new messages top, instead bottom. scrollMessages Enable/disable messages auto scrolling adding new message. scrollMessagesOnEdge enabled messages auto scrolling happen user top/bottom messages view. text Message text. name Sender name. type Message type - sent received. header Single message header. footer Single message footer. avatar Sender avatar URL string. textHeader Message text header. textFooter Message text footer. image Message image HTML string, e.g. <img src=\"path//image\">. Can used instead imageSrc parameter. imageSrc Message image URL string. Can used instead image parameter. cssClass Additional CSS class set message HTML element. messages List f7Message. showTyping Show typing new message comes. Default FALSE. work yet... session Shiny session object","code":""},{"path":"/reference/messages.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 messages container — f7Messages","text":"","code":"library(shiny) library(shinyMobile)  app <- shinyApp(   ui = f7Page(     title = \"Messages\",     f7SingleLayout(       navbar = f7Navbar(         title = \"Messages\",         hairline = FALSE       ),       toolbar = f7MessageBar(inputId = \"mymessagebar\", placeholder = \"Message\"),       # main content       f7Messages(id = \"mymessages\", title = \"My message\")     )   ),   server = function(input, output, session) {     # Send a message     observeEvent(input[[\"mymessagebar-send\"]], {       updateF7Messages(         id = \"mymessages\",         list(           f7Message(             text = input$mymessagebar,             name = \"David\",             type = \"sent\",             header = \"Message Header\",             footer = \"Message Footer\",             textHeader = \"Text Header\",             textFooter = \"text Footer\",             avatar = \"https://cdn.framework7.io/placeholder/people-100x100-7.jpg\"           )         )       )     })      # Receive a message     observeEvent(TRUE, {       updateF7Messages(         id = \"mymessages\",         showTyping = FALSE, # DOES NOT WORK YET WHEN TRUE ...         list(           f7Message(             text = \"Some message\",             name = \"Victor\",             type = \"received\",             avatar = \"https://cdn.framework7.io/placeholder/people-100x100-9.jpg\"           )         )       )     })   } )  if (interactive() || identical(Sys.getenv(\"TESTTHAT\"), \"true\")) app"},{"path":"/reference/navbar.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 Navbar — f7Navbar","title":"Framework7 Navbar — f7Navbar","text":"Build navbar layout element insert f7SingleLayout, f7TabLayout f7SplitLayout. updateF7Navbar toggles f7Navbar component server.","code":""},{"path":"/reference/navbar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 Navbar — f7Navbar","text":"","code":"f7Navbar(   ...,   subNavbar = NULL,   title = NULL,   subtitle = deprecated(),   hairline = TRUE,   shadow = deprecated(),   bigger = FALSE,   transparent = FALSE,   leftPanel = FALSE,   rightPanel = FALSE )  updateF7Navbar(   animate = TRUE,   hideStatusbar = FALSE,   session = shiny::getDefaultReactiveDomain() )"},{"path":"/reference/navbar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 Navbar — f7Navbar","text":"... Slot f7SearchbarTrigger. compatible f7Panel. subNavbar f7SubNavbar slot, . title Navbar title. subtitle : removed Framework7. hairline Whether display thin border top navbar. TRUE default, ios. shadow : removed Framework7. bigger Whether display bigger title. FALSE default. Title becomes smaller scrolling page. transparent Whether navbar transparent. FALSE default. works bigger TRUE. leftPanel Whether enable left panel. FALSE default. can also pass list shiny tag shiny::tagList, icon text. useful using yet experimental routable API f7MultiLayout. rightPanel Whether enable right panel. FALSE default. can also pass list shiny tags shiny::tagList, icon text. useful using yet experimental routable API f7MultiLayout. animate Whether hidden animation . default TRUE. hideStatusbar FALSE (default) hides navbar partially keeping space required cover statusbar area. Otherwise, navbar fully hidden. session Shiny session object.","code":""},{"path":"/reference/navbar.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Framework7 Navbar — f7Navbar","text":"Currently, bigger parameters mess CSS.","code":""},{"path":"/reference/navbar.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Framework7 Navbar — f7Navbar","text":"David Granjon, dgranjon@ymail.com","code":""},{"path":"/reference/navbar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 Navbar — f7Navbar","text":"","code":"library(shiny) library(shinyMobile)  app <- shinyApp(   ui = f7Page(     title = \"Sub Navbar\",     options = list(       dark = FALSE,       navbar = list(         hideOnPageScroll = TRUE,         mdCenterTitle = TRUE       )     ),     f7SingleLayout(       panels = tagList(         f7Panel(           title = \"Left Panel\",           side = \"left\",           f7Block(\"Blabla\"),           effect = \"cover\"         ),         f7Panel(           title = \"Right Panel\",           side = \"right\",           f7Block(\"Blabla\"),           effect = \"cover\"         )       ),       navbar = f7Navbar(         subNavbar = f7SubNavbar(           f7Button(label = \"My button\"),           f7Button(label = \"My button\"),           f7Button(label = \"My button\")         ),         title = \"Title\",         leftPanel = TRUE,         rightPanel = TRUE       ),       f7Block(f7Button(inputId = \"toggle\", \"Toggle navbar\")),       f7Block(         lapply(1:20, f7Card)       )     )   ),   server = function(input, output, session) {     observeEvent(input$toggle, {       updateF7Navbar()     })   } )  if (interactive() || identical(Sys.getenv(\"TESTTHAT\"), \"true\")) app"},{"path":"/reference/panel.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 panel — f7Panel","title":"Framework7 panel — f7Panel","text":"f7Panel sidebar element. may used simple sidebar container f7PanelMenu case f7SplitLayout. updateF7Panel toggles f7Panel server.","code":""},{"path":"/reference/panel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 panel — f7Panel","text":"","code":"f7Panel(   ...,   id = NULL,   title = NULL,   side = c(\"left\", \"right\"),   theme = deprecated(),   effect = c(\"reveal\", \"cover\", \"push\", \"floating\"),   resizable = FALSE,   options = list() )  updateF7Panel(id, session = shiny::getDefaultReactiveDomain())"},{"path":"/reference/panel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 panel — f7Panel","text":"... Panel content. Slot f7PanelMenu, used sidebar. id Panel unique id. title Panel title. side Panel side: \"left\" \"right\". theme : removed Framework7. effect Whether panel behave opened: \"cover\", \"reveal\", \"floating\" \"push\". resizable Whether enable panel resize. FALSE default. options panel options. See https://framework7.io/docs/panel#panel-parameters. session Shiny session object.","code":""},{"path":"/reference/panel.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Framework7 panel — f7Panel","text":"David Granjon, dgranjon@ymail.com","code":""},{"path":"/reference/panel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 panel — f7Panel","text":"","code":"library(shiny) library(shinyMobile)  app <- shinyApp(   ui = f7Page(     title = \"Panels\",     options = list(dark = FALSE),     f7SingleLayout(       navbar = f7Navbar(         title = \"f7Panel\",         leftPanel = TRUE,         rightPanel = TRUE       ),       panels = tagList(         f7Panel(           id = \"mypanel1\",           side = \"left\",           effect = \"push\",           title = \"Left panel\",           resizable = TRUE,           f7Block(\"A panel with push effect\"),           f7PanelMenu(             id = \"panelmenu\",             f7PanelItem(               tabName = \"tab1\",               title = \"Tab 1\",               icon = f7Icon(\"envelope\"),               active = TRUE             ),             f7PanelItem(               tabName = \"tab2\",               title = \"Tab 2\",               icon = f7Icon(\"house\")             )           )         ),         f7Panel(           id = \"mypanel2\",           side = \"right\",           effect = \"floating\",           title = \"Right panel\",           f7Block(             \"A panel with cover effect\"           ),           options = list(swipe = TRUE)         )       ),       toolbar = f7Toolbar(         position = \"bottom\",         icons = TRUE,         f7Link(label = \"Link 1\", href = \"https://www.google.com\"),         f7Link(label = \"Link 2\", href = \"https://www.google.com\")       ),       # main content       f7Block(         f7Button(inputId = \"toggle\", \"Toggle panel 1\")       )     )   ),   server = function(input, output, session) {     observeEvent(input$mypanel2, {       state <- if (input$mypanel2) \"open\" else \"closed\"        f7Toast(         text = paste0(\"Right panel is \", state),         position = \"center\",         closeTimeout = 1000,         closeButton = FALSE       )     })      observeEvent(input$toggle, {       updateF7Panel(id = \"mypanel1\")     })   } )  if (interactive() || identical(Sys.getenv(\"TESTTHAT\"), \"true\")) app"},{"path":"/reference/panelmenu.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 sidebar menu — f7PanelMenu","title":"Framework7 sidebar menu — f7PanelMenu","text":"f7PanelMenu creates menu f7Panel. may contain multiple f7PanelItem. f7PanelItem creates Framework7 sidebar menu item f7SplitLayout.","code":""},{"path":"/reference/panelmenu.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 sidebar menu — f7PanelMenu","text":"","code":"f7PanelMenu(   ...,   id = NULL,   mode = \"links\",   inset = FALSE,   outline = FALSE,   dividers = FALSE,   strong = FALSE )  f7PanelItem(title, tabName, icon = NULL, active = FALSE)"},{"path":"/reference/panelmenu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 sidebar menu — f7PanelMenu","text":"... Slot f7PanelItem. id Unique id access currently selected item. mode List mode. NULL, \"simple\", \"links\", \"media\" \"contacts\". inset Whether display card border. FALSE default. outline Outline style. Default FALSE. dividers Dividers style. Default FALSE. strong Strong style. Default FALSE. title Item name. tabName Item unique tabName. Must correspond passed f7Item. icon Item icon. active Whether item active start. Default FALSE.","code":""},{"path":"/reference/panelmenu.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Framework7 sidebar menu — f7PanelMenu","text":"David Granjon, dgranjon@ymail.com","code":""},{"path":"/reference/picker.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 picker input — f7Picker","title":"Framework7 picker input — f7Picker","text":"f7Picker generates picker input. updateF7Picker changes value picker input client.","code":""},{"path":"/reference/picker.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 picker input — f7Picker","text":"","code":"f7Picker(   inputId,   label,   placeholder = NULL,   value = choices[1],   choices,   rotateEffect = TRUE,   openIn = \"auto\",   scrollToInput = FALSE,   closeByOutsideClick = TRUE,   toolbar = TRUE,   toolbarCloseText = \"Done\",   sheetSwipeToClose = FALSE,   style = list(inset = FALSE, outline = FALSE, strong = FALSE, dividers = FALSE),   ... )  updateF7Picker(   inputId,   value = NULL,   choices = NULL,   rotateEffect = NULL,   openIn = NULL,   scrollToInput = NULL,   closeByOutsideClick = NULL,   toolbar = NULL,   toolbarCloseText = NULL,   sheetSwipeToClose = NULL,   ...,   session = shiny::getDefaultReactiveDomain() )"},{"path":"/reference/picker.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 picker input — f7Picker","text":"inputId Picker input id. label Picker label. placeholder Text write container. value Picker initial value, . choices Picker choices. rotateEffect Enables 3D rotate effect. Default TRUE. openIn Can auto, popover (open picker popover), sheet (open sheet modal). case auto open sheet modal small screens popover large screens. Default auto. scrollToInput Scroll viewport (page-content) input picker opened. Default FALSE. closeByOutsideClick enabled, picker closed clicking outside picker related input element. Default TRUE. toolbar Enables picker toolbar. Default TRUE. toolbarCloseText Text Done/Close toolbar button. sheetSwipeToClose Enables ability close Picker sheet swipe. Default FALSE. style Input style. Inherit f7List options outline, inset, strong dividers. ... options pass picker. See https://framework7.io/docs/picker#picker-parameters. session Shiny session object, usually default value suffice.","code":""},{"path":"/reference/picker.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Framework7 picker input — f7Picker","text":"David Granjon, dgranjon@ymail.com","code":""},{"path":"/reference/picker.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 picker input — f7Picker","text":"","code":"library(shiny) library(shinyMobile)  app <- shinyApp(   ui = f7Page(     title = \"My app\",     f7TabLayout(       navbar = f7Navbar(title = \"Update pickers\"),       f7Tabs(         f7Tab(           title = \"Standalone\",           tabName = \"standalone\",           f7Segment(             f7Button(inputId = \"update\", label = \"Update picker\"),             f7Button(               inputId = \"removeToolbar\",               label = \"Remove picker toolbars\",               color = \"red\"             )           ),           f7Picker(             inputId = \"picker\",             placeholder = \"Some text here!\",             label = \"Picker Input\",             choices = c(\"a\", \"b\", \"c\"),             options = list(sheetPush = TRUE),             style = list(strong = TRUE)           ),           f7Block(verbatimTextOutput(\"pickerval\"))         ),         f7Tab(           title = \"List\",           tabName = \"list\",           f7List(             strong = TRUE,             f7Picker(               inputId = \"picker2\",               placeholder = \"Some text here!\",               label = \"Picker Input\",               choices = c(\"a\", \"b\", \"c\"),               options = list(sheetPush = TRUE)             )           ),           f7Block(verbatimTextOutput(\"pickerval2\"))         )       )     )   ),   server = function(input, output, session) {     output$pickerval <- renderText(input$picker)     output$pickerval2 <- renderText(input$picker2)      observeEvent(input$update, {       updateF7Picker(         inputId = \"picker\",         value = \"b\",         choices = letters,         openIn = \"sheet\",         toolbarCloseText = \"Close me\",         sheetSwipeToClose = TRUE       )     })      observeEvent(input$removeToolbar, {       updateF7Picker(         inputId = \"picker\",         value = \"b\",         choices = letters,         openIn = \"sheet\",         toolbar = FALSE       )     })   } )  if (interactive() || identical(Sys.getenv(\"TESTTHAT\"), \"true\")) app"},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/popover.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Framework7 popover — addF7Popover","title":"Add Framework7 popover — addF7Popover","text":"addF7Popover adds popover given target show enabled toggleF7Popover. toggleF7Popover toggles visibility popover. See example use case.","code":""},{"path":"/reference/popover.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Framework7 popover — addF7Popover","text":"","code":"addF7Popover(   id = NULL,   selector = NULL,   options,   session = shiny::getDefaultReactiveDomain() )  toggleF7Popover(   id = NULL,   selector = NULL,   session = shiny::getDefaultReactiveDomain() )"},{"path":"/reference/popover.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Framework7 popover — addF7Popover","text":"id Popover target id. selector jQuery selector. Allow customization target (nested tags). options List options pass popover. See https://framework7.io/docs/popover.html#popover-parameters. session Shiny session object.","code":""},{"path":"/reference/popover.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Framework7 popover — addF7Popover","text":"","code":"library(shiny) library(shinyMobile)  lorem_ipsum <- \"Lorem ipsum dolor sit amet,            consectetur adipiscing elit. Quisque ac diam ac quam euismod            porta vel a nunc. Quisque sodales scelerisque est, at porta            justo cursus ac.\"  popovers <- data.frame(   id = paste0(\"target_\", 1:3),   content = paste(\"Popover content\", 1:3, lorem_ipsum),   stringsAsFactors = FALSE )  app <- shinyApp(   ui = f7Page(     title = \"f7Popover\",     f7SingleLayout(       navbar = f7Navbar(         title = \"f7Popover\"       ),       f7Block(         f7Toggle(           inputId = \"toggle\",           \"Enable popover\",           color = \"green\",           checked = TRUE         )       ),       f7Segment(         lapply(seq_len(nrow(popovers)), function(i) {           f7Button(             inputId = sprintf(\"target_%s\", i),             sprintf(\"Popover target %s\", i)           )         })       )     )   ),   server = function(input, output, session) {     # Enable/disable (don't run first)     observeEvent(input$toggle,       {         lapply(           seq_len(nrow(popovers)),           function(i) toggleF7Popover(id = popovers[i, \"id\"])         )       },       ignoreInit = TRUE     )      # show     lapply(seq_len(nrow(popovers)), function(i) {       observeEvent(input[[popovers[i, \"id\"]]], {         addF7Popover(           id = popovers[i, \"id\"],           options = list(             content = popovers[i, \"content\"]           )         )       })     })   } )  if (interactive() || identical(Sys.getenv(\"TESTTHAT\"), \"true\")) app"},{"path":"/reference/preloader.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 preloader — showF7Preloader","title":"Framework7 preloader — showF7Preloader","text":"showF7Preloader shows preloader. target NULL, overlay applies entire view, preventing perform actions. type NULL, target ignored. updateF7Preloader updates preloader. hideF7Preloader hides preloader.","code":""},{"path":"/reference/preloader.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 preloader — showF7Preloader","text":"","code":"showF7Preloader(   target = NULL,   color = NULL,   type = NULL,   id = NULL,   session = shiny::getDefaultReactiveDomain() )  updateF7Preloader(   id,   title = NULL,   text = NULL,   progress = NULL,   session = shiny::getDefaultReactiveDomain() )  hideF7Preloader(   target = NULL,   id = NULL,   session = shiny::getDefaultReactiveDomain() )"},{"path":"/reference/preloader.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 preloader — showF7Preloader","text":"target Element preloader overlay added. color Preloader color. type Leave NULL use default preloader use either \"dialog\" \"progress\". id type NULL, id required able use updateF7Preloader. session Shiny session object. title Dialog title. text Dialog text. progress Progress bar content.","code":""},{"path":"/reference/preloader.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 preloader — showF7Preloader","text":"","code":"if (interactive()) {   library(shiny)   library(shinyMobile)    # preloader in container   shinyApp(     ui = f7Page(       title = \"Preloader in container\",       f7SingleLayout(         navbar = f7Navbar(           title = \"Preloader in container\"         ),         # main content         f7Block(           f7Button(\"compute\", \"Compute\")         ),         f7Block(textOutput(\"calc\"))       )     ),     server = function(input, output, session) {       res <- reactiveVal(NULL)       progress <- reactiveVal(NULL)       output$calc <- renderText(res())        observeEvent(input$compute, {         res(NULL)         progress(0)         showF7Preloader(color = \"red\", type = \"progress\", id = \"loader\")         for (i in seq_along(1:100)) {           Sys.sleep(0.025)           progress(i)           updateF7Preloader(             id = \"loader\",             title = \"Computing ...\",             text = sprintf(\"Done: %s/100\", progress()),             progress = progress()           )         }         res(\"Result!\")       })        observeEvent(res(), {         hideF7Preloader(id = \"loader\")       })     }   ) }"},{"path":"/reference/preview_mobile.html","id":null,"dir":"Reference","previous_headings":"","what":"Allow to preview a given app on different devices. — preview_mobile","title":"Allow to preview a given app on different devices. — preview_mobile","text":"Allow preview given app different devices.","code":""},{"path":"/reference/preview_mobile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Allow to preview a given app on different devices. — preview_mobile","text":"","code":"preview_mobile(   appPath = NULL,   url = NULL,   port = 3838,   device = c(\"iphoneX\", \"galaxyNote8\", \"iphone8\", \"iphone8+\", \"iphone5s\", \"iphone5c\",     \"ipadMini\", \"iphone4s\", \"nexus5\", \"galaxyS5\", \"htcOne\"),   color = NULL,   landscape = FALSE )"},{"path":"/reference/preview_mobile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Allow to preview a given app on different devices. — preview_mobile","text":"appPath App preview local. url App preview online. port Default port. Ignored url provided. device Wrapper devices. color Wrapper color. iphone8 (black, silver, gold), iphone8+ (black, silver, gold), iphone5s (black, silver, gold), iphone5c (white,red , yellow, green, blue), iphone4s (black, silver), ipadMini (black, silver) galaxyS5 (black, white). landscape Whether put device wrapper landscape mode. Default FALSE.","code":""},{"path":"/reference/preview_mobile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Allow to preview a given app on different devices. — preview_mobile","text":"shiny app containing iframe surrounded device wrapper.","code":""},{"path":"/reference/preview_mobile.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Allow to preview a given app on different devices. — preview_mobile","text":"choose either url appPath!","code":""},{"path":"/reference/preview_mobile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Allow to preview a given app on different devices. — preview_mobile","text":"","code":"if (interactive()) {  library(shiny)  library(shinyMobile)  preview_mobile(appPath = \"~/whatever\", device = \"galaxyNote8\") }"},{"path":"/reference/progress.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 progress bar — f7Progress","title":"Framework7 progress bar — f7Progress","text":"f7Progress creates progress bar. updateF7Progress update framework7 progress bar server side","code":""},{"path":"/reference/progress.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 progress bar — f7Progress","text":"","code":"f7Progress(id, value = NULL, color)  updateF7Progress(id, value, session = shiny::getDefaultReactiveDomain())"},{"path":"/reference/progress.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 progress bar — f7Progress","text":"id Progress id. Must unique. value Progress value. 0 100. NULL progress bar infinite. color Progress color. See https://framework7.io/docs/progressbar.html. session Shiny session object.","code":""},{"path":"/reference/progress.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 progress bar — f7Progress","text":"","code":"library(shiny) library(shinyMobile)  app <- shinyApp(   ui = f7Page(     title = \"Update Progress\",     f7SingleLayout(       navbar = f7Navbar(title = \"f7Progress\"),       f7BlockTitle(\"Progress with value\"),       f7Block(         f7Progress(id = \"pg1\", value = 10, color = \"blue\")       ),       f7Slider(         inputId = \"obs\",         label = \"Progress value\",         max = 100,         min = 0,         value = 50,         scale = TRUE       ),       f7BlockTitle(\"Infinite progress\"),       f7Block(         f7Progress(id = \"pg2\", value = NULL, color = \"red\")       )     )   ),   server = function(input, output, session) {     observeEvent(input$obs, {       updateF7Progress(id = \"pg1\", value = input$obs)     })   } )  if (interactive() || identical(Sys.getenv(\"TESTTHAT\"), \"true\")) app"},{"path":"/reference/radio.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 radio input — f7Radio","title":"Framework7 radio input — f7Radio","text":"f7Radio creates radio button input. updateF7Radio updates radio button input.","code":""},{"path":"/reference/radio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 radio input — f7Radio","text":"","code":"f7Radio(   inputId,   label,   choices = NULL,   selected = NULL,   position = c(\"left\", \"right\"),   style = list(inset = FALSE, outline = FALSE, dividers = FALSE, strong = FALSE) )  updateF7Radio(   inputId,   label = NULL,   choices = NULL,   selected = NULL,   session = shiny::getDefaultReactiveDomain() )  f7RadioChoice(..., title, subtitle = NULL, after = NULL)"},{"path":"/reference/radio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 radio input — f7Radio","text":"inputId Input id. label Input label choices List choices. Can simple vector named list list f7RadioChoice f7CheckboxChoice selected Selected element. NULL default. pass f7RadioChoice f7CheckboxChoice choices, selected must numeric value corresponding index element select. position Check mark side. \"left\" \"right\". style Input style. Inherit f7List options outline, inset, strong dividers. session Shiny session object. ... Choice content. Text striped long. title Item title. subtitle Item subtitle. Display right title.","code":""},{"path":"/reference/radio.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 radio input — f7Radio","text":"","code":"library(shiny) library(shinyMobile)  app <- shinyApp(   ui = f7Page(     title = \"Update radio\",     f7SingleLayout(       navbar = f7Navbar(title = \"Update f7Radio\"),       f7Block(f7Button(\"update\", \"Update radio\")),       f7Block(         f7Radio(           inputId = \"radio\",           label = \"Choose a fruit:\",           choices = c(\"banana\", \"apple\", \"peach\"),           selected = \"apple\",           position = \"right\"         ),         textOutput(\"res\")       ),       f7Block(         f7Radio(           inputId = \"radio2\",           label = \"Custom choices\",           choices = list(             f7RadioChoice(               \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.             Nulla sagittis tellus ut turpis condimentum,             ut dignissim lacus tincidunt\",               title = \"Choice 1\",               subtitle = \"David\",               after = \"March 16, 2024\"             ),             f7RadioChoice(               \"Cras dolor metus, ultrices condimentum sodales sit             amet, pharetra sodales eros. Phasellus vel felis tellus.             Mauris rutrum ligula nec dapibus feugiat\",               title = \"Choice 2\",               subtitle = \"Veerle\",               after = \"March 17, 2024\"             )           ),           selected = 2,           style = list(             outline = TRUE,             strong = TRUE,             inset = TRUE,             dividers = TRUE           )         ),         textOutput(\"res2\")       )     )   ),   server = function(input, output, session) {     output$res <- renderText(input$radio)     output$res2 <- renderText(input$radio2)      observeEvent(input$update, {       updateF7Radio(         session,         inputId = \"radio\",         label = \"New label\",         choices = colnames(mtcars),         selected = colnames(mtcars)[1]       )     })   } )  if (interactive() || identical(Sys.getenv(\"TESTTHAT\"), \"true\")) app"},{"path":"/reference/removetab.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 tab deletion — removeF7Tab","title":"Framework7 tab deletion — removeF7Tab","text":"removeF7Tab removes f7Tab f7Tabs.","code":""},{"path":"/reference/removetab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 tab deletion — removeF7Tab","text":"","code":"removeF7Tab(id, target, session = shiny::getDefaultReactiveDomain())"},{"path":"/reference/removetab.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 tab deletion — removeF7Tab","text":"id f7Tabs id. target f7Tab remove. session Shiny session object.","code":""},{"path":[]},{"path":"/reference/searchbar.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework 7 searchbar — f7Searchbar","title":"Framework 7 searchbar — f7Searchbar","text":"Searchbar filter elements page. f7SearchbarTrigger: Element triggers searchbar. f7HideOnSearch: elements class page hidden search f7HideOnEnable: elements class page hidden searchbar enabled f7NotFound: elements class hidden default become visible search results f7Found: elements class visible default become hidden search results. f7SearchIgnore: searchbar consider elements search results.","code":""},{"path":"/reference/searchbar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework 7 searchbar — f7Searchbar","text":"","code":"f7Searchbar(   id,   placeholder = \"Search\",   expandable = FALSE,   inline = FALSE,   options = NULL )  f7SearchbarTrigger(targetId)  f7HideOnSearch(tag)  f7HideOnEnable(tag)  f7NotFound(tag)  f7Found(tag)  f7SearchIgnore(tag)"},{"path":"/reference/searchbar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework 7 searchbar — f7Searchbar","text":"id Necessary using f7SearchbarTrigger. NULL otherwise. placeholder Searchbar placeholder. expandable Whether enable searchbar target link, navbar. See f7SearchbarTrigger. inline Useful add f7Searchbar navbar. Notice utilities like f7HideOnSearch f7NotFound compatible mode. options Search bar options. See https://framework7.io/docs/searchbar.html#searchbar-parameters. options provided, searchbar search list elements item title. may changed updating default searchContainer searchIn. targetId Id f7Searchbar. tag tag ignore.","code":""},{"path":"/reference/searchbar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework 7 searchbar — f7Searchbar","text":"","code":"library(shiny) library(shinyMobile)  cities <- names(precip)  app <- shinyApp(   ui = f7Page(     title = \"Expandable searchbar\",     f7SingleLayout(       navbar = f7Navbar(         title = \"f7Searchbar with trigger\",         subNavbar = f7SubNavbar(           f7Searchbar(id = \"search1\", expandable = TRUE)         )       ),       f7Block(         f7SearchbarTrigger(targetId = \"search1\")       ) %>% f7HideOnSearch(),       f7List(         lapply(seq_along(cities), function(i) {           f7ListItem(cities[i])         })       ) %>% f7Found(),       f7Block(         p(\"Nothing found\")       ) %>% f7NotFound()     )   ),   server = function(input, output) {} )  if (interactive() || identical(Sys.getenv(\"TESTTHAT\"), \"true\")) app"},{"path":"/reference/select.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 select input — f7Select","title":"Framework7 select input — f7Select","text":"f7Select creates select input. updateF7Select changes value select input client","code":""},{"path":"/reference/select.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 select input — f7Select","text":"","code":"f7Select(   inputId,   label,   choices,   selected = NULL,   width = NULL,   style = list(media = NULL, description = NULL, outline = FALSE) )  updateF7Select(   inputId,   selected = NULL,   session = shiny::getDefaultReactiveDomain() )"},{"path":"/reference/select.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 select input — f7Select","text":"inputId Text input id. label Text input label. choices Select input choices. selected Select input default selected value. width width input, e.g. 400px, 100%. style Input style. list media (image icon), description (text), floating, outline clearable (booleans). session Shiny session object, usually default value suffice.","code":""},{"path":"/reference/select.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Framework7 select input — f7Select","text":"Contrary f7Text, f7Select cleared label float.","code":""},{"path":"/reference/select.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 select input — f7Select","text":"","code":"library(shiny) library(shinyMobile)  app <- shinyApp(   ui = f7Page(     title = \"f7Select\",     f7SingleLayout(       navbar = f7Navbar(title = \"updateF7Select\"),       f7Card(         f7Button(inputId = \"update\", label = \"Update select\"),         br(),         f7List(           f7Select(             inputId = \"select\",             label = \"Choose a variable:\",             choices = colnames(mtcars)[-1],             selected = \"hp\",             style = list(               description = \"A basic select input\",               media = f7Icon(\"car_fill\"),               outline = TRUE             )           )         ),         verbatimTextOutput(\"test\")       )     )   ),   server = function(input, output, session) {     output$test <- renderPrint(input$select)      observeEvent(input$update, {       updateF7Select(         inputId = \"select\",         selected = \"gear\"       )     })   } )  if (interactive() || identical(Sys.getenv(\"TESTTHAT\"), \"true\")) app"},{"path":"/reference/sheet.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 sheet — f7Sheet","title":"Framework7 sheet — f7Sheet","text":"f7Sheet creates f7 sheet modal window. sheet modal used combination updateF7Sheet. need another trigger, simply add `data-sheet` = paste0(\"#\", id) tag choice (button), id refers sheet unique id well class \"sheet-open\". Inversely, need custom element close sheet, give \"sheet-close\" class. updateF7Sheet toggles f7Sheet client.","code":""},{"path":"/reference/sheet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 sheet — f7Sheet","text":"","code":"f7Sheet(   ...,   id,   hiddenItems = NULL,   orientation = c(\"top\", \"bottom\"),   swipeToClose = FALSE,   swipeToStep = FALSE,   backdrop = FALSE,   closeByOutsideClick = TRUE,   swipeHandler = TRUE,   options = list() )  updateF7Sheet(id, session = shiny::getDefaultReactiveDomain())"},{"path":"/reference/sheet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 sheet — f7Sheet","text":"... Sheet content. wipeToStep TRUE, items visible start. id Sheet unique id. hiddenItems Put items want hide inside. works swipeToStep TRUE. Default NULL. orientation \"top\" \"bottom\". swipeToClose TRUE, can closed swiping . swipeToStep TRUE sheet opened partially, swipe can expanded. backdrop Enables Sheet backdrop (dark semi transparent layer behind). default true MD theme false iOS theme. closeByOutsideClick enabled, sheet closed click outside . swipeHandler Whether display swipe handler. TRUE default. Need either swipeToClose swipeToStep set TRUE work. options parameters. See https://framework7.io/docs/sheet-modal#sheet-parameters session Shiny session object","code":""},{"path":"/reference/sheet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 sheet — f7Sheet","text":"","code":"library(shiny) library(shinyMobile)  app <- shinyApp(   ui = f7Page(     title = \"Update f7Sheet\",     f7SingleLayout(       navbar = f7Navbar(title = \"f7Sheet\"),       f7Block(f7Button(inputId = \"toggle\", label = \"Open sheet\")),       f7Sheet(         id = \"sheet\",         orientation = \"bottom\",         swipeToClose = TRUE,         swipeToStep = TRUE,         backdrop = TRUE,         options = list(push = TRUE, breakpoints = c(0.33, 0.66)),         \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.         Quisque ac diam ac quam euismod porta vel a nunc. Quisque sodales         scelerisque est, at porta justo cursus ac\",         hiddenItems = tagList(           f7Segment(             rounded = TRUE,             f7Button(color = \"blue\", label = \"My button 1\", rounded = TRUE),             f7Button(color = \"green\", label = \"My button 2\", rounded = TRUE),             f7Button(color = \"yellow\", label = \"My button 3\", rounded = TRUE)           ),           f7Grid(             cols = 1,             f7Gauge(               id = \"mygauge\",               type = \"semicircle\",               value = 10,               borderColor = \"#2196f3\",               borderWidth = 10,               valueFontSize = 41,               valueTextColor = \"#2196f3\",               labelText = \"amount of something\"             )           ),           f7Slider(             inputId = \"obs\",             label = \"Number of observations\",             max = 100,             min = 0,             value = 10,             scale = TRUE           ),           plotOutput(\"distPlot\")         )       )     )   ),   server = function(input, output, session) {     output$distPlot <- renderPlot({       hist(rnorm(input$obs))     })     observeEvent(input$obs, {       updateF7Gauge(id = \"mygauge\", value = input$obs)     })     observeEvent(input$toggle, {       updateF7Sheet(id = \"sheet\")     })   } )  if (interactive() || identical(Sys.getenv(\"TESTTHAT\"), \"true\")) app"},{"path":"/reference/shinyMobile-package.html","id":null,"dir":"Reference","previous_headings":"","what":"shinyMobile: Mobile Ready 'shiny' Apps with Standalone Capabilities — shinyMobile-package","title":"shinyMobile: Mobile Ready 'shiny' Apps with Standalone Capabilities — shinyMobile-package","text":"Develop outstanding 'shiny' apps 'iOS' 'Android' well beautiful 'shiny' gadgets. 'shinyMobile' built top latest 'Framework7' template https://framework7.io. Discover 14 new input widgets (sliders, vertical sliders, stepper, grouped action buttons, toggles, picker, smart select, ...), 2 themes (light dark), 12 new widgets (expandable cards, badges, chips, timelines, gauges, progress bars, ...) combined power server-side notifications alerts, modals, toasts, action sheets, sheets () well 3 layouts (single, tabs split).","code":""},{"path":[]},{"path":"/reference/shinyMobile-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"shinyMobile: Mobile Ready 'shiny' Apps with Standalone Capabilities — shinyMobile-package","text":"Maintainer: David Granjon dgranjon@ymail.com Authors: Veerle van Leemput veerle@hypebright.nl Victor Perrier info@dreamrs.fr Isabelle Rudolf contributors: AthlyticZ [funder] John Coene jcoenep@gmail.com [contributor] Dieter Menne dieter.menne@menne-biomed.de [contributor] Marvelapp (device.css wrappers) [contributor, copyright holder] Vladimir Kharlampidi nolimits4web@gmail.com (Framework7 HTML template) [contributor, copyright holder]","code":""},{"path":"/reference/slider.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 range slider — f7Slider","title":"Framework7 range slider — f7Slider","text":"f7Slider creates f7 slider input. updateF7Slider changes value slider input client.","code":""},{"path":"/reference/slider.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 range slider — f7Slider","text":"","code":"f7Slider(   inputId,   label,   min,   max,   value,   step = 1,   scale = FALSE,   scaleSteps = 5,   scaleSubSteps = 0,   vertical = FALSE,   verticalReversed = FALSE,   labels = NULL,   color = NULL,   noSwipping = TRUE,   showLabel = TRUE,   ...,   style = list(inset = FALSE, outline = FALSE, strong = FALSE) )  updateF7Slider(   inputId,   min = NULL,   max = NULL,   value = NULL,   scale = FALSE,   scaleSteps = NULL,   scaleSubSteps = NULL,   step = NULL,   color = NULL,   ...,   session = shiny::getDefaultReactiveDomain() )"},{"path":"/reference/slider.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 range slider — f7Slider","text":"inputId Slider input id. label Slider label. min Slider minimum range. max Slider maximum range. value Slider value vector containing 2 values (range). step Slider increase step size. scale Slider scale. scaleSteps Number scale steps. scaleSubSteps Number scale sub steps (step divided value). vertical Whether apply vertical display. FALSE default. verticalReversed Makes vertical range slider reversed (vertical must also enabled). FALSE default. labels Enables additional label around range slider knob. List 2 f7Icon expected. color See getF7Colors valid colors. noSwipping Prevent swiping slider manipulated f7TabLayout. showLabel Allow bubble containing slider value. Default TRUE. ... options pass widget. See https://framework7.io/docs/range-slider#range-slider-parameters. style Allows style input. inset, outline strong available. session Shiny session object.","code":""},{"path":"/reference/slider.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Framework7 range slider — f7Slider","text":"labels option works vertical FALSE! Important: transform range slider simple slider inversely.","code":""},{"path":"/reference/slider.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 range slider — f7Slider","text":"","code":"library(shiny) library(shinyMobile)  app <- shinyApp(   ui = f7Page(     title = \"My app\",     f7SingleLayout(       navbar = f7Navbar(title = \"updateF7Slider\"),       f7Block(         f7BlockTitle(\"Simple slider with custom style\", size = \"large\"),         f7Button(inputId = \"update_slider\", label = \"Update slider\"),         f7Slider(           inputId = \"slider\",           label = \"Number of observations\",           max = 1000,           min = 0,           value = 100,           scaleSteps = 5,           scaleSubSteps = 3,           scale = TRUE,           color = \"orange\",           labels = tagList(             f7Icon(\"circle\"),             f7Icon(\"circle_fill\")           ),           style = list(inset = TRUE, strong = TRUE, outline = TRUE)         ),         textOutput(\"slider_res\")       ),       f7Block(         f7BlockTitle(\"Range slider\", size = \"large\"),         f7Button(inputId = \"update_range\", label = \"Update slider\"),         f7Slider(           inputId = \"range\",           label = \"Range values\",           max = 500,           min = 0,           step = 0.01,           color = \"deeppurple\",           value = c(50, 100)         ),         textOutput(\"range_res\")       )     )   ),   server = function(input, output, session) {     output$slider_res <- renderText({       input$slider     })      observeEvent(input$update_slider, {       updateF7Slider(         inputId = \"slider\",         value = 0.05,         min = 0,         max = 0.01,         scale = FALSE,         step = 0.001,         color = \"pink\"       )     })      output$range_res <- renderText({       input$range     })      observeEvent(input$update_range, {       updateF7Slider(         inputId = \"range\",         value = c(1, 5),         min = 0,         scale = TRUE,         step = 0.01,         max = 10,         color = \"teal\"       )     })   } )  if (interactive() || identical(Sys.getenv(\"TESTTHAT\"), \"true\")) app"},{"path":"/reference/smartselect.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 smart select — f7SmartSelect","title":"Framework7 smart select — f7SmartSelect","text":"f7SmartSelect smarter classic f7Select, allows choices filtering, ... updateF7SmartSelect changes value smart select input client.","code":""},{"path":"/reference/smartselect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 smart select — f7SmartSelect","text":"","code":"f7SmartSelect(   inputId,   label,   choices,   selected = NULL,   openIn = c(\"page\", \"sheet\", \"popup\", \"popover\"),   searchbar = TRUE,   multiple = FALSE,   maxLength = NULL,   virtualList = FALSE,   ... )  updateF7SmartSelect(   inputId,   selected = NULL,   choices = NULL,   multiple = NULL,   maxLength = NULL,   ...,   session = shiny::getDefaultReactiveDomain() )"},{"path":"/reference/smartselect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 smart select — f7SmartSelect","text":"inputId Select input id. label Select input label. choices Select input choices. selected Default selected item. NULL, first item selected. openIn Smart select type: either c(\"sheet\", \"popup\", \"popover\"). Note search bar available type popup. searchbar Whether enable search bar. TRUE default. multiple Whether allow multiple values. FALSE default. maxLength Maximum items select multiple TRUE. virtualList Enable Virtual List smart select select lot options. Default FALSE. ... options. See https://framework7.io/docs/smart-select#smart-select-parameters. session Shiny session object, usually default value suffice.","code":""},{"path":"/reference/smartselect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 smart select — f7SmartSelect","text":"","code":"library(shiny) library(shinyMobile)  app <- shinyApp(   ui = f7Page(     title = \"Update f7SmartSelect\",     f7SingleLayout(       navbar = f7Navbar(title = \"Update f7SmartSelect\"),       f7Block(f7Button(\"update\", \"Update Smart Select\")),       f7List(         inset = TRUE,         strong = TRUE,         outline = TRUE,         f7SmartSelect(           inputId = \"smartselect\",           label = \"Choose a variable:\",           choices = split(colnames(mtcars[-1]), rep(1:5)),           openIn = \"popup\"         )       ),       tableOutput(\"data\")     )   ),   server = function(input, output, session) {     output$data <- renderTable(       mtcars[, c(\"mpg\", input$smartselect), drop = FALSE],       rownames = TRUE     )      observeEvent(input$update, {       updateF7SmartSelect(         inputId = \"smartselect\",         openIn = \"sheet\",         selected = \"hp\",         choices = c(\"hp\", \"gear\", \"carb\"),         multiple = TRUE,         maxLength = 2       )     })   } )  if (interactive() || identical(Sys.getenv(\"TESTTHAT\"), \"true\")) app"},{"path":"/reference/stepper.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 stepper input — f7Stepper","title":"Framework7 stepper input — f7Stepper","text":"f7Stepper creates stepper input. updateF7Stepper changes value stepper input client.","code":""},{"path":"/reference/stepper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 stepper input — f7Stepper","text":"","code":"f7Stepper(   inputId,   label,   min,   max,   value,   step = 1,   fill = FALSE,   rounded = FALSE,   raised = FALSE,   size = NULL,   color = NULL,   wraps = FALSE,   autorepeat = TRUE,   manual = FALSE,   decimalPoint = 4,   buttonsEndInputMode = TRUE )  updateF7Stepper(   inputId,   min = NULL,   max = NULL,   value = NULL,   step = NULL,   fill = NULL,   rounded = NULL,   raised = NULL,   size = NULL,   color = NULL,   wraps = NULL,   decimalPoint = NULL,   autorepeat = NULL,   manual = NULL,   session = shiny::getDefaultReactiveDomain() )"},{"path":"/reference/stepper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 stepper input — f7Stepper","text":"inputId Stepper input id. label Stepper label. min Stepper minimum value. max Stepper maximum value. value Stepper value. Must belong \\[min, max\\]. step Increment step. 1 default. fill Whether fill stepper. FALSE default. rounded Whether round stepper. FALSE default. raised Whether put relied around stepper. FALSE default. size Stepper size: \"small\", \"large\" NULL. color Stepper color: NULL \"red\", \"green\", \"blue\", \"pink\", \"yellow\", \"orange\", \"grey\" \"black\". wraps wraps mode incrementing beyond maximum value sets value minimum value, likewise, decrementing minimum value sets value maximum value. FALSE default. autorepeat Pressing holding one buttons increments decrements stepper’s value repeatedly. dynamic autorepeat, rate change depends long user continues pressing control. TRUE default. manual possible enter value manually keyboard mobile keypad. click input field, stepper enter manual input mode, allow type value keyboar check fractional part defined accurancy. Click outside enter Return key, ending manual mode. TRUE default. decimalPoint Number digits dot, manual input mode. buttonsEndInputMode Disables manual input mode Stepper's minus plus button click. session Shiny session object, usually default value suffice.","code":""},{"path":"/reference/stepper.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Framework7 stepper input — f7Stepper","text":"updating, autorepeat field work correctly.","code":""},{"path":"/reference/stepper.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 stepper input — f7Stepper","text":"","code":"library(shiny) library(shinyMobile)  app <- shinyApp(   ui = f7Page(     title = \"Stepper app\",     f7SingleLayout(       navbar = f7Navbar(title = \"updateF7Stepper\"),       f7Block(f7Button(inputId = \"update\", label = \"Update stepper\")),       f7List(         strong = TRUE,         inset = TRUE,         outline = TRUE,         f7Stepper(           inputId = \"stepper\",           label = \"My stepper\",           min = 0,           max = 10,           size = \"small\",           value = 4,           wraps = TRUE,           autorepeat = TRUE,           rounded = FALSE,           raised = FALSE,           manual = FALSE         )       ),       verbatimTextOutput(\"test\")     )   ),   server = function(input, output, session) {     output$test <- renderPrint(input$stepper)      observeEvent(input$update, {       updateF7Stepper(         inputId = \"stepper\",         value = 0.1,         step = 0.01,         size = \"large\",         min = 0,         max = 1,         wraps = FALSE,         autorepeat = FALSE,         rounded = TRUE,         raised = TRUE,         color = \"pink\",         manual = TRUE,         decimalPoint = 2       )     })   } )  if (interactive() || identical(Sys.getenv(\"TESTTHAT\"), \"true\")) app"},{"path":"/reference/swipeout.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 swipeout element — f7Swipeout","title":"Framework7 swipeout element — f7Swipeout","text":"f7Swipeout designed used combination f7ListItem. f7SwipeoutItem inserted f7Swipeout.","code":""},{"path":"/reference/swipeout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 swipeout element — f7Swipeout","text":"","code":"f7Swipeout(tag, ..., left = NULL, right = NULL, side = deprecated())  f7SwipeoutItem(id, label, color = NULL)"},{"path":"/reference/swipeout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 swipeout element — f7Swipeout","text":"tag Tag swiped. ... . left side \"\", put left f7SwipeoutItem. right side \"\", put right f7SwipeoutItem. side . id Item unique id. label Item label. color Item color.","code":""},{"path":"/reference/swipeout.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 swipeout element — f7Swipeout","text":"","code":"if (interactive()) {   library(shiny)   library(shinyMobile)    media_item <- function(j) {     f7ListItem(       title = letters[j],       subtitle = \"subtitle\",       \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.             Nulla sagittis tellus ut turpis condimentum, ut dignissim             lacus tincidunt.\",       media = tags$img(         src = paste0(           \"https://cdn.framework7.io/placeholder/people-160x160-\", j, \".jpg\"         )       ),       right = \"Right Text\"     )   }   shinyApp(     ui = f7Page(       title = \"Swipeout\",       f7SingleLayout(         navbar = f7Navbar(title = \"Swipeout\"),         # simple list         f7List(           mode = \"media\",           strong = TRUE,           outline = TRUE,           inset = TRUE,           lapply(1:3, function(j) {             if (j == 1) {               f7Swipeout(                 tag = media_item(j),                 left = tagList(                   f7SwipeoutItem(id = \"alert\", \"Alert\"),                   f7SwipeoutItem(id = \"notification\", color = \"green\", \"Notif\")                 ),                 right = f7SwipeoutItem(id = \"toast\", \"Click me!\")               )             } else {               media_item(j)             }           })         )       )     ),     server = function(input, output, session) {       observe({         print(input$alert)         print(input$notification)       })        observeEvent(input$notification, {         f7Notif(           text = \"test\",           icon = f7Icon(\"bolt_fill\"),           title = \"Notification\",           subtitle = \"A subtitle\",           titleRightText = \"now\"         )       })        observeEvent(input$alert, {         f7Dialog(           title = \"Dialog title\",           text = \"This is an alert dialog\"         )       })        observeEvent(input$toast, {         f7Toast(\"This is a toast.\")       })     }   ) }"},{"path":"/reference/swiper.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 swiper — f7Swiper","title":"Framework7 swiper — f7Swiper","text":"f7Swiper creates Framework7 swiper container (like carousel). f7Slide f7Swiper element.","code":""},{"path":"/reference/swiper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 swiper — f7Swiper","text":"","code":"f7Swiper(   ...,   id,   options = list(speed = 400, loop = FALSE, spaceBetween = 50, slidesPerView = \"auto\",     centeredSlides = TRUE, navigation = list(nextEl = \".swiper-button-next\", prevEl =     \".swiper-button-prev\"), pagination = list(el = \".swiper-pagination\", clickable =     TRUE), scrollbar = list(el = \".swiper-scrollbar\", draggable = TRUE)) )  f7Slide(...)"},{"path":"/reference/swiper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 swiper — f7Swiper","text":"... Slide content. element. id Swiper unique id. options options. Expect list. See https://swiperjs.com/swiper-api available options.","code":""},{"path":"/reference/swiper.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Framework7 swiper — f7Swiper","text":"David Granjon, dgranjon@ymail.com","code":""},{"path":"/reference/swiper.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 swiper — f7Swiper","text":"","code":"library(shiny) library(shinyMobile)  app <- shiny::shinyApp(   ui = f7Page(     title = \"Swiper\",     f7SingleLayout(       navbar = f7Navbar(title = \"f7Swiper\"),       f7Swiper(         id = \"swiper\",         f7Slide(           f7Card(             f7Toggle(               inputId = \"toggle\",               label = \"My toggle\",               color = \"pink\",               checked = TRUE             ),             verbatimTextOutput(\"test\")           )         ),         f7Slide(           f7Card(             f7Slider(               inputId = \"slider\",               label = \"Number of observations\",               max = 1000,               min = 0,               value = 100,               scaleSteps = 5,               scaleSubSteps = 3,               scale = TRUE,               color = \"orange\",               labels = tagList(                 f7Icon(\"circle\"),                 f7Icon(\"circle_fill\")               )             ),             textOutput(\"test2\")           ),         )       )     )   ),   server = function(input, output) {     output$test <- renderPrint(input$toggle)     output$test2 <- renderText(input$slider)   } )  if (interactive() || identical(Sys.getenv(\"TESTTHAT\"), \"true\")) app"},{"path":"/reference/swiperTag.html","id":null,"dir":"Reference","previous_headings":"","what":"Needed for swipeable tabs — swiperTag","title":"Needed for swipeable tabs — swiperTag","text":"See https://framework7.io/docs/tabs#swipeable-tabs.","code":""},{"path":"/reference/swiperTag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Needed for swipeable tabs — swiperTag","text":"","code":"swiperTag(...)"},{"path":"/reference/tabs.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Framework7 tabs — f7Tabs","title":"Create a Framework7 tabs — f7Tabs","text":"default, f7Tabs used within f7TabLayout. However, may use standalone components specify segmented strong styles.","code":""},{"path":"/reference/tabs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Framework7 tabs — f7Tabs","text":"","code":"f7Tabs(   ...,   .items = NULL,   id = NULL,   swipeable = FALSE,   animated = TRUE,   style = c(\"toolbar\", \"segmented\", \"strong\") )"},{"path":"/reference/tabs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Framework7 tabs — f7Tabs","text":"... Slot f7Tab. .items Slot items part toolbar buttons f7TabLink. may useful open f7Sheet tabbar. id Optional get id currently selected f7Tab. swipeable Whether allow finger swipe. FALSE default. touch-screens. compatible animated. animated Whether show transition tabs. TRUE default. compatible swipeable. style Tabs style: c(\"toolbar\", \"segmented\", \"strong\"). style toolbar, f7Tab toolbar behavior.","code":""},{"path":"/reference/tabs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Framework7 tabs — f7Tabs","text":"md design, icons tabbar, tiny horizontal highlight bar displayed top active tab. Whenever tab icon included, highlight bar hidden round pill highlights currently active tab.","code":""},{"path":"/reference/tabs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a Framework7 tabs — f7Tabs","text":"David Granjon, dgranjon@ymail.com","code":""},{"path":"/reference/tabs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Framework7 tabs — f7Tabs","text":"","code":"library(shiny) library(shinyMobile)  app <- shinyApp(   ui = f7Page(     title = \"Tabs\",     options = list(dark = FALSE, theme = \"ios\"),     f7TabLayout(       navbar = f7Navbar(         title = HTML(paste(\"Currently selected:\", textOutput(\"selected\"))),         subNavbar = f7SubNavbar(           f7Button(\"update\", \"Update\", fill = FALSE, outline = TRUE),           f7Button(\"remove\", \"Remove\", fill = FALSE, outline = TRUE),           f7Button(\"insert\", \"Insert\", fill = FALSE, outline = TRUE)         )       ),       f7Tabs(         id = \"tabs\",         swipeable = TRUE,         animated = FALSE,         f7Tab(           title = \"Tab 1\",           tabName = \"Tab1\",           icon = f7Icon(\"house_alt_fill\"),           f7Block(\"Tab 1 content\"),           f7Sheet(             id = \"sheet\",             label = \"More\",             orientation = \"bottom\",             swipeToClose = TRUE,             backdrop = TRUE,             \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.             Quisque ac diam ac quam euismod porta vel a nunc. Quisque sodales             scelerisque est, at porta justo cursus ac\"           )         ),         f7Tab(           title = \"Tab 2\",           tabName = \"Tab2\",           icon = f7Icon(\"location_circle_fill\"),           f7Block(\"tab 2 text\"),           active = TRUE         ),         f7Tab(           title = \"Tab 3\",           tabName = \"Tab3\",           icon = f7Icon(\"pencil_circle_fill\"),           f7Block(\"tab 3 text\"),         ),         .items = f7TabLink(           icon = f7Icon(\"bolt_fill\"),           label = \"Toggle Sheet\",           `data-sheet` = \"#sheet\",           class = \"sheet-open\"         )       )     )   ),   server = function(input, output, session) {     output$selected <- renderText(input$tabs)      tabs <- reactiveVal(paste0(\"Tab\", 1:3))      # Update     observeEvent(input$update, {       req(length(tabs()) > 0)       tab_id <- min(tabs())       updateF7Tabs(         id = \"tabs\",         selected = tab_id       )       message(sprintf(\"Selecting %s\", tab_id))     })      # Remove max tab     observeEvent(input$remove, {       req(length(tabs()) > 0)       tab_id <- max(tabs())       removeF7Tab(         id = \"tabs\",         target = tab_id       )       message(sprintf(\"Removing %s\", tab_id))       tabs(tabs()[-which(tabs() == tab_id)])     })      # Add     observeEvent(input$insert, {       tab_id <- if (length(tabs()) > 0) max(tabs())       new_tab_id <- if (length(tabs()) > 0) {         as.numeric(strsplit(max(tabs()), \"Tab\")[[1]][2]) + 1       } else {         1       }        insertF7Tab(         id = \"tabs\",         position = if (length(tabs()) > 0) \"after\",         target = if (length(tabs()) > 0) tab_id,         tab = f7Tab(           # Use multiple elements to test for accessor function           f7Block(sprintf(\"New tab %s content\", new_tab_id)),           tabName = sprintf(\"Tab%s\", new_tab_id),           icon = f7Icon(\"app_badge\")         ),         select = TRUE       )        message(sprintf(\"Adding tab %s\", new_tab_id))       tabs(c(tabs(), sprintf(\"Tab%s\", new_tab_id)))     })   } )  if (interactive() || identical(Sys.getenv(\"TESTTHAT\"), \"true\")) app"},{"path":"/reference/text.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 text input — f7Text","title":"Framework7 text input — f7Text","text":"f7Text creates text input container. updateF7Text changes value text input client. f7TextArea creates f7 text area input. updateF7TextArea changes value text area input client. f7Password creates password input.","code":""},{"path":"/reference/text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 text input — f7Text","text":"","code":"f7Text(   inputId,   label = NULL,   value = \"\",   placeholder = NULL,   style = list(media = NULL, description = NULL, floating = FALSE, outline = FALSE,     clearable = TRUE) )  updateF7Text(   inputId,   label = NULL,   value = NULL,   placeholder = NULL,   session = shiny::getDefaultReactiveDomain() )  f7TextArea(   inputId,   label,   value = \"\",   placeholder = NULL,   resize = FALSE,   style = list(media = NULL, description = NULL, floating = FALSE, outline = FALSE,     clearable = TRUE) )  updateF7TextArea(   inputId,   label = NULL,   value = NULL,   placeholder = NULL,   session = shiny::getDefaultReactiveDomain() )  f7Password(   inputId,   label,   placeholder = NULL,   style = list(media = NULL, description = NULL, floating = FALSE, outline = FALSE,     clearable = TRUE) )"},{"path":"/reference/text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 text input — f7Text","text":"inputId Text input id. label Text input label. value Text input value. placeholder Text input placeholder. style Input style. list media (image icon), description (text), floating, outline clearable (booleans). session Shiny session object, usually default value suffice. resize Whether box can resized. Default FALSE.","code":""},{"path":"/reference/text.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Framework7 text input — f7Text","text":"Updating label work yet.","code":""},{"path":"/reference/text.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 text input — f7Text","text":"","code":"library(shiny) library(shinyMobile)  app <- shinyApp(   ui = f7Page(     f7SingleLayout(       navbar = f7Navbar(title = \"Text inputs\"),       f7Block(f7Button(\"update\", \"Click me\")),       f7BlockTitle(\"A list of inputs\"),       f7List(         inset = TRUE,         dividers = FALSE,         strong = TRUE,         f7Text(           inputId = \"text\",           label = \"Text input\",           value = \"Some text\",           placeholder = \"Your text here\",           style = list(             description = \"A cool text input\",             outline = TRUE,             media = f7Icon(\"house\"),             clearable = TRUE,             floating = TRUE           )         ),         f7TextArea(           inputId = \"textarea\",           label = \"Text Area\",           value = \"Lorem ipsum dolor sit amet, consectetur               adipiscing elit, sed do eiusmod tempor incididunt ut               labore et dolore magna aliqua\",           placeholder = \"Your text here\",           resize = TRUE,           style = list(             description = \"A cool text input\",             outline = TRUE,             media = f7Icon(\"house\"),             clearable = TRUE,             floating = TRUE           )         ),         f7Password(           inputId = \"password\",           label = \"Password:\",           placeholder = \"Your password here\",           style = list(             description = \"A cool text input\",             outline = TRUE,             media = f7Icon(\"house\"),             clearable = TRUE,             floating = TRUE           )         )       ),       f7Grid(         cols = 3,         f7Block(           f7BlockTitle(\"Text value\"),           textOutput(\"text_value\")         ),         f7Block(           f7BlockTitle(\"Text area value\"),           textOutput(\"textarea_value\")         ),         f7Block(           f7BlockTitle(\"Password value\"),           textOutput(\"password_value\")         )       )     )   ),   server = function(input, output, session) {     output$text_value <- renderText(input$text)     output$textarea_value <- renderText(input$textarea)     output$password_value <- renderText(input$password)      observeEvent(input$update, {       updateF7Text(         inputId = \"text\",         value = \"Updated Text\"       )       updateTextAreaInput(         inputId = \"textarea\",         value = \"\",         placeholder = \"New placeholder\"       )     })   } )  if (interactive() || identical(Sys.getenv(\"TESTTHAT\"), \"true\")) app"},{"path":"/reference/timeline.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 timeline — f7Timeline","title":"Framework7 timeline — f7Timeline","text":"f7Timeline static timeline container. f7TimelineItem goes inside f7Timeline.","code":""},{"path":"/reference/timeline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 timeline — f7Timeline","text":"","code":"f7Timeline(   ...,   sides = FALSE,   horizontal = FALSE,   calendar = FALSE,   year = NULL,   month = NULL )  f7TimelineItem(   ...,   date = NULL,   card = FALSE,   time = NULL,   title = NULL,   subtitle = NULL,   side = NULL )"},{"path":"/reference/timeline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 timeline — f7Timeline","text":"... Item content, text instance. sides Enable side--side timeline mode. horizontal Whether use horizontal layout. compatible sides. calendar Special type horizontal layout current year month. year Current year, calendar TRUE. month Current month, calendar TRUE. date Timeline item date. Required. card Whether wrap content card. FALSE default. time Timeline item time. Optional. title Timeline item title. Optional. subtitle Timeline item subtitle. Optional. side Force element required side: \"right\" \"left\". sides os TRUE f7Timeline","code":""},{"path":"/reference/timeline.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Framework7 timeline — f7Timeline","text":"David Granjon dgranjon@ymail.com","code":""},{"path":"/reference/timeline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 timeline — f7Timeline","text":"","code":"library(shiny) library(shinyMobile)  items <- tagList(   lapply(1:5,          function(i) {            f7TimelineItem(              paste0(\"Another text \", i),              date = paste0(i, \" Dec\"),              card = i %% 2 == 0,              time = paste0(10 + i, \":30\"),              title = paste0(\"Title\", i),              subtitle = paste0(\"Subtitle\", i),              side = ifelse(i %% 2 == 0, \"left\", \"right\")            )          }   ) )  app <- shinyApp(   ui = f7Page(     title = \"Timelines\",     f7SingleLayout(       navbar = f7Navbar(title = \"Timelines\"),       f7BlockTitle(title = \"Horizontal timeline\", size = \"large\") %>%         f7Align(side = \"center\"),       f7Timeline(         sides = FALSE,         horizontal = TRUE,         items       ),       f7BlockTitle(title = \"Vertical side by side timeline\", size = \"large\") %>%         f7Align(side = \"center\"),       f7Timeline(         sides = TRUE,         items       ),       f7BlockTitle(title = \"Vertical timeline\", size = \"large\") %>%         f7Align(side = \"center\"),       f7Timeline(items),       f7BlockTitle(title = \"Calendar timeline\", size = \"large\") %>%         f7Align(side = \"center\"),       f7Timeline(items, calendar = TRUE, year = \"2019\", month = \"December\")     )   ),   server = function(input, output) {} )  if (interactive() || identical(Sys.getenv(\"TESTTHAT\"), \"true\")) app"},{"path":"/reference/toggle.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 toggle input — f7Toggle","title":"Framework7 toggle input — f7Toggle","text":"f7Toggle creates F7 toggle switch input. updateF7Toggle changes value toggle input client.","code":""},{"path":"/reference/toggle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 toggle input — f7Toggle","text":"","code":"f7Toggle(inputId, label, checked = FALSE, color = NULL)  updateF7Toggle(   inputId,   checked = NULL,   color = NULL,   session = shiny::getDefaultReactiveDomain() )"},{"path":"/reference/toggle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 toggle input — f7Toggle","text":"inputId Toggle input id. label Toggle label. checked Whether check toggle. FALSE default. color Toggle color: NULL \"primary\", \"red\", \"green\", \"blue\", \"pink\", \"yellow\", \"orange\", \"purple\", \"deeppurple\", \"lightblue\", \"teal, \"lime\", \"deeporange\", \"gray\", \"white\", \"black\". session Shiny session object.","code":""},{"path":"/reference/toggle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 toggle input — f7Toggle","text":"","code":"library(shiny) library(shinyMobile)  app <- shinyApp(   ui = f7Page(     title = \"f7Toggle\",     f7SingleLayout(       navbar = f7Navbar(title = \"updateF7Toggle\"),       f7Card(         f7Button(inputId = \"update\", label = \"Update toggle\"),         br(),         f7Toggle(           inputId = \"toggle\",           label = \"My toggle\",           color = \"pink\",           checked = FALSE         ),         verbatimTextOutput(\"test\")       )     )   ),   server = function(input, output, session) {     output$test <- renderPrint({       input$toggle     })      observeEvent(input$update, {       updateF7Toggle(         inputId = \"toggle\",         checked = !input$toggle,         color = \"green\"       )     })   } )  if (interactive() || identical(Sys.getenv(\"TESTTHAT\"), \"true\")) app"},{"path":"/reference/tooltip.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 tooltip — f7Tooltip","title":"Framework7 tooltip — f7Tooltip","text":"f7Tooltip creates static tooltip, UI side. addF7Tooltip adds dynamic tooltip given target. tooltip can modified later. updateF7Tooltip updates tooltip server. Either toggle update text content.","code":""},{"path":"/reference/tooltip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 tooltip — f7Tooltip","text":"","code":"f7Tooltip(tag, text)  addF7Tooltip(   id = NULL,   selector = NULL,   options,   session = shiny::getDefaultReactiveDomain() )  updateF7Tooltip(   id = NULL,   selector = NULL,   action = c(\"toggle\", \"update\"),   text = NULL,   session = shiny::getDefaultReactiveDomain() )"},{"path":"/reference/tooltip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 tooltip — f7Tooltip","text":"tag Tooltip target. text New tooltip text value. See https://framework7.io/docs/tooltip#tooltip-parameters. id Tooltip target id. selector jQuery selector. Allow customization target (nested tags). options List options pass tooltip. See https://framework7.io/docs/tooltip#tooltip-parameters. session Shiny session object. action Either toggle update tooltip.","code":""},{"path":"/reference/tooltip.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 tooltip — f7Tooltip","text":"","code":"library(shiny) library(shinyMobile)  lorem_ipsum <- \"Lorem ipsum dolor sit amet!\"  tooltips <- data.frame(   id = paste0(\"target_\", 1:2),   text = paste(\"Tooltip content\", 1:2, lorem_ipsum),   stringsAsFactors = FALSE )  app <- shinyApp(   ui = f7Page(     title = \"Tooltip\",     f7SingleLayout(       navbar = f7Navbar(title = \"f7Tooltip\"),       # Static tooltip       f7Segment(         f7Tooltip(           f7Badge(\"Hover on me\", color = \"teal\"),           text = \"A tooltip!\"         )       ),       # Dynamic tooltips       f7Segment(         f7Toggle(           inputId = \"toggle\",           \"Enable tootlips\",           color = \"deeporange\",           checked = TRUE         )       ),       f7Segment(         lapply(seq_len(nrow(tooltips)), function(i) {           f7Button(             inputId = sprintf(\"target_%s\", i),             sprintf(\"Target %s\", i)           )         })       ),       f7Text(\"tooltip_text\", \"Tooltip new text\", placeholder = \"Type a text\")     )   ),   server = function(input, output, session) {     # Update content     observeEvent(input$tooltip_text, {       lapply(seq_len(nrow(tooltips)), function(i) {         updateF7Tooltip(           id = tooltips[i, \"id\"],           action = \"update\",           text = input$tooltip_text         )       })     }, ignoreInit = TRUE)      observeEvent(input$toggle, {       lapply(seq_len(nrow(tooltips)), function(i) {         updateF7Tooltip(id = tooltips[i, \"id\"], action = \"toggle\")       })     }, ignoreInit = TRUE)      # Create     lapply(seq_len(nrow(tooltips)), function(i) {       observeEvent(input[[tooltips[i, \"id\"]]], {         addF7Tooltip(           id = tooltips[i, \"id\"],           options = list(             text = tooltips[i, \"text\"]           )         )       })     })   } )  if (interactive() || identical(Sys.getenv(\"TESTTHAT\"), \"true\")) app library(shiny) library(shinyMobile)  lorem_ipsum <- \"Lorem ipsum dolor sit amet!\"  tooltips <- data.frame(   id = paste0(\"target_\", 1:2),   text = paste(\"Tooltip content\", 1:2, lorem_ipsum),   stringsAsFactors = FALSE )  app <- shinyApp(   ui = f7Page(     title = \"Tooltip\",     f7SingleLayout(       navbar = f7Navbar(title = \"f7Tooltip\"),       # Static tooltip       f7Segment(         f7Tooltip(           f7Badge(\"Hover on me\", color = \"teal\"),           text = \"A tooltip!\"         )       ),       # Dynamic tooltips       f7Segment(         f7Toggle(           inputId = \"toggle\",           \"Enable tootlips\",           color = \"deeporange\",           checked = TRUE         )       ),       f7Segment(         lapply(seq_len(nrow(tooltips)), function(i) {           f7Button(             inputId = sprintf(\"target_%s\", i),             sprintf(\"Target %s\", i)           )         })       ),       f7Text(\"tooltip_text\", \"Tooltip new text\", placeholder = \"Type a text\")     )   ),   server = function(input, output, session) {     # Update content     observeEvent(input$tooltip_text, {       lapply(seq_len(nrow(tooltips)), function(i) {         updateF7Tooltip(           id = tooltips[i, \"id\"],           action = \"update\",           text = input$tooltip_text         )       })     }, ignoreInit = TRUE)      observeEvent(input$toggle, {       lapply(seq_len(nrow(tooltips)), function(i) {         updateF7Tooltip(id = tooltips[i, \"id\"], action = \"toggle\")       })     }, ignoreInit = TRUE)      # Create     lapply(seq_len(nrow(tooltips)), function(i) {       observeEvent(input[[tooltips[i, \"id\"]]], {         addF7Tooltip(           id = tooltips[i, \"id\"],           options = list(             text = tooltips[i, \"text\"]           )         )       })     })   } )  if (interactive() || identical(Sys.getenv(\"TESTTHAT\"), \"true\")) app"},{"path":"/reference/updateF7App.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Framework7 configuration — updateF7App","title":"Update Framework7 configuration — updateF7App","text":"updateF7App allows update shinyMobile app run time injecting configuration inside current running instance. Useful want share behavior across multiple elements. can also used update app theme, dark mode, color.","code":""},{"path":"/reference/updateF7App.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Framework7 configuration — updateF7App","text":"","code":"updateF7App(options, session = shiny::getDefaultReactiveDomain())"},{"path":"/reference/updateF7App.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update Framework7 configuration — updateF7App","text":"options List options. session Shiny session object.","code":""},{"path":"/reference/updateF7App.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Update Framework7 configuration — updateF7App","text":"function may work options intended advanced/expert usage.","code":""},{"path":"/reference/updateF7App.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update Framework7 configuration — updateF7App","text":"","code":"library(shiny) library(shinyMobile)  colors <- c(   lightblue = \"#5ac8fa\",   pink = \"#ff2d55\",   teal = \"#009688\",   yellow = \"#ffcc00\" )  app <- shinyApp(   ui = f7Page(     title = \"Update App\",     options = (       list(         color = \"#5ac8fa\"       )     ),     f7SingleLayout(       navbar = f7Navbar(title = \"Update App\"),       f7BlockTitle(\"Update f7Dialog configuration\"),       f7Segment(         f7Button(           inputId = \"goButton\",           \"Show f7Dialog\"         ),         f7Button(           inputId = \"update\",           \"Update config\"         )       ),       f7BlockTitle(\"Update theme\"),       f7Segment(         f7Button(           inputId = \"theme_ios\",           \"iOS theme\"         ),         f7Button(           inputId = \"theme_md\",           \"MD theme\"         )       ),       f7BlockTitle(\"Set dark mode\"),       f7Segment(         f7Button(           inputId = \"enable_darkmode\",           \"Enable darkmode\"         ),         f7Button(           inputId = \"disable_darkmode\",           \"Disable darkmode\"         )       ),       f7BlockTitle(\"Change color theme\"),       f7Segment(         tagList(           lapply(names(colors),                  function(color) {                    f7Button(                      inputId = paste0(\"color_\", color),                      label = color,                      color = color,                    )                  }           )         )       )     )   ),   server = function(input, output, session) {     observeEvent(input$goButton, {       f7Dialog(         id = \"test2\",         title = \"Dialog title\",         text = \"This is an alert dialog\",         type = \"confirm\"       )     })      observeEvent(input$update, {       updateF7App(         options = list(           dialog = list(             buttonOk = \"Yeaaaah!\",             buttonCancel = \"Ouuups!\"           )         )       )        f7Dialog(         id = \"test\",         title = \"Warning\",         type = \"confirm\",         text = \"Look at me, I have a new buttons!\"       )     })      observeEvent(input$theme_ios, {       updateF7App(         options = list(           theme = \"ios\"         )       )     })      observeEvent(input$theme_md, {       updateF7App(         options = list(           theme = \"md\"         )       )     })      observeEvent(input$enable_darkmode, {       updateF7App(         options = list(           dark = TRUE         )       )     })      observeEvent(input$disable_darkmode, {       updateF7App(         options = list(           dark = FALSE         )       )     })      lapply(names(colors), function(color) {       observeEvent(input[[paste0(\"color_\", color)]], {         updateF7App(           options = list(             color = colors[color]           )         )       })     })    } )  if (interactive() || identical(Sys.getenv(\"TESTTHAT\"), \"true\")) app"},{"path":"/reference/updateF7Entity.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Framework7 entity — updateF7Entity","title":"Update Framework7 entity — updateF7Entity","text":"updateF7Entity allows update Framework7 instance server. entity, list updatable properties may significantly vary. Please refer Framework7 documentation https://framework7.io/docs/. Currently, updateF7Entity supports f7Gauge, f7Swiper, f7Searchbar, f7PhotoBrowser, f7Popup, f7ListIndex f7ActionSheet.","code":""},{"path":"/reference/updateF7Entity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Framework7 entity — updateF7Entity","text":"","code":"updateF7Entity(id, options, session = shiny::getDefaultReactiveDomain())"},{"path":"/reference/updateF7Entity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update Framework7 entity — updateF7Entity","text":"id Element id. options Configuration list. Tightly depends entity. See https://framework7.io/docs/. session Shiny session object.","code":""},{"path":"/reference/updateF7Entity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update Framework7 entity — updateF7Entity","text":"","code":"library(shiny) library(shinyMobile)  app <- shinyApp(   ui = f7Page(     title = \"Update Entity\",     f7SingleLayout(       navbar = f7Navbar(title = \"Update action sheet instance\"),       f7BlockTitle(\"Action sheet\", size = \"large\"),       f7Segment(         f7Button(           inputId = \"goButton\",           \"Show action sheet\",           fill = FALSE,           outline = TRUE         ),         f7Button(           inputId = \"update_action_sheet\",           \"Update config\",           fill = FALSE,           outline = TRUE         ),         f7Button(           inputId = \"reset_action_sheet\",           \"Reset\",           fill = FALSE,           outline = TRUE         )       ),       f7BlockTitle(\"Gauges\", size = \"large\"),       f7Block(         f7Gauge(           id = \"mygauge\",           type = \"semicircle\",           value = 50,           borderColor = \"#2196f3\",           borderWidth = 10,           valueFontSize = 41,           valueTextColor = \"#2196f3\",           labelText = \"amount of something\"         )       ),       f7Block(f7Button(\"update_gauge\", \"Update Gauge\")),       f7BlockTitle(\"Swiper\", size = \"large\"),       f7Swiper(         id = \"swiper\",         lapply(1:20, function(c) {           f7Slide(             f7Card(               title = sprintf(\"Slide %s\", c)             )           )         })       ),       f7Block(f7Button(\"update_swiper\", \"Update Swiper\")),       f7BlockTitle(\"Photo Browser\", size = \"large\"),       f7Segment(         f7Button(           \"show_photobrowser\",           \"Open photo browser\",           fill = FALSE,           outline = TRUE         ),         f7Button(           \"update_photobrowser\",           \"Update photo browser\",           fill = FALSE,           outline = TRUE         )       ),       f7BlockTitle(\"Popup\", size = \"large\"),       f7Segment(         f7Button(           \"toggle\",           \"Toggle Popup\",           fill = FALSE,           outline = TRUE         ),         f7Button(           \"update\",           \"Update Popup\",           fill = FALSE,           outline = TRUE         )       )     )   ),   server = function(input, output, session) {     observeEvent(input$goButton, {       f7ActionSheet(         grid = TRUE,         id = \"action1\",         buttons = list(           list(             text = \"Notification\",             icon = f7Icon(\"info\"),             color = NULL           ),           list(             text = \"Dialog\",             icon = f7Icon(\"lightbulb_fill\"),             color = NULL           )         )       )     })      observeEvent(input$update_action_sheet, {       updateF7Entity(         id = \"action1\",         options = list(           buttons = list(             list(               text = \"Notification\",               icon = f7Icon(\"info\"),               color = NULL             )           )         )       )     })      observeEvent(input$reset_action_sheet, {       updateF7Entity(         id = \"action1\",         options = list(           buttons = list(             list(               text = \"Notification\",               icon = f7Icon(\"info\"),               color = NULL             ),             list(               text = \"Dialog\",               icon = f7Icon(\"lightbulb_fill\"),               color = NULL             )           )         )       )     })      observeEvent(input$update_gauge, {       new_val <- 75       updateF7Entity(         id = \"mygauge\",         options = list(           # Must be between 0 and 1           value = new_val / 100,           valueText = paste0(new_val, \"%\"),           labelText = \"New label!\"         )       )     })      observeEvent(input$update_swiper, {       updateF7Entity(         \"swiper\",         options = list(           speed = 100,           slidesPerView = 2,           spaceBetween = 10,           autoplay = TRUE,           scrollbar = list(             enabled = FALSE           ),           navigation = list(             enabled = FALSE           ),           pagination = list(             type = \"progressbar\"           ),           grid = list(             fill = \"columns\",             rows = 4           ),           thumbs = TRUE         )       )     })      observeEvent(input$show_photobrowser, {       f7PhotoBrowser(         id = \"photobrowser1\",         theme = \"dark\",         type = \"page\",         photos = list(           list(url = \"https://cdn.framework7.io/placeholder/sports-1024x1024-1.jpg\"),           list(url = \"https://cdn.framework7.io/placeholder/sports-1024x1024-2.jpg\"),           list(             url = \"https://cdn.framework7.io/placeholder/sports-1024x1024-3.jpg\",             caption = \"Me cycling\"           )         ),         thumbs = c(           \"https://cdn.framework7.io/placeholder/sports-1024x1024-1.jpg\",           \"https://cdn.framework7.io/placeholder/sports-1024x1024-2.jpg\",           \"https://cdn.framework7.io/placeholder/sports-1024x1024-3.jpg\"         )       )     })      observeEvent(input$update_photobrowser, {       updateF7Entity(         \"photobrowser1\",         options = list(           type = \"popup\",           popupPush = TRUE,           toolbar = FALSE,           photos = list(             list(url = \"https://cdn.framework7.io/placeholder/sports-1024x1024-1.jpg\")           ),           thumbs = list(\"https://cdn.framework7.io/placeholder/sports-1024x1024-1.jpg\")         )       )     })      observeEvent(input$toggle, {       f7Popup(         id = \"popup\",         title = \"My first popup\",         f7Text(           \"text\", \"Popup content\",           \"This is my first popup ever, I swear!\"         ),         verbatimTextOutput(\"res\")       )     })      observeEvent(input$update, {       updateF7Entity(         id = \"popup\",         options = list(           swipeToClose = TRUE,           animate = FALSE,           closeOnEscape = TRUE,           # Content must contain the popup           # layout!!!           content = '<div class=\"popup\">             <div class=\"view\">               <div class=\"page\">                 <div class=\"navbar\">                   <div class=\"navbar-bg\"><\/div>                   <div class=\"navbar-inner\">                     <div class=\"title\">Popup<\/div>                     <div class=\"right\">                       <!-- Link to close popup -->                       <a class=\"link popup-close\">Close<\/a>                     <\/div>                   <\/div>                 <\/div>                 <div class=\"page-content\">                   <div class=\"block\">New content ...<\/div>                 <\/div>               <\/div>             <\/div>           <\/div>'         )       )     })   } )  if (interactive() || identical(Sys.getenv(\"TESTTHAT\"), \"true\")) app"},{"path":"/reference/updateF7Routes.html","id":null,"dir":"Reference","previous_headings":"","what":"Update routes on the server — updateF7Routes","title":"Update routes on the server — updateF7Routes","text":"Add route existing app routes.","code":""},{"path":"/reference/updateF7Routes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update routes on the server — updateF7Routes","text":"","code":"updateF7Routes(routes, session = shiny::getDefaultReactiveDomain())"},{"path":"/reference/updateF7Routes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update routes on the server — updateF7Routes","text":"routes New list routes. session Shiny session object.","code":""},{"path":"/reference/updateF7Tabs.html","id":null,"dir":"Reference","previous_headings":"","what":"Update a Framework 7 tabsetPanel — updateF7Tabs","title":"Update a Framework 7 tabsetPanel — updateF7Tabs","text":"Update f7Tabs.","code":""},{"path":"/reference/updateF7Tabs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update a Framework 7 tabsetPanel — updateF7Tabs","text":"","code":"updateF7Tabs(id, selected = NULL, session = shiny::getDefaultReactiveDomain())"},{"path":"/reference/updateF7Tabs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update a Framework 7 tabsetPanel — updateF7Tabs","text":"id Id f7Tabs update. selected Newly selected tab. session Shiny session object.","code":""},{"path":[]},{"path":"/reference/updateF7VirtualList.html","id":null,"dir":"Reference","previous_headings":"","what":"Update an f7VirtualList on the server side — updateF7VirtualList","title":"Update an f7VirtualList on the server side — updateF7VirtualList","text":"function wraps methods https://framework7.io/docs/virtual-list.html","code":""},{"path":"/reference/updateF7VirtualList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update an f7VirtualList on the server side — updateF7VirtualList","text":"","code":"updateF7VirtualList(   id,   action = c(\"appendItem\", \"appendItems\", \"prependItem\", \"prependItems\", \"replaceItem\",     \"replaceAllItems\", \"moveItem\", \"insertItemBefore\", \"filterItems\", \"deleteItem\",     \"deleteAllItems\", \"scrollToItem\"),   item = NULL,   items = NULL,   index = NULL,   indexes = NULL,   oldIndex = NULL,   newIndex = NULL,   session = shiny::getDefaultReactiveDomain() )"},{"path":"/reference/updateF7VirtualList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update an f7VirtualList on the server side — updateF7VirtualList","text":"id f7VirtualList update. action Action perform. See https://framework7.io/docs/virtual-list.html. item action one appendItem, prependItem, replaceItem, insertItemBefore. items action one appendItems, prependItems, replaceAllItems. index action one replaceItem, insertItemBefore, deleteItem. indexes action one filterItems, deleteItems. oldIndex action moveItem. newIndex action moveItem. session Shiny session.","code":""},{"path":"/reference/updateF7VirtualList.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update an f7VirtualList on the server side — updateF7VirtualList","text":"","code":"library(shiny) library(shinyMobile)  app <- shinyApp(   ui = f7Page(     title = \"Virtual List\",     f7SingleLayout(       navbar = f7Navbar(         title = \"Virtual Lists\"       ),       # controls       f7Segment(         f7Button(inputId = \"appendItem\", \"Append Item\"),         f7Button(inputId = \"prependItems\", \"Prepend Items\"),         f7Button(inputId = \"insertBefore\", \"Insert before\"),         f7Button(inputId = \"replaceItem\", \"Replace Item\")       ),       f7Segment(         f7Button(inputId = \"deleteAllItems\", \"Remove All\"),         f7Button(inputId = \"moveItem\", \"Move Item\"),         f7Button(inputId = \"filterItems\", \"Filter Items\")       ),       f7Grid(         cols = 3,         uiOutput(\"itemIndexUI\"),         uiOutput(\"itemNewIndexUI\"),         uiOutput(\"itemsFilterUI\")       ),       # searchbar       f7Searchbar(id = \"search1\"),       # main content       f7VirtualList(         id = \"vlist\",         rowsBefore = 2,         rowsAfter = 2,         mode = \"media\",         items = lapply(1:1000, function(i) {           f7VirtualListItem(             id = paste0(\"vlist-item-\", i),             title = paste(\"Title\", i),             subtitle = paste(\"Subtitle\", i),             header = paste(\"Header\", i),             footer = paste(\"Footer\", i),             right = paste(\"Right\", i),             paste0(\"Content\", i),             media = img(style = \"border-radius: 8px\",                         src = \"https://cdn.framework7.io/placeholder/fashion-88x88-1.jpg\")           )         })       )     )   ),   server = function(input, output) {      output$itemIndexUI <- renderUI({       req(input$vlist$length > 2)       f7Stepper(         inputId = \"itemIndex\",         label = \"Index\",         min = 1,         value = 2,         max = input$vlist$length       )     })      output$itemNewIndexUI <- renderUI({       req(input$vlist$length > 2)       f7Stepper(         inputId = \"itemNewIndex\",         label = \"New Index\",         min = 1,         value = 1,         max = input$vlist$length       )     })      output$itemsFilterUI <- renderUI({       input$appendItem       input$prependItems       input$insertBefore       input$replaceItem       input$deleteAllItems       input$moveItem       isolate({         req(input$vlist$length > 2)         f7Slider(           inputId = \"itemsFilter\",           label = \"Items to Filter\",           min = 1,           max = input$vlist$length,           value = c(1, input$vlist$length)         )       })     })      observeEvent(input$appendItem, {       updateF7VirtualList(         id = \"vlist\",         action = \"appendItem\",         item = f7VirtualListItem(           title = \"New Item Title\",           right = \"New Item Right\",           \"New Item Content\",           media = img(src = \"https://cdn.framework7.io/placeholder/fashion-88x88-3.jpg\")         )       )     })      observeEvent(input$prependItems, {       updateF7VirtualList(         id = \"vlist\",         action = \"prependItems\",         items = lapply(1:5, function(i) {           f7VirtualListItem(             title = paste(\"Title\", i),             right = paste(\"Right\", i),             i,             media = img(src = \"https://cdn.framework7.io/placeholder/fashion-88x88-3.jpg\")           )         })       )     })      observeEvent(input$insertBefore, {       updateF7VirtualList(         id = \"vlist\",         action = \"insertItemBefore\",         index = input$itemIndex,         item = f7VirtualListItem(           title = \"New Item Title\",           \"New Item Content\",           media = img(src = \"https://cdn.framework7.io/placeholder/fashion-88x88-3.jpg\")         )       )     })      observeEvent(input$replaceItem, {       updateF7VirtualList(         id = \"vlist\",         action = \"replaceItem\",         index = input$itemIndex,         item = f7VirtualListItem(           title = \"Replacement\",           \"Replacement Content\",           media = img(src = \"https://cdn.framework7.io/placeholder/fashion-88x88-3.jpg\")         )       )     })      observeEvent(input$deleteAllItems, {       updateF7VirtualList(         id = \"vlist\",         action = \"deleteAllItems\"       )     })      observeEvent(input$moveItem, {       updateF7VirtualList(         id = \"vlist\",         action = \"moveItem\",         oldIndex = input$itemIndex,         newIndex = input$itemNewIndex       )     })      observeEvent(input$filterItems, {       updateF7VirtualList(         id = \"vlist\",         action = \"filterItems\",         indexes = input$itemsFilter[1]:input$itemsFilter[2]       )     })    } )  if (interactive() || identical(Sys.getenv(\"TESTTHAT\"), \"true\")) app"},{"path":"/reference/validate_tabName.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate a tab name — validate_tabName","title":"Validate a tab name — validate_tabName","text":"avoid JS issues: avoid punctuation space","code":""},{"path":"/reference/validate_tabName.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate a tab name — validate_tabName","text":"","code":"validate_tabName(tabName)"},{"path":"/reference/validate_tabName.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate a tab name — validate_tabName","text":"tabName Tab validate.","code":""},{"path":"/reference/validate_tabName.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate a tab name — validate_tabName","text":"error wrong pattern found","code":""},{"path":"/reference/validation.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 input validation — validateF7Input","title":"Framework7 input validation — validateF7Input","text":"validateF7Input function validate given shinyMobile input.","code":""},{"path":"/reference/validation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 input validation — validateF7Input","text":"","code":"validateF7Input(   inputId,   info = NULL,   pattern = NULL,   error = NULL,   session = shiny::getDefaultReactiveDomain() )"},{"path":"/reference/validation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 input validation — validateF7Input","text":"inputId Input validate. info Additional text display input field. pattern Pattern validation. Regex. error Error text. session Shiny session object.","code":""},{"path":"/reference/validation.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Framework7 input validation — validateF7Input","text":"works f7Text, f7Password f7TextArea. See https://framework7.io/docs/inputs.html.","code":""},{"path":"/reference/validation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 input validation — validateF7Input","text":"","code":"library(shiny) library(shinyMobile)  app <- shinyApp(   ui = f7Page(     title = \"Validate inputs\",     f7SingleLayout(       navbar = f7Navbar(title = \"validateF7Input\"),       f7Text(         inputId = \"caption\",         label = \"Caption\",         value = \"Data Summary\"       ),       verbatimTextOutput(\"value\"),       hr(),       f7Text(         inputId = \"caption2\",         label = \"Enter a number\",         value = 1       ),       hr(),       f7Password(         inputId = \"password\",         label = \"Password\"       )     )   ),   server = function(input, output, session) {     observe({       validateF7Input(inputId = \"caption\", info = \"Whatever\")       validateF7Input(         inputId = \"caption2\",         pattern = \"[0-9]*\",         error = \"Only numbers please!\"       )       validateF7Input(         inputId = \"password\",         pattern = \"^(?=.*[a-z])(?=.*[A-Z])(?=.*\\\\d)[a-zA-Z\\\\d]{8,}$\",         error = \"Password must contain at least one         number and one uppercase and lowercase letter,         and at least 8 or more characters\"       )     })      output$value <- renderPrint({       input$caption     })   } )  if (interactive() || identical(Sys.getenv(\"TESTTHAT\"), \"true\")) app"},{"path":"/reference/virtuallist.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework7 virtual list — f7VirtualList","title":"Framework7 virtual list — f7VirtualList","text":"f7VirtualList high performance list container. Use many components f7List. f7VirtualListItem item component f7VirtualList.","code":""},{"path":"/reference/virtuallist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework7 virtual list — f7VirtualList","text":"","code":"f7VirtualList(   id,   items,   rowsBefore = NULL,   rowsAfter = NULL,   cache = TRUE,   mode = NULL,   inset = FALSE,   outline = FALSE,   dividers = FALSE,   strong = FALSE )  f7VirtualListItem(   ...,   id = NULL,   title = NULL,   subtitle = NULL,   header = NULL,   footer = NULL,   href = NULL,   media = NULL,   right = NULL,   routable = FALSE )"},{"path":"/reference/virtuallist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework7 virtual list — f7VirtualList","text":"id Optional id item. items List items. Slot f7VirtualListItem. rowsBefore Amount rows (items) rendered current screen scroll position. default equal double amount rows (items) fit screen. rowsAfter Amount rows (items) rendered current screen scroll position. default equal amount rows (items) fit screen. cache Disable enable DOM cache already rendered list items. case item rendered manipulations DOM element. useful list items user interaction elements (like form elements swipe outs) modified. mode List mode. NULL, \"simple\", \"links\", \"media\" \"contacts\". inset Whether display card border. FALSE default. outline Outline style. Default FALSE. dividers Dividers style. Default FALSE. strong Strong style. Default FALSE. ... Item text. title Item title. subtitle Item subtitle. header Item header. footer Item footer. href Item external link. media Expect f7Icon img. right Right content . routable Works href NULL. Default FALSE. TRUE, list item may point another page, recommend using f7List f7ListItem instead. See f7MultiLayout. Can also used combination href = \"#\" make items appear links, actually navigate anywhere, useful custom click events.","code":""},{"path":"/reference/virtuallist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework7 virtual list — f7VirtualList","text":"","code":"library(shiny) library(shinyMobile)  app <- shinyApp(   ui = f7Page(     title = \"Virtual List\",     f7SingleLayout(       navbar = f7Navbar(         title = \"Virtual Lists\"       ),       # controls       f7Segment(         f7Button(inputId = \"appendItem\", \"Append Item\"),         f7Button(inputId = \"prependItems\", \"Prepend Items\"),         f7Button(inputId = \"insertBefore\", \"Insert before\"),         f7Button(inputId = \"replaceItem\", \"Replace Item\")       ),       f7Segment(         f7Button(inputId = \"deleteAllItems\", \"Remove All\"),         f7Button(inputId = \"moveItem\", \"Move Item\"),         f7Button(inputId = \"filterItems\", \"Filter Items\")       ),       f7Grid(         cols = 3,         uiOutput(\"itemIndexUI\"),         uiOutput(\"itemNewIndexUI\"),         uiOutput(\"itemsFilterUI\")       ),       # searchbar       f7Searchbar(id = \"search1\"),       # main content       f7VirtualList(         id = \"vlist\",         rowsBefore = 2,         rowsAfter = 2,         mode = \"media\",         items = lapply(1:1000, function(i) {           f7VirtualListItem(             id = paste0(\"vlist-item-\", i),             title = paste(\"Title\", i),             subtitle = paste(\"Subtitle\", i),             header = paste(\"Header\", i),             footer = paste(\"Footer\", i),             right = paste(\"Right\", i),             paste0(\"Content\", i),             media = img(style = \"border-radius: 8px\",                         src = \"https://cdn.framework7.io/placeholder/fashion-88x88-1.jpg\")           )         })       )     )   ),   server = function(input, output) {      output$itemIndexUI <- renderUI({       req(input$vlist$length > 2)       f7Stepper(         inputId = \"itemIndex\",         label = \"Index\",         min = 1,         value = 2,         max = input$vlist$length       )     })      output$itemNewIndexUI <- renderUI({       req(input$vlist$length > 2)       f7Stepper(         inputId = \"itemNewIndex\",         label = \"New Index\",         min = 1,         value = 1,         max = input$vlist$length       )     })      output$itemsFilterUI <- renderUI({       input$appendItem       input$prependItems       input$insertBefore       input$replaceItem       input$deleteAllItems       input$moveItem       isolate({         req(input$vlist$length > 2)         f7Slider(           inputId = \"itemsFilter\",           label = \"Items to Filter\",           min = 1,           max = input$vlist$length,           value = c(1, input$vlist$length)         )       })     })      observeEvent(input$appendItem, {       updateF7VirtualList(         id = \"vlist\",         action = \"appendItem\",         item = f7VirtualListItem(           title = \"New Item Title\",           right = \"New Item Right\",           \"New Item Content\",           media = img(src = \"https://cdn.framework7.io/placeholder/fashion-88x88-3.jpg\")         )       )     })      observeEvent(input$prependItems, {       updateF7VirtualList(         id = \"vlist\",         action = \"prependItems\",         items = lapply(1:5, function(i) {           f7VirtualListItem(             title = paste(\"Title\", i),             right = paste(\"Right\", i),             i,             media = img(src = \"https://cdn.framework7.io/placeholder/fashion-88x88-3.jpg\")           )         })       )     })      observeEvent(input$insertBefore, {       updateF7VirtualList(         id = \"vlist\",         action = \"insertItemBefore\",         index = input$itemIndex,         item = f7VirtualListItem(           title = \"New Item Title\",           \"New Item Content\",           media = img(src = \"https://cdn.framework7.io/placeholder/fashion-88x88-3.jpg\")         )       )     })      observeEvent(input$replaceItem, {       updateF7VirtualList(         id = \"vlist\",         action = \"replaceItem\",         index = input$itemIndex,         item = f7VirtualListItem(           title = \"Replacement\",           \"Replacement Content\",           media = img(src = \"https://cdn.framework7.io/placeholder/fashion-88x88-3.jpg\")         )       )     })      observeEvent(input$deleteAllItems, {       updateF7VirtualList(         id = \"vlist\",         action = \"deleteAllItems\"       )     })      observeEvent(input$moveItem, {       updateF7VirtualList(         id = \"vlist\",         action = \"moveItem\",         oldIndex = input$itemIndex,         newIndex = input$itemNewIndex       )     })      observeEvent(input$filterItems, {       updateF7VirtualList(         id = \"vlist\",         action = \"filterItems\",         indexes = input$itemsFilter[1]:input$itemsFilter[2]       )     })    } )  if (interactive() || identical(Sys.getenv(\"TESTTHAT\"), \"true\")) app"},{"path":[]},{"path":"/news/index.html","id":"bug-fixes-and-improvements-2-0-2-9000","dir":"Changelog","previous_headings":"","what":"Bug fixes and improvements","title":"shinyMobile 2.0.2.9000","text":"Fix issue/regression f7Dialog() text parameter handle list tags. Fix typo f7File() button class. Thanks @SCasanova. Responsive f7Grid(). Thanks @ThomasChln.","code":""},{"path":"/news/index.html","id":"shinymobile-201","dir":"Changelog","previous_headings":"","what":"shinyMobile 2.0.1","title":"shinyMobile 2.0.1","text":"CRAN release: 2024-10-04","code":""},{"path":"/news/index.html","id":"bug-fixes-and-improvements-2-0-1","dir":"Changelog","previous_headings":"","what":"Bug fixes and improvements","title":"shinyMobile 2.0.1","text":"Change appearance PWA install button: center text add close button. Fix #262: add infinite class f7Progress value NULL. Attach Framework7 window object: window.Framework7 = Framework7. Fix installation issue older R versions #260.","code":""},{"path":"/news/index.html","id":"shinymobile-200","dir":"Changelog","previous_headings":"","what":"shinyMobile 2.0.0","title":"shinyMobile 2.0.0","text":"CRAN release: 2024-05-27","code":""},{"path":"/news/index.html","id":"major-change-2-0-0","dir":"Changelog","previous_headings":"","what":"Major change","title":"shinyMobile 2.0.0","text":"Update Framework7 5.7.14 8.3.3 New experimental router layout f7MultiLayout(): supported {brochure}, allows beautiful transitions pages provide native like experience. New f7Form(): gather inputs form get nested list containing input values. allows reduce number inputs server side. updateF7Form() makes possible update input batch selected ones. Whenever multiple inputs, now recommend wrap within f7List() allows benefit new styling options outline, inset, strong, … Internally, use function able detect whether input inside f7List(): yes, can style list passing parameters like f7List(outline = TRUE, inset = TRUE, ...); , input internally wrapped list correct rendering (styling possible). Besides, input like f7Text() can custom styling (add icon, clear button, outline style), independent external list wrapper style. Hence, don’t recommend f7List(outline = TRUE, f7Text(outline = TRUE)) since won’t render well (use f7List(outline = TRUE, f7Text())). Please look corresponding examples documentation. New component f7Treeview(): display items treeview. Used combination f7TreeviewItem() f7TreeviewGroup().","code":""},{"path":"/news/index.html","id":"breaking-changes-2-0-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"shinyMobile 2.0.0","text":"aurora theme removed. Supported themes now: ios, md auto. case auto use iOS theme iOS devices MD theme devices. f7AddMessages() definitely removed. Deprecated previous releases. f7Appbar() removed Framework7. alternative replace . f7ShowNavbar() f7HideNavbar() removed, long time deprecated. f7checkBox() f7checkBoxGroup() removed, long time deprecated. Remove f7InsertTab(), f7RemoveTab() long time deprecated. Remove f7ValidateInput() long time deprecated. Remove f7Popover() f7PopoverTarget() long time deprecated. Remove f7ShowPreloader() f7HidePreloader() long time deprecated. f7Menu(), f7MenuItem(), f7MenuDropdown(), f7MenuDropdownDivider() updateF7MenuDropdown() totally removed Framework7. alternative replace . f7Icon(): remove deprecated parameter old. f7SmartSelect(): maxlength becomes maxLength. Typo Framework7. Remove value f7Password() (accidental copy paste f7Text()). Possible breaking change: f7Toolbar() default position now bottom. Possible breaking change: remove httr dependency app_container(). Possible breaking change f7PhotoBrowser(): id param reintroduce (mandatory, default NULL) needed updateF7Entity() update widget server side. Possible breaking change f7ListItem: now, don’t allow footer header whenever parent list container mode media (avoids cluttered layout). subtitle provided without parent list mode media, error also raised (subtitle specific media list layout). right can’t passed title NULL.","code":""},{"path":"/news/index.html","id":"soft-deprecation-2-0-0","dir":"Changelog","previous_headings":"","what":"Soft deprecation","title":"shinyMobile 2.0.0","text":"multiCollapse removed Framework7. hairlines deprecated since removed Framework7. container deprecated, removed Framework7. shadow subtitle removed Framework7. f7SocialCard() deprecated result can achieved f7Card(). f7AutoComplete(): expandInput deprecated, removed Framework7. f7Row(), f7Col() f7Flex() deprecated favor f7Grid(), specified Framework7 8.3.3 f7Fabs(): morph deprecated. morphTarget used. hairline shadow deprecated, removed Framework7. f7Shadow()removed Framework7. replacement. removed future release. f7Swipeout: deprecate side parameter .... Now use either left/right . f7AutoComplete: value now defaults NULL (instead first choice). updateF7Login(): id deprecated.","code":""},{"path":"/news/index.html","id":"minor-change-2-0-0","dir":"Changelog","previous_headings":"","what":"Minor change","title":"shinyMobile 2.0.0","text":"f7Messages(): corresponding input now list lists, item single f7Message(). previous setting optimal R,JS binding returning array objects, can’t easily translated R. now return object objects becomes list lists. f7Block() gains outline parameter (add grey border). f7Button() get new tonal style. also possible pass icon parameter update icon updateF7Button. f7Card() get new raised divider parameters. f7CheckboxGroup() new position parameter control check icon position. Default left. f7CheckboxChoice(): new function pass inside choices f7CheckboxGroup(). Improved choice title, subtitle, … f7List() new outline, dividers strong styles. mode gains 2 new values: simple links. f7ListItem() new routable parameter allows navigation pages new f7MultiLayout(). f7ListItem() f7VirtualListItem() new optional argument id, allows easy targeting. f7ListIndex() now gets applied specific element, instead whole page. makes possible add multiple lists list indexes app. Added id argument f7List(), makes possible use id target f7ListIndex. f7Panel() new “floating”/“push” effects well new options parameter pass extra configuration. See https://framework7.io/docs/panel#panel-parameters. f7VirtualList() new outline, dividers strong styles. Additionally, mode added following possible values: simple, links, media contacts. f7Popup() new push effect (pushing main view behind opening). ’s also new argument called page can control whether popup behaves page can scroll- handy popups content. f7Radio() new position parameter control check icon position. Default left (like f7CheckboxGroup()). Also, f7Radio() inherits f7List() styling parameters inset, outline,dividers, strong styling option. f7RadioChoice(): new function pass inside choices f7Radio(). Improved choice title, subtitle, … f7Sheet() gains new options parameter allow passing configuration. See https://framework7.io/docs/sheet-modal#sheet-parameters. f7Picker() new ... parameter pass custom options. Also f7Picker() now can NULL value, allowing display placeholder. f7DatePicker() new ... parameter pass custom options. f7DatePicker() now also supports usage timePicker, returns posixct object enabled. See https://framework7.io/docs/calendar#examples. Added tapHoldPreventClicks, touchClicksDistanceThreshold, mdTouchRipple f7Page() touch options. dark option f7Page() now also supports \"auto\" besides TRUE FALSE. set auto (new default) automatically enables dark theme based user system color scheme preference. showF7Preloader() new type parameter new modal dialog support (type passed). New id parameter set type NULL. hideF7Preloader() new id parameter. hide modals progress server. New updateF7Preloader() able update progress preloader server. f7PhotoBrowser() fixed pageBackLinkText back type set page, removed. Framework7 default now used, pageBackLinkText can set manually (iOS ). f7ColorPicker() new ... parameter pass custom options now returns list values hex, rgb, hsl, hsb, alpha, hue, rgba, hsla values. f7Slider() new ... parameter pass extra options. New showLabel parameter: fix unfortunate naming conflict input label (name) name Framework7 given bubble component (label). f7AutoComplete() updateF7AutoComplete() new ... parameter pass extra options well new style parameter customize input look feel. f7AutoComplete() new style parameter allow custom styling openIn dropdown. f7SplitLayout() new look minimal app width (1024 px) sidebar becomes always visible. sidebar collapsed smaller screens. f7Text(), f7TextArea() f7Password() new parameters: description, media, floating, outline cleareable styling options. label can also NULL. f7Select() new description, media outline parameters. f7Link() new routable parameter allows use new experimental router layout f7MultiLayout(). f7Navbar(): leftPanel rightPanel now accept shiny tags icon link. useful support new router layout. Items must wrapped shiny::tagList(). New f7DefaultOptions(): can used f7Page() pass app options. f7Picker, f7DatePicker f7ColorPicker now additional style parameter set input style inherit f7List options outline, inset, strong dividers. f7Toggle() f7Stepper() automatically detect called inside f7List adjust accordingly list style. f7TabLink(): href can now different # passed ... (Default still # custom href detected). allows use tab links routable links better rendering toolbar/tabbar classic f7Link(). updateF7App can now also handle changes app theme (ios md), dark mode, color. f7Fabs() new argument global can used make FABs persistent across different tabs f7TabLayout(). f7ExpandableCard() new argument buttonColor can used control color close button. f7Login() new argument cancellable can, optionally, show cancel button close login window. f7LoginServer() also return cancel state can used trigger actions server side, like changing tab. updateF7Login(): new cancel parameter close login window. Fix various issues documentation. Include new vignettes.","code":""},{"path":"/news/index.html","id":"shinymobile-101","dir":"Changelog","previous_headings":"","what":"shinyMobile 1.0.1","title":"shinyMobile 1.0.1","text":"CRAN release: 2024-03-01","code":""},{"path":"/news/index.html","id":"new-1-0-1","dir":"Changelog","previous_headings":"","what":"New","title":"shinyMobile 1.0.1","text":"Added webR pkgdown infrastructure allows run shinylive apps documentation.","code":""},{"path":"/news/index.html","id":"minor-change-1-0-1","dir":"Changelog","previous_headings":"","what":"Minor change","title":"shinyMobile 1.0.1","text":"Add limit f7AutoComplete(). Thanks @bthieurmel.","code":""},{"path":"/news/index.html","id":"bug-fixes-1-0-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"shinyMobile 1.0.1","text":"Fix ignored height f7Card() (Typo). Fix CRAN note.","code":""},{"path":"/news/index.html","id":"shinymobile-100","dir":"Changelog","previous_headings":"","what":"shinyMobile 1.0.0","title":"shinyMobile 1.0.0","text":"CRAN release: 2022-11-25","code":""},{"path":"/news/index.html","id":"new-1-0-0","dir":"Changelog","previous_headings":"","what":"New","title":"shinyMobile 1.0.0","text":"Added skeletonsOnLoad f7Page() options (compatible) preloader.","code":""},{"path":"/news/index.html","id":"breaking-change-1-0-0","dir":"Changelog","previous_headings":"","what":"Breaking change","title":"shinyMobile 1.0.0","text":"preloader moved f7Page() options list. Removed loading_duration f7Page(). Now preloader automatically disappear shiny idle like bs4Dash. panels becomes panel f7SplitLayout() consistency reasons. f7Tab() uses validate_tabName Tab 1 valid anymore Tab1 yes. Tabs manually renamed. f7Popup() now generated server side like f7Notif(). Remove updateF7Popup(), f7TogglePopup(). Reworked f7listIndex(): remove f7ListIndexItem(). f7ListIndex() generated server side. Reworked f7Skeleton(): triggered server side. See examples.","code":""},{"path":"/news/index.html","id":"bug-fixes-and-improvements-1-0-0","dir":"Changelog","previous_headings":"","what":"Bug fixes and improvements","title":"shinyMobile 1.0.0","text":"Improve f7Swiper(): better CSS, pagination, navigation, scrollbar, … Fix issue f7PhotoBrowser() example: wrong default theme … f7CheckBox(): better layout. Fix issue f7FabMorphTarget() example. Fix #226: f7PhotoBrowser() just works two pictures. Fix issue JSON conversion. Fix issue updateF7Popup() documentation (showed deprecated mistake). New skeleton effect load (automatic): applied grey background elements loading. Ends shiny idle. New skeleton effect output recalculation. Fix issue f7Navbar(): hard-coded css style causing white text white background. Fix #151: Issue navbar/toolbar scroll. See . Fix #165: Setting separate theme panels work. Fix #181: Adding dynamic tab empty panel. Related #220. new title parameter available f7Tab() pass name, oposed tabName. Fix #228: Vignette Example doesn’t show graphs. Breaking change shiny 1.7.2. Issue f7SmartSelect() openIn param (failed provided). Fix #219: Avoid using inline CSS users can easily override {shinyMobile} defaults. Fix #220: f7Tab() can create duplicate IDs turn break page. Now use validate_tabName internally check whether tab valid (avoid JS issues jQuery selectors)… Fix #224: updateF7AutoComplete() accepts choices. Fixes #217: f7SmartSelect() interfering NS server-side module. Fixes #215: Icon displayed reconnect / reload toaster. Add f7Icon deps anyway. Fixes #204: issue f7DatePicker() DST. Update CI/CD setup. Fix issue f7Page() accept anymore color name. Now, like earlier versions, f7Page() accepts either hex code color name. Fixes #222: f7Slider() code updated work fix #215 .","code":""},{"path":"/news/index.html","id":"shinymobile-091","dir":"Changelog","previous_headings":"","what":"shinyMobile 0.9.1","title":"shinyMobile 0.9.1","text":"CRAN release: 2021-09-16 release fixes issue Shiny 1.7.0 failing unit test. Thanks @schloerke","code":""},{"path":"/news/index.html","id":"shinymobile-090","dir":"Changelog","previous_headings":"","what":"shinyMobile 0.9.0","title":"shinyMobile 0.9.0","text":"CRAN release: 2021-07-22 release also fixes issue R CMD check htmltools.","code":""},{"path":"/news/index.html","id":"breaking-change-0-9-0","dir":"Changelog","previous_headings":"","what":"Breaking change","title":"shinyMobile 0.9.0","text":"f7Link() icon now expects f7Icon(). label mandatory anymore.","code":""},{"path":"/news/index.html","id":"major-change-0-9-0","dir":"Changelog","previous_headings":"","what":"Major change","title":"shinyMobile 0.9.0","text":"New updateF7Radio(). Fixes #135. Thanks @korterling.","code":""},{"path":"/news/index.html","id":"minor-change-0-9-0","dir":"Changelog","previous_headings":"","what":"Minor change","title":"shinyMobile 0.9.0","text":"security embedded apps. Added shinyMobile hands slides Getting Started vignette. f7Dialog() fixed height 300px vertical overflow avoid issues. Add ... f7SmartSelect(). Add options f7SearchBar() provide configuration. Fixes #47: thanks @rodrigoheck. Add valueText param f7Gauge(). Fixes #84: thanks @tanho63. Reworked f7Gauge() JS code (user impact). Rework widget JS code base (user impact).","code":""},{"path":"/news/index.html","id":"bug-fixes-0-9-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"shinyMobile 0.9.0","text":"Fix #180: Tab highlight index issue android devices tab remove add tab. Fix #190: add longer dialog text f7Dialog. Fix #154: include link icon f7Link() function. Fix #127: Enable groups f7SmartSelect(). Fix #174 #134: Reactive elements created inside insertF7Tab() losing reactivity. Fix #98: f7DatePicker() visibility issue. Thanks @styvens. Fix #120: f7Button() link working. Thanks @bwganblack. Fix #144: Close f7SmartSelect() selection. Thanks @dewalex.","code":""},{"path":"/news/index.html","id":"shinymobile-080","dir":"Changelog","previous_headings":"","what":"shinyMobile 0.8.0","title":"shinyMobile 0.8.0","text":"CRAN release: 2021-01-11 release addresses following reverse dependency issue shiny. Moreover, also starts road v1.0.0 (later year).","code":""},{"path":"/news/index.html","id":"soft-deprecations-0-8-0","dir":"Changelog","previous_headings":"","what":"Soft Deprecations","title":"shinyMobile 0.8.0","text":"f7AddMessages() become updateF7Messages() future release f7HideNavbar() f7ShowNavbar() replaced updateF7Navbar() f7ShowPopup() become updateF7Popup() f7checkBox() become f7Checkbox() f7checkBoxGroup() become f7CheckboxGroup() f7ValidateInput() become validateF7Input() f7InsertTab() f7RemoveTab() becomes insertF7Tab() removeF7Tab(), respectively f7ShowPreloader() f7HidePreloader() become showF7Preloader() hideF7Preloader(), respectively. f7Popover() f7PopoverTarget() replaced addF7Popover() toggleF7Popover() create_manifest() going replaced workflow described : https://unleash-shiny.rinterface.com/mobile-pwa.html#charpente--pwa-tools","code":""},{"path":[]},{"path":"/news/index.html","id":"inputs-0-8-0","dir":"Changelog","previous_headings":"Breaking changes","what":"Inputs","title":"shinyMobile 0.8.0","text":"updateF7Fabs(): inputId becomes id","code":""},{"path":"/news/index.html","id":"layout-0-8-0","dir":"Changelog","previous_headings":"Breaking changes","what":"Layout","title":"shinyMobile 0.8.0","text":"f7Appbar(): left_panel becomes leftPanel right_panel rightPanel f7Init() removed. Now pass f7Page() options f7Navbar(): left_panel becomes leftPanel right_panel rightPanel f7Panel() updateF7Panel(): inputId becomes id f7InsertTab() f7RemoveTab(): inputId becomes id","code":""},{"path":"/news/index.html","id":"cards-0-8-0","dir":"Changelog","previous_headings":"Breaking changes","what":"Cards","title":"shinyMobile 0.8.0","text":"f7ExpandableCard() f7Card(): img becomes image f7SocialCard(): author_img becomes image","code":""},{"path":"/news/index.html","id":"lists-0-8-0","dir":"Changelog","previous_headings":"Breaking changes","what":"Lists","title":"shinyMobile 0.8.0","text":"f7ListItem(): url becomes href f7VirtualListItem(): url becomes href updateF7VirtualList(): old_index new_index become oldIndex newIndex, respectively","code":""},{"path":"/news/index.html","id":"interactions-0-8-0","dir":"Changelog","previous_headings":"Breaking changes","what":"Interactions","title":"shinyMobile 0.8.0","text":"session mandatory f7Toast(), updateF7Progress(), … swapped end parameters convenience f7Dialog(): inputId becomes id updateF7Sheet(): inputId becomes id","code":""},{"path":"/news/index.html","id":"buttons-0-8-0","dir":"Changelog","previous_headings":"Breaking changes","what":"Buttons","title":"shinyMobile 0.8.0","text":"f7Link(): external removed (much simpler), src becomes href f7Button(): src becomes href","code":""},{"path":"/news/index.html","id":"others-0-8-0","dir":"Changelog","previous_headings":"Breaking changes","what":"Others","title":"shinyMobile 0.8.0","text":"session swapped end f7Gauge() mandatory. Default shiny::getDefaultReactiveDomain() f7Chip(): icon_status becomes iconStatus, img becomes image inputId becomes id f7Accordion() updateF7Accordion() Remove f7ProgressInf() (useless) Change f7Swiper() API. New options parameter f7PhotoBrowser() now called shiny server function. See help, id label removed id mandatory f7Searchbar()","code":""},{"path":"/news/index.html","id":"major-changes-0-8-0","dir":"Changelog","previous_headings":"","what":"Major changes","title":"shinyMobile 0.8.0","text":"New updateF7Entity() New updateF7ActionSheet() New addF7Tooltip() updateF7Tooltip() generate tooltips server New allowPWA parameter f7Page() doesn’t oblige users create PWA f7Page() new options parameter replacement f7Init(). Much simpler handle update framework7 5.5.0 5.7.14 add f7Menu(), f7MenuItem(), f7MenuDropdown(), f7MenuDropdownDivider() updateF7MenuDropdown(): special buttons dropdown elements, behaving like action buttons","code":""},{"path":"/news/index.html","id":"minor-changes-0-8-0","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"shinyMobile 0.8.0","text":"app instance accessible anywhere JS code New … parameter f7PhotoBrowser() Add choices updateF7SmartSelect(): thanks @Edireito Add disconnect toast shiny:disconnect occurs. Gives ability reload reconnect","code":""},{"path":"/news/index.html","id":"bug-fixes-0-8-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"shinyMobile 0.8.0","text":"Fix #128 #140: workerId issue url. Thanks @Tixierae @ppagnone. Fix #104: f7Picker NULL value. Prevents JS breaking. Thanks @Seyphaton Correcting internal use htmltools::attachDependencies() create_app_ui","code":""},{"path":"/news/index.html","id":"shinymobile-070","dir":"Changelog","previous_headings":"","what":"shinyMobile 0.7.0","title":"shinyMobile 0.7.0","text":"CRAN release: 2020-06-17","code":""},{"path":"/news/index.html","id":"notes-0-7-0","dir":"Changelog","previous_headings":"","what":"Notes","title":"shinyMobile 0.7.0","text":"disable backdrop f7Searchbar() since messes tabbar navigation. impact user experience. future release shinyMobile, f7Searchbar() input binding associated well parameters configuration","code":""},{"path":"/news/index.html","id":"breaking-changes-0-7-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"shinyMobile 0.7.0","text":"f7SmartSelect(): type param becomes openIn align inputs rework f7Messages(): messages updated server side f7AddMessages(). New f7MessageBar() send messages server side. f7ActionSheet(): access currently selected button, use input$[sheet_id]_button. make action sheets compatible shiny modules. Moreover, buttons provided must included list (dataframe) f7Sheet() still inserted UI side can triggered either server side combination updateF7Sheet() (see example) UI side. Overall, improves flexibility since user may choose trigger element. practice, element data-sheet pointing sheet id well “sheet-open” css class may open , instead default trigger contained sheet. use case may open sheet tabbar (trigger f7TabLink() special button styled tabbar) update method inputs : argument session now optional moved last position function call f7AutoComplete(): type becomes openIn align framework7 documentation remove parameter fill f7Icon() (used) Rewrite f7Popup(). now input associated giving popup state (opened closed) well new parameters: backdrop, closeByBackdropClick, closeOnEscape, animate swipeToClose. label parameters removed. create f7Popup() put f7Popup() tag UI. server side call f7TogglePopup(). See documentation detailed example. Thanks @pasahe f7NavbarHide() renamed f7HideNavbar() consistancy f7NavbarShow() renamed f7ShowNavbar() consistancy f7Gauge() valueText removed. make sense value can accidentally different text displayed. valueText internal parameter. f7DatePicker(): min becomes minDate, max becomes maxDate format becomes dateFormat remove maximizable parameter f7Appbar()","code":""},{"path":"/news/index.html","id":"major-changes-0-7-0","dir":"Changelog","previous_headings":"","what":"Major changes","title":"shinyMobile 0.7.0","text":"new input$shinyInfo input$lastInputChanged (see shinyMobile tools vignette details) f7SmartSelect() input binding well update function updateF7SmartSelect() new f7VirtualList(), f7VirtualListItem(), updateF7VirtualList(): high performance list caching system -> faster rendering (10x faster f7List()). Ability add item(s), remove item(s), move item, filter items, … new messagebar parameter f7TabLayout(). allows use f7Messagebar() tabs layout configuration. new f7ValidateInput() function validate input server side (similar shinyFeedback internal shinyMobile without dependencies) new f7Login() updateF7Login() feature provide UI boilerplates authentication f7Tabs() may used standalone components style argument (segmented strong). toolbar default behavior. update f7Icon() icons dependencies. thanks @pvictor new updateF7DatePicker(): thanks @pvictor add input binding f7Fabs() get status container add updateF7Button() updateF7Fabs() new pullToRefresh parameter f7Init(). Pull screen top bottom fires input$ptr becomes TRUE. pull refresh event finished, input$ptr NULL. Useful trigger events observeEvent add new updateF7Select(): thanks @Seyphaton suggestion add f7TogglePopup() close/open f7Popup(). Thanks @pasahe add preview_mobile(): function previews app seleted range devices (iphone, samsung, htc, …) redesign way inputs options passed R Javascript. impact user side improves security code quality","code":""},{"path":"/news/index.html","id":"minor-changes-0-7-0","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"shinyMobile 0.7.0","text":"add new f7File() file upload. See shiny fileInput add new f7DownloadButton() work properly shiny downloadHandler function. Thanks @bwganblack report add new tapHoldDelay parameter f7Init() control delay necessary trigger long press (default 750 ms) new f7ShowPreloader() f7HidePreloader() new f7TextArea() input updateF7TextArea() server side add block title f7checkBoxGroup() f7Radio() add new f7TabLink() (special link insert f7Tabs() may open f7Sheet()) add new active parameter f7Button() add new strong parameter f7Segment() Improve website. Thanks @pvictor new fullsize closeButton parameter f7Popup() + rewrite js binding. Thanks @pvictor add extra parameters f7DatePicker(): direction, openIn, scrollToInput, closeByOutsideClick, toolbar, toolbarCloseText, header headerPlaceholder add new parameters updateF7Gauge(). Thanks @rodrigoheck suggestion add noSwipping argument f7Slider() prevent wrong behaviour used f7TabLayout() f7Select() rely anymore shiny selectInput binding (impact user experience) add hidden argument f7Tab(): allows navigate hidden tabs without displaying tab menu. Thanks @rodrigoheck add closeOnSelect param f7AutoComplete() add new parameters f7Picker() updateF7Picker(): rotateEffect, openIn, scrollToInput, closeByOutsideClick, toolbar, toolbarCloseText sheetSwipeToClose add color argument f7Icon() add selected parameter f7Select() update framework7 5.3.0 add color updateF7Slider() add color f7Slider() add cheatsheet reference readme add f7Slider() labels (remove enableLabels param) add step, scaleSteps scaleSubSteps updateF7Slider() add scaleSteps, scaleSubSteps verticalReversed f7Slider() add decimalPoint updateF7Stepper() rework f7Stepper(): add 2 parameters (decimalPoint buttonsEndInputMode) hideNavOnPageScroll set FALSE default f7Init(). improves perfomances old devices improve f7SingleLayout() example (replace sliderInput f7Slider) improve f7SplitLayout() example (replace sliderInput f7Slider) improve f7TabLayout() example add copyrights","code":""},{"path":"/news/index.html","id":"bug-fix-0-7-0","dir":"Changelog","previous_headings":"","what":"Bug fix","title":"shinyMobile 0.7.0","text":"Fix issue updateF7AutoComplete: text input updated. Thanks @sanchez5674 report Remove duplicated html tag f7Page(). Thanks @ pvictor Fix issue f7Sheet() wrong css style applied multiple sheets app Fix issue f7Tabs(): one put f7Tabs() inside f7Tab() parent f7Tabs(), input binding giving wrong tab top level tabset (clicked tab containing sub-tabset). Fix issue f7InsertTab() f7RemoveTab() swipeable TRUE trigger shown event f7Tabs() click. allows use f7Tabs() without swipeable animated Allow output elements displayed f7Panel() (need provide f7Panel() inputId) Prevent f7Swipeout() make current tab swipping f7TabLayout() Fix f7Fab() label white background color dark mode fix #19: letting bigger TRUE f7Navbar() center body content scroll, due css conflict fix issue f7Slider() f7TabLayout(): setting value slider swipeable f7TabLayout cause tab swip. describe : framework7io/framework7#2603. Thanks @pvictor fix #39: issue f7DatePicker() format months. Thanks @kmaheshkulkarni fix issue f7DatePicker(): viewport scroll input default fix typo f7AutoComplete() example fix #43: slider label visible drag. Thanks @pasahe fix #42: add vertical overflow f7Popup(). Thanks @pasahe fix #41: render shiny outputs f7Popup(). Now f7Popup() triggers shiny output rendering. Thanks @pasahe fix #31: updateF7Gauge() -> wrong fraction semi circle gauges. fix f7Stepper(): options properly initialized (max, min, …) fix f7Slider() example 2: wrong argument help fix f7Icon() example: wrong function name fix f7Row() example f7Sheet(): hiddenItems NULL default apply magin bottom toolbar f7Appbar()","code":""},{"path":"/news/index.html","id":"shinymobile-010","dir":"Changelog","previous_headings":"","what":"shinyMobile 0.1.0","title":"shinyMobile 0.1.0","text":"CRAN release: 2019-11-30 Added NEWS.md file track changes package.","code":""}]
