% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/f7Login.R
\name{f7Login}
\alias{f7Login}
\alias{f7LoginServer}
\alias{updateF7Login}
\title{Framework7 login screen}
\usage{
f7Login(
  ...,
  id,
  title,
  label = "Sign In",
  footer = NULL,
  startOpen = TRUE,
  module = TRUE
)

f7LoginServer(id, ignoreInit = FALSE, trigger = NULL)

updateF7Login(
  id,
  user = NULL,
  password = NULL,
  session = shiny::getDefaultReactiveDomain()
)
}
\arguments{
\item{...}{Slot for inputs like password, text, ...}

\item{id}{Login unique id. input$\if{html}{\out{<id>}} gives the status of the login page (
either opened or closed).}

\item{title}{Login page title.}

\item{label}{Login confirm button label.}

\item{footer}{Optional footer.}

\item{startOpen}{Whether to open the login page at start. Default to TRUE. There
are some cases where it is interesting to set up to FALSE, for instance when you want
to have authentication only in a specific tab of your app (See example 2).}

\item{module}{Whether or not to use in combination with \link{f7LoginServer}. Can be
set to FALSE if you want to develop your own server functionality, or if you want to
use \code{f7Login} inside a module yourself. Note that inputs, like user, password and submit,
will need to be accessed with the id of \code{f7Login} with -user, -password or -submit appended.
For example: "input$\code{login-user}".}

\item{ignoreInit}{If TRUE, then, when this observeEvent is first
created/initialized, ignore the handlerExpr (the second argument),
whether it is otherwise supposed to run or not. The default is FALSE.}

\item{trigger}{Reactive trigger to toggle the login page state. Useful, when
one wants to set up local authentication (for a specific section). See example 2.}

\item{user}{Value of the user input.}

\item{password}{Value of the password input.}

\item{session}{Shiny session object.}
}
\description{
Provide a template for authentication

\code{f7LoginServer} is a useful server elements to fine tune the
\link{f7Login} page.

\code{updateF7Login} toggles a login page.
}
\details{
This function does not provide any security check.
}
\note{
There is an input associated with the login status, namely input$login.
It is linked to an action button, which is 0 when the application starts. As soon
as the button is pressed, its value is incremented which might fire a
\code{observeEvent} listening to it (See example below). Importantly,
the login page is closed only if the text and password inputs are filled. The
\code{f7LoginServer} contains a piece of server logic that does this work for you.
}
\examples{
library(shiny)
library(shinyMobile)

app <- shinyApp(
  ui = f7Page(
    title = "Login module",
    f7SingleLayout(
      navbar = f7Navbar(
        title = "Login Example"
      ),
      toolbar = f7Toolbar(
        position = "bottom",
        f7Link(label = "Link 1", href = "https://www.google.com"),
        f7Link(label = "Link 2", href = "https://www.google.com")
      ),
      f7Login(id = "login", title = "Welcome"),
      # main content
      f7BlockTitle(
        title = HTML(paste("Welcome", textOutput("user"))),
        size = "large"
      )
    )
  ),
  server = function(input, output, session) {
    loginData <- f7LoginServer(id = "login")

    exportTestValues(res = loginData)

    output$user <- renderText({
      req(loginData$user)
      loginData$user()
    })
  }
)

if (interactive() || identical(Sys.getenv("TESTTHAT"), "true")) app
}
