% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/f7Fab.R
\name{f7Fabs}
\alias{f7Fabs}
\alias{updateF7Fabs}
\alias{f7FabMorphTarget}
\title{Framework7 container for floating action button (FAB)}
\usage{
f7Fabs(
  ...,
  id = NULL,
  position = c("right-top", "right-center", "right-bottom", "left-top", "left-center",
    "left-bottom", "center-center", "center-top", "center-bottom"),
  color = NULL,
  extended = FALSE,
  label = NULL,
  sideOpen = c("left", "right", "top", "bottom", "center"),
  morph = deprecated(),
  morphTarget = NULL
)

updateF7Fabs(id, session = shiny::getDefaultReactiveDomain())

f7FabMorphTarget(tag)
}
\arguments{
\item{...}{Slot for \link{f7Fab}.}

\item{id}{Optional: access the current state of the \link{f7Fabs} container.}

\item{position}{Container position.}

\item{color}{Container color.}

\item{extended}{If TRUE, the FAB will be wider. This allows to use a label (see below).}

\item{label}{Container label. Only if extended is TRUE.}

\item{sideOpen}{When the container is pressed, indicate where buttons are displayed.}

\item{morph}{\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#deprecated}{\figure{lifecycle-deprecated.svg}{options: alt='[Deprecated]'}}}{\strong{[Deprecated]}}:
removed from Framework7.}

\item{morphTarget}{CSS selector of the morph target: \code{".toolbar"} for instance.}

\item{session}{The Shiny session object, usually the default value will suffice.}

\item{tag}{Target tag.}
}
\description{
\code{f7Fabs} hosts multiple \link{f7Fab}.

\code{updateF7Fabs} toggles \link{f7Fabs} on the server side.

\code{f7FabMorphTarget} convert a tag into a target morphing.
See \url{https://framework7.io/docs/floating-action-button#fab-morph}.
}
\note{
The background color might be an issue depending on the parent container. Consider
it experimental.
}
\examples{
library(shiny)
library(shinyMobile)

app <- shinyApp(
  ui = f7Page(
    title = "Update f7Fabs",
    f7SingleLayout(
      navbar = f7Navbar(title = "Update f7Fabs"),
      toolbar = f7Toolbar(
        position = "bottom",
        lapply(1:3, function(i) f7Link(label = i, href = "#") |> f7FabClose())
      ) |> f7FabMorphTarget(),
      # put an empty f7Fabs container
      f7Fabs(
        id = "fabsMorph",
        extended = TRUE,
        label = "Open",
        position = "center-bottom",
        color = "yellow",
        sideOpen = "right",
        morphTarget = ".toolbar"
      ),
      f7Block(f7Button(inputId = "toggle", label = "Toggle Fabs")),
      f7Fabs(
        position = "center-center",
        id = "fabs",
        lapply(1:3, function(i) f7Fab(inputId = i, label = i))
      ),
      textOutput("res")
    )
  ),
  server = function(input, output, session) {
    output$res <- renderText(input[["1"]])

    observeEvent(input$toggle, {
      updateF7Fabs(id = "fabs")
    })
  }
)

if (interactive() || identical(Sys.getenv("TESTTHAT"), "true")) app
}
\author{
David Granjon, \email{dgranjon@ymail.com}
}
